<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>那年你27、8岁</title>
    <link href="/b6a4fd82fcfc.html"/>
    <url>/b6a4fd82fcfc.html</url>
    
    <content type="html"><![CDATA[<p>18岁以后，他已经不是为了自己而活着</p><p>18岁，你上了大学。</p><p>20岁，你大二结束，开始悔恨<br>自己前两年幼稚的行为<br>于是开始努力</p><p>22岁你大学毕业了，却发现<br>找不到一份令自己满意的工作</p><p>26岁，你看着身边的人都结了婚<br>婚礼的份子钱逐年递增<br>春节回家，父母从带你串亲戚<br>变成了带你去见相亲对象<br>见了十几个姑娘<br>你每次都觉得和那个她比<br>差了一点</p><p>28岁那年，你遇到了一个和你遭遇差不多的姑娘<br>你们有一搭没一搭聊着<br>她说：你还不错<br>你喝了一口可乐说：你也是<br>你还不确定喜不喜欢她<br>双方家长就已经摆好了订婚宴<br>结婚的前一周，你和朋友出去喝酒<br>你说，不想结婚<br>朋友说，你啊，就是想太多。谁不是这么过来的？</p><p>29岁，你们终于结了婚<br>婚礼办的不大不小，朋友来的不多不少<br>攒了几年想要去实现理想的钱<br>搭在了这一场百人的私人庙会上<br>婚礼进行到中间<br>司仪带着标准的商业化微笑<br>对着台下的亲朋喊道<br>要不要让他们亲一个！<br>台下那些人跟着一起起哄<br>不知道为什么<br>你简简单单的亲了一口<br>俩人恢复到了一开始的站位<br>你小声说了一句：我爱你<br>那个昨天还看不惯你倒腾模型的新娘<br>愣了一下说：我也爱你<br>你不确定她是不是对你说的<br>就像你不确定是不是对她说的一样<br>婚礼结束后，并没有你想象的浪漫<br>你听着外屋的新娘一笔一笔的算着份子钱<br>想着不过才两年，怎么就变成这样了<br>想着想着，洞房夜就睡着了</p><p>30岁，她怀孕了<br>辞掉了工作，在家养胎<br>你在公司逐渐有了点地位<br>手里管着十来个人<br>独立负责一个项目<br>结婚前陪嫁的那辆20万左右的车<br>也变成了你一个人的独享<br>但你依然不敢放松<br>每次加班<br>电话那头都是抱怨与委屈<br>但你不能争辩什么<br>谁让她怀了你的孩子<br>在这一刻<br>不论是她的父母还是你的父母<br>都无条件的站在这一边</p><p>31岁，孩子落地了<br>前前后后连孕检带住院费花了10万块钱<br>不过无所谓<br>你看着你的孩子，怎么看怎么喜欢<br>高兴的仿佛这是你的新生</p><p>32岁，这是人生最不愿意重复的一年<br>平均睡眠3小时<br>孩子每一个小时都要闹腾一次<br>第二天拖着睡不醒的眼睛去上班<br>老板说你上班不干活<br>回家媳妇说你不干活<br>你想了半天不明白，那谁干活呢？<br>那辆开了3年的车<br>成为了你真正的家<br>你不在抱怨路上拥堵的交通<br>你甚至开始希望<br>再多堵一会<br>回到家，你关了发动机<br>在车上点了一根烟<br>这是你每天最幸福的十分钟<br>车前是功名利禄，车尾是柴米油盐</p><p>35岁你因为身体越来越差<br>加班越来越少<br>晋升的速度也越来越缓慢<br>那天下班，媳妇告诉你<br>孩子要上幼儿园了<br>双语的一个月3000<br>你皱了皱眉头，那边就已经不耐烦了<br>“四单元的老王家孩子，一个月6000”<br>“你已经这样了，你想让孩子也输？”<br>你没说话，回屋给媳妇转了6000块钱<br>这笔钱，你原本打算给自己过个生日，买个新电脑</p><p>38岁，孩子上了一年级<br>老师说一年级最关键，打好基础很重要<br>你笑着说，是是是，老师您多照顾<br>新生接待的老师看着你不明事理的脸<br>给你指了一条明路<br>“课外辅导班，一个月2200”</p><p>40岁的时候，孩子上了三年级<br>老师说，三年级，最关键，承上启下很重要<br>你笑着说：是是是，正打算再报个补习班</p><p>44岁，孩子上了初中<br>有一天回到家，她对你说<br>爸爸，我想学钢琴<br>你没什么犹豫的<br>你以为这些年，你已经习惯了<br>但那句“爸爸现在买不起”你始终说不出口<br>好在孩子比较懂事<br>她说：爸爸没事，要不我先学陶笛也可以<br>你看着这么懂事的孩子，却开心不起来</p><p>46岁，孩子上了一个不好不差的高中<br>有一天你在开会，接到了老师的电话<br>电话里说你的孩子在学校打架了<br>叫你去一趟<br>你唯唯诺诺的<br>和那个比你还小5岁的领导请了个假<br>到学校又被老师训了一通<br>无非台词就是那一句<br>你们做家长的就知道工作，能不能陪陪孩子<br>你看着这个老师，有点可笑<br>好像当时说：家长在外辛苦点<br>多赚点钱让孩子多补补课的和他不是一个人</p><p>50岁，孩子上了大学<br>很争气，是一个一本<br>他学的专业你有点看不懂<br>你只知道工作不一定好找<br>而且学费还死贵<br>你和他深夜想聊聊<br>准备了半斤白酒，一碟花生米<br>你说着那些曾经你最讨厌的话<br>还是要为以后工作着想<br>挑个热门的专业<br>活着比热爱重要<br>你们从交流变成了争吵<br>你发现，你老了<br>老到可能都打不过这个18岁的孩子<br>你说不过他，只能说一句：我是你爸爸！<br>孩子看着你，知道再怎么争辩都没用<br>这场确立你最后威严的酒局不欢而散<br>你听的不真切<br>在孩子回自己屋的路上好像叨叨了一句<br>“我不想活的像你一样”<br>怎么就哭了呢？50岁的人了<br>一定是酒太辣了，对不对<br>一定是酒太辣了</p><p>55岁，孩子工作了，似乎有一点理解你了<br>但你却反了过来，你说不要妥协</p><p>56岁，孩子也结婚了<br>你问他喜欢那个姑娘么<br>他愣了愣说：喜欢吧</p><p>60岁，辛苦了一辈子，想出去走走<br>身边的那个人过了30年<br>你依旧分不清到底喜不喜欢<br>你们开始规划旅游路线<br>这么多年了<br>你们还是存在分歧，还是在争吵<br>某个瞬间，你觉得<br>这样可能也挺好<br>一切都准备好了<br>儿子说：爸妈，我工作太忙了<br>可以帮我照顾一下孩子么<br>你们退了机票，又回到了30年前</p><p>70岁，孩子的孩子也长大了，不用天天操心了<br>你下定决心说：一定要去玩一趟<br>可是手边的拐杖<br>只能支持你走到楼下的花园<br>75岁，你在医院的病床上<br>身边聚满了人，你迷迷糊糊的看见医生摇了摇头<br>周围那些人神情肃穆<br>你明白了，你要死掉了<br>你没有感到一丝害怕<br>你突然问自己，我到底是什么时候死掉的呢？<br>你想起来30岁的那场婚礼<br>原来，那时候，你就死掉了吧<br>依照惯例<br>死前的3秒，你的大脑要走马灯<br>倒叙你这75个年头的一生<br>画面一张一张的过<br>1秒<br>2秒<br>两秒过去了<br>你面无表情的看着这两秒内的回忆<br>第3秒<br>突然你笑了<br>原来已经回到了15岁的那一年<br>你看见一个男孩<br>他叼着一袋牛奶，背着书包<br>从另一个女孩家的阳台下跑过<br>那个男孩朝窗户里看了看<br>那是15岁的你暗恋的那个女孩子<br>你想不起来她长什么样子了<br>最后一秒你努力的回忆着<br>然后终于笑了出来<br>3秒过去了<br>身边的人突然间开始嚎啕大哭<br>你可能听不清了<br>你最后听到的嘈杂的声音<br>是一群十五六的少年 起着哄说的<br>答应他<br>答应他<br>答应他</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法-算法练习</title>
    <link href="/79edd52b58c3.html"/>
    <url>/79edd52b58c3.html</url>
    
    <content type="html"><![CDATA[<h2 id="心里的准备"><a href="#心里的准备" class="headerlink" title="心里的准备"></a>心里的准备</h2><p><img src="/79edd52b58c3/1.png"></p><h2 id="算法练习的网站"><a href="#算法练习的网站" class="headerlink" title="算法练习的网站"></a>算法练习的网站</h2><p><a href="https://leetcode.com/problemset/all/">https://leetcode.com/problemset/all/</a><br>或者<br><a href="https://leetcode-cn.com/problemset/all/">https://leetcode-cn.com/problemset/all/</a><br><img src="/79edd52b58c3/2.png"></p><ul><li>做题的时候用上切题四件套</li></ul><p><img src="/79edd52b58c3/3.png"></p><h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p><img src="/79edd52b58c3/4.png"></p><h2 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h2><p><img src="/79edd52b58c3/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法-复杂度</title>
    <link href="/e72787e674a1.html"/>
    <url>/e72787e674a1.html</url>
    
    <content type="html"><![CDATA[<h2 id="课程的进度"><a href="#课程的进度" class="headerlink" title="课程的进度"></a>课程的进度</h2><p><img src="/e72787e674a1/1.png"></p><h2 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h2><ul><li>时间复杂度</li><li>空间复杂度</li></ul><p><img src="/e72787e674a1/2.png"></p><h2 id="常用复杂度"><a href="#常用复杂度" class="headerlink" title="常用复杂度"></a>常用复杂度</h2><p>多块代码复杂度只看最高复杂度</p><p><img src="/e72787e674a1/3.png"></p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><h3 id="常数统一为O-1"><a href="#常数统一为O-1" class="headerlink" title="常数统一为O(1)"></a>常数统一为O(1)</h3><p><img src="/e72787e674a1/4.png"><br><img src="/e72787e674a1/5.png"><br><img src="/e72787e674a1/6.png"><br><img src="/e72787e674a1/7.png"></p><h3 id="算法的使用对比"><a href="#算法的使用对比" class="headerlink" title="算法的使用对比"></a>算法的使用对比</h3><p><img src="/e72787e674a1/8.png"></p><h3 id="递归的复杂度计算"><a href="#递归的复杂度计算" class="headerlink" title="递归的复杂度计算"></a>递归的复杂度计算</h3><p>斐波拉契数列</p><p><img src="/e72787e674a1/9.png"></p><p>每次计算都要重新计算一便前面的数据，复杂度应该为O(2^N)</p><p><img src="/e72787e674a1/10.png"></p><h4 id="常见递归及递归复杂度计算网站"><a href="#常见递归及递归复杂度计算网站" class="headerlink" title="常见递归及递归复杂度计算网站"></a>常见递归及递归复杂度计算网站</h4><p><img src="/e72787e674a1/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法-学习方式</title>
    <link href="/aee8b86da60e.html"/>
    <url>/aee8b86da60e.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>明确！目标！</p></blockquote><p>学习最重要的是方式，更重要也是坚持</p><p><img src="/aee8b86da60e/1.png"></p><h2 id="Chunk-it-up-切碎知识点"><a href="#Chunk-it-up-切碎知识点" class="headerlink" title="Chunk it up(切碎知识点)"></a>Chunk it up(切碎知识点)</h2><p><img src="/aee8b86da60e/2.png"><br><img src="/aee8b86da60e/3.png"><br><img src="/aee8b86da60e/6.png"></p><h2 id="Deliberate-practicing-刻意练习"><a href="#Deliberate-practicing-刻意练习" class="headerlink" title="Deliberate practicing(刻意练习)"></a>Deliberate practicing(刻意练习)</h2><p><img src="/aee8b86da60e/4.png"></p><h2 id="Feedback-反馈"><a href="#Feedback-反馈" class="headerlink" title="Feedback(反馈)"></a>Feedback(反馈)</h2><p><img src="/aee8b86da60e/5.png"></p><h2 id="算法的解析"><a href="#算法的解析" class="headerlink" title="算法的解析"></a>算法的解析</h2><p><img src="/aee8b86da60e/7.png"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot打war包</title>
    <link href="/18e2d5e4b6f3.html"/>
    <url>/18e2d5e4b6f3.html</url>
    
    <content type="html"><![CDATA[<ol><li><p>更改pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>添加spring-boot-starter-tomcat的provided依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>添加maven-war-plugin插件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$(project.artifactld)<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">failOnMissingWebXml</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">failOnMissingWebXml</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>修改启动类</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala">@ <span class="hljs-type">SpringBootApplication</span> <br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletlnitializer</span> </span>&#123;<br>public static void main(<span class="hljs-type">String</span>[] args)&#123;<br><span class="hljs-type">SpringApplication</span>.run(<span class="hljs-type">MainApplication</span>.<span class="hljs-keyword">class</span>,args);<br>&#125;<br><br><span class="hljs-meta">@Override</span> <br><span class="hljs-keyword">protected</span> <span class="hljs-type">SpringApplicationBuilder</span> configure(<span class="hljs-type">SpringApplicationBuilder</span> builder)&#123;<br><span class="hljs-keyword">return</span> builder.sources(<span class="hljs-type">MainApplication</span>.<span class="hljs-keyword">class</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>目录下<br><code>mvn clean package</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JMeter</title>
    <link href="/e1ce4e19566f.html"/>
    <url>/e1ce4e19566f.html</url>
    
    <content type="html"><![CDATA[<h1 id="JMeter入门"><a href="#JMeter入门" class="headerlink" title="JMeter入门"></a>JMeter入门</h1><p>官方网站：<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a><br>软件下载：<a href="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi</a><br>用户手册：<a href="https://jmeter.apache.org/usermanual/index.html">https://jmeter.apache.org/usermanual/index.html</a></p><p>下载后解压，找到目录 bin 下的 jmeter.bat 文件，双击启动<br><img src="/e1ce4e19566f/1.png"><br><img src="/e1ce4e19566f/2.png"></p><h2 id="设置中文界面"><a href="#设置中文界面" class="headerlink" title="设置中文界面"></a>设置中文界面</h2><p><img src="/e1ce4e19566f/3.png"></p><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><ol><li>设置线程组<br><img src="/e1ce4e19566f/4.png"></li></ol><ul><li>线程数为并发数</li><li>Ramp-Up时间（秒）为启动全部线程的时间</li></ul><ol start="2"><li>添加HTTP请求默认值</li></ol><p><img src="/e1ce4e19566f/5.png"><br><img src="/e1ce4e19566f/6.png"></p><ul><li>只需要配置web服务器，就不用每次都配置请求（端口不填默认80）</li></ul><ol start="3"><li>添加取样器</li></ol><p><img src="/e1ce4e19566f/7.png"><br><img src="/e1ce4e19566f/8.png"></p><ul><li>这里就不用添加web服务器了</li></ul><ol start="4"><li>添加监听器</li></ol><p><img src="/e1ce4e19566f/9.png"></p><p>因为查看的结果的不同，添加你觉得适合的监听器</p><p><img src="/e1ce4e19566f/10.png"></p><p>我添加的了一个聚合报告，在点击运行的时候回弹出一个对话框，问是否保存测试计划，根据你自己的需求决定</p><h2 id="设置不同的参数"><a href="#设置不同的参数" class="headerlink" title="设置不同的参数"></a>设置不同的参数</h2><ol><li>先添加HTTP请求默认值</li></ol><p><img src="/e1ce4e19566f/11.png"></p><ol start="2"><li>添加Http请求</li></ol><p><img src="/e1ce4e19566f/12.png"></p><ol start="3"><li>准备样本文件</li></ol><p><img src="/e1ce4e19566f/13.png"></p><ol start="4"><li>添加CSV数据文件</li></ol><p><img src="/e1ce4e19566f/14.png"></p><ul><li>选中你的样本文件</li><li>可以添加多个数据，分隔符可以自己定义，推荐‘,’</li><li>设置对应每行的变量名，也要用分隔符分隔</li></ul><p><img src="/e1ce4e19566f/15.png"></p><ol start="5"><li>添加变量</li></ol><p>${定义的变量名}<br><img src="/e1ce4e19566f/16.png"></p><ol start="6"><li>添加监听器</li></ol><p>我选择了查看结果树</p><p>这样就能看到每次请求的链接</p><p><img src="/e1ce4e19566f/17.png"></p><h2 id="Redis压测"><a href="#Redis压测" class="headerlink" title="Redis压测"></a>Redis压测</h2><ol><li>100个并发连接，100000个请求<br><code>redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000</code></li><li>存取大小为100字节的数据包<br><code>redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100</code></li><li>只测试某些操作的性能<br><code>redis-benchmark -t set,lpush -q -n 100000</code></li><li>只测试某些数值存取的性能<br><code>redis-benchmark -n 100000 -q script load &quot;redis.call(set&#39;,&#39;foo&#39;,&#39;bar)&quot;</code></li></ol><h2 id="JMeter命令行"><a href="#JMeter命令行" class="headerlink" title="JMeter命令行"></a>JMeter命令行</h2><ol><li>在windows上录好jmx</li><li>命令行：<code>sh jmeter.sh -n -t XXX.jmx -l result.jtl</code></li><li>把result.jtl导入到jmeter</li></ol>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>JMeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis安装在Liunx</title>
    <link href="/6b7289fc875f.html"/>
    <url>/6b7289fc875f.html</url>
    
    <content type="html"><![CDATA[<p>下载包<br><a href="https://redis.io/">https://redis.io/</a><br>如包名为redis-5.0.4.tar.gz</p><p>上传至服务器：如/tmp<br>移动到目录下<br><code>cd /tmp</code></p><ol><li>解压<br><code>tar -zvxf redis-5.0.4.tar.gz</code></li><li>移动到/usr/local并重名名为redis<br><code>mv redis-5.0.4 /usr/local/redis</code></li><li>切换目录<br><code>cd /usr/local/reids/</code></li><li>编译<br><code>make</code></li><li>添加启动目录<br><code>make install</code></li><li>测试访问<br><code>redis-s &gt; tab &gt;显示 redis-server 即可</code></li><li>打开配置文件<br><code>vi redis.conf</code></li><li>更改<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment">#服务器访问</span><br><span class="hljs-attribute">bind</span> <span class="hljs-number">127.0.0.1</span> &gt; <span class="hljs-number">0.0.0.0</span> <br><span class="hljs-comment">#后台执行</span><br>daemonize <span class="hljs-literal">no</span> &gt; <span class="hljs-literal">yes</span><br><span class="hljs-comment">#访问密码</span><br>requirepass &gt; <span class="hljs-number">1234567</span><br></code></pre></div></td></tr></table></figure>完成后<br><code>:wq</code></li><li>启动服务<br><code>redis-server ./redis.conf</code><br>进程查看<code>ps -ef | grep redis</code></li><li>访问服务<br><code>redis-cli</code></li><li>退出<br><code>exit</code></li><li>关闭<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">redis-cli<br>shutdown save<br><span class="hljs-keyword">exit</span><br></code></pre></div></td></tr></table></figure></li><li>配置成服务<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">./install_server.<span class="hljs-keyword">sh</span> <br>1.端口<br>2.配置文件<br>3.<span class="hljs-keyword">log</span>文件<br>4.数据目录<br>5.可执行文件<br></code></pre></div></td></tr></table></figure>检测<br><code>chkconfig --list | grep redis</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取Ip</title>
    <link href="/c748da646b0b.html"/>
    <url>/c748da646b0b.html</url>
    
    <content type="html"><![CDATA[<p>util</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IpUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> final <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> ERROR_IP = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> final <span class="hljs-keyword">static</span> Pattern pattern = Pattern.<br>            compile(<span class="hljs-string">&quot;(2[5][0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)&quot;</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取外网IP</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-variable">request</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getRemoteIp</span>(<span class="hljs-params">HttpServletRequest request</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> ip = request.getHeader(<span class="hljs-string">&quot;x-real-ip&quot;</span>);<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span>) &#123;<br>            ip = request.getRemoteAddr();<br>        &#125;<br><br>        <span class="hljs-comment">//过滤反向代理的ip</span><br>        <span class="hljs-built_in">String</span>[] stemps = ip.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">if</span> (stemps != <span class="hljs-literal">null</span> &amp;&amp; stemps.length &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//得到第一个IP，即客户端真实IP</span><br>            ip = stemps[<span class="hljs-number">0</span>];<br>        &#125;<br><br>        ip = ip.trim();<br>        <span class="hljs-keyword">if</span> (ip.length() &gt; <span class="hljs-number">23</span>) &#123;<br>            ip = ip.substring(<span class="hljs-number">0</span>, <span class="hljs-number">23</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ip;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取用户的真实ip</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-variable">request</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getUserIP</span>(<span class="hljs-params">HttpServletRequest request</span>)</span> &#123;<br><br>        <span class="hljs-comment">// 优先取X-Real-IP</span><br>        <span class="hljs-built_in">String</span> ip = request.getHeader(<span class="hljs-string">&quot;X-Real-IP&quot;</span>);<br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getHeader(<span class="hljs-string">&quot;x-forwarded-for&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ip == <span class="hljs-literal">null</span> || ip.length() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = request.getRemoteAddr();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip)) &#123;<br>                ip = ERROR_IP;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;<br>            ip = ERROR_IP;<br>            <span class="hljs-keyword">return</span> ip;<br>        &#125;<br><br>        int pos = ip.indexOf(<span class="hljs-string">&#x27;,&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (pos &gt;= <span class="hljs-number">0</span>) &#123;<br>            ip = ip.substring(<span class="hljs-number">0</span>, pos);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getLastIpSegment</span>(<span class="hljs-params">HttpServletRequest request</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> ip = getUserIP(request);<br>        <span class="hljs-keyword">if</span> (ip != <span class="hljs-literal">null</span>) &#123;<br>            ip = ip.substring(ip.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ip = <span class="hljs-string">&quot;0&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isValidIP</span>(<span class="hljs-params">HttpServletRequest request</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> ip = getUserIP(request);<br>        <span class="hljs-keyword">return</span> isValidIP(ip);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断我们获取的ip是否是一个符合规则ip</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-variable">ip</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">isValidIP</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> ip</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip)) &#123;<br>            log.debug(<span class="hljs-string">&quot;ip is null. valid result is false&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        Matcher matcher = pattern.matcher(ip);<br>        <span class="hljs-built_in">boolean</span> isValid = matcher.matches();<br>        log.debug(<span class="hljs-string">&quot;valid ip:&quot;</span> + ip + <span class="hljs-string">&quot; result is: &quot;</span> + isValid);<br>        <span class="hljs-keyword">return</span> isValid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getLastServerIpSegment</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> ip = getServerIP();<br>        <span class="hljs-keyword">if</span> (ip != <span class="hljs-literal">null</span>) &#123;<br>            ip = ip.substring(ip.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ip = <span class="hljs-string">&quot;0&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ip;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getServerIP</span>(<span class="hljs-params"></span>)</span> &#123;<br>        InetAddress inet;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inet = InetAddress.getLocalHost();<br>            <span class="hljs-built_in">String</span> hostAddress = inet.getHostAddress();<br>            <span class="hljs-keyword">return</span> hostAddress;<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mail配置</title>
    <link href="/641601337f0b.html"/>
    <url>/641601337f0b.html</url>
    
    <content type="html"><![CDATA[<p>util</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> cn.zuohy.beans.Mail;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.mail.EmailException;<br><span class="hljs-keyword">import</span> org.apache.commons.mail.HtmlEmail;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">send</span>(<span class="hljs-params">Mail mail</span>)</span> &#123;<br><br>        <span class="hljs-comment">// TODO</span><br>        <span class="hljs-built_in">String</span> <span class="hljs-keyword">from</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        int port = <span class="hljs-number">25</span>;<br>        <span class="hljs-built_in">String</span> host = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-built_in">String</span> pass = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-built_in">String</span> nickname = <span class="hljs-string">&quot;&quot;</span>;<br><br>        HtmlEmail email = <span class="hljs-keyword">new</span> HtmlEmail();<br>        <span class="hljs-keyword">try</span> &#123;<br>            email.setHostName(host);<br>            email.setCharset(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">String</span> str : mail.getReceivers()) &#123;<br>                email.addTo(str);<br>            &#125;<br>            email.setFrom(<span class="hljs-keyword">from</span>, nickname);<br>            email.setSmtpPort(port);<br>            email.setAuthentication(<span class="hljs-keyword">from</span>, pass);<br>            email.setSubject(mail.getSubject());<br>            email.setMsg(mail.getMessage());<br>            email.send();<br>            log.info(<span class="hljs-string">&quot;&#123;&#125; 发送邮件到 &#123;&#125;&quot;</span>, <span class="hljs-keyword">from</span>, StringUtils.join(mail.getReceivers(), <span class="hljs-string">&quot;,&quot;</span>));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (EmailException e) &#123;<br>            log.error(<span class="hljs-keyword">from</span> + <span class="hljs-string">&quot;发送邮件到&quot;</span> + StringUtils.join(mail.getReceivers(), <span class="hljs-string">&quot;,&quot;</span>) + <span class="hljs-string">&quot;失败&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description: 邮件</span><br><span class="hljs-comment"> * User: dummmmmmmy</span><br><span class="hljs-comment"> * Date: 2018-12-06</span><br><span class="hljs-comment"> * Time: 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mail</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> subject;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> message;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; receivers;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD5加密</title>
    <link href="/2605a2a5060e.html"/>
    <url>/2605a2a5060e.html</url>
    
    <content type="html"><![CDATA[<p>util</p><span id="more"></span><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><br>@Slf4j<br><span class="hljs-keyword">public</span> class MD5Util &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> encrypt(<span class="hljs-keyword">String</span> s) &#123;<br>        <span class="hljs-built_in">char</span> hexDigits[] = &#123; <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span> &#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">byte</span>[] btInput = s.getBytes();<br>            <span class="hljs-comment">// 获得MD5摘要算法的 MessageDigest 对象</span><br>            MessageDigest mdInst = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>            <span class="hljs-comment">// 使用指定的字节更新摘要</span><br>            mdInst.update(btInput);<br>            <span class="hljs-comment">// 获得密文</span><br>            <span class="hljs-built_in">byte</span>[] md = mdInst.digest();<br>            <span class="hljs-comment">// 把密文转换成十六进制的字符串形式</span><br>            <span class="hljs-built_in">int</span> j = md.length;<br>            <span class="hljs-built_in">char</span> <span class="hljs-built_in">str</span>[] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[j * <span class="hljs-number">2</span>];<br>            <span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; j; i++) &#123;<br>                <span class="hljs-built_in">byte</span> byte0 = md[i];<br>                <span class="hljs-built_in">str</span>[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xf</span>];<br>                <span class="hljs-built_in">str</span>[k++] = hexDigits[byte0 &amp; <span class="hljs-number">0xf</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-built_in">str</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-built_in">log</span>.error(<span class="hljs-string">&quot;generate md5 error, &#123;&#125;&quot;</span>, s, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax(原生,JQ)</title>
    <link href="/102164869c4c.html"/>
    <url>/102164869c4c.html</url>
    
    <content type="html"><![CDATA[<h1 id="XMLHttpRequest发送请求"><a href="#XMLHttpRequest发送请求" class="headerlink" title="XMLHttpRequest发送请求"></a>XMLHttpRequest发送请求</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">//1.获取a节点，并为其添加onclick响应函数</span><br><span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;a&quot;</span>)[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">//3.创建一个XMLHttpRequest对象  </span><br><span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-comment">//4.准备发送请求的数据：url</span><br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">this</span>.href + <span class="hljs-string">&quot;?time=&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-keyword">var</span> method = <span class="hljs-string">&quot;GET&quot;</span>;<br><span class="hljs-comment">//5.调用XMLHttpRequest对象的open方法</span><br>request.open(method, url);<br><span class="hljs-comment">//6.调用XMLHttpRequest对象的send方法</span><br>request.send(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//7.为XMLHttpRequest对象添加onreadystatechange响应函数</span><br>request.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">//8.判断响应是否完成：XMLHttpRequest对象的readyState属性值为4的时候</span><br><span class="hljs-keyword">if</span>(request.readyState == <span class="hljs-number">4</span>) &#123;<br><span class="hljs-comment">//9.再判断响应是否可用：XMLHttpRequest对象status属性为200</span><br><span class="hljs-keyword">if</span>(request.status == <span class="hljs-number">200</span> || request.status == <span class="hljs-number">304</span>) &#123;<br><span class="hljs-comment">//10.打印响应结果responseText</span><br><span class="hljs-built_in">console</span>.log(request.responseText);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//2.取消a节点的默认行为</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Jquery中的Ajax"><a href="#Jquery中的Ajax" class="headerlink" title="Jquery中的Ajax"></a>Jquery中的Ajax</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>$(<span class="hljs-string">&quot;a&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-comment">//url</span><br><span class="hljs-comment">//args :JSON格式</span><br><span class="hljs-comment">//function :回调函数：当响应结束时，回调函数被触发。响应结果在data中</span><br><span class="hljs-comment">//使用load方法处理Ajax</span><br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">this</span>.href;<br><span class="hljs-keyword">var</span> args = &#123;<br><span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>&#125;;<br><span class="hljs-comment">//结果是直接插入HTML节点中</span><br>$(<span class="hljs-string">&quot;#con&quot;</span>).load(url, args);<br><br><span class="hljs-comment">//使用load方法处理Ajax,加上选择器</span><br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">this</span>.href + <span class="hljs-string">&quot;h2 a&quot;</span>;<br><span class="hljs-keyword">var</span> args = &#123;<br><span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>&#125;;<br>$(<span class="hljs-string">&quot;#con&quot;</span>).load(url, args);<br><br><span class="hljs-comment">//GET请求,返回结果在返回结果里面需要自己指定</span><br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">this</span>.href;<br><span class="hljs-keyword">var</span> args = &#123;<br><span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>&#125;;<br>$.get(url, args,<br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<br>$(<span class="hljs-string">&quot;#con&quot;</span>).empty().append(data);<br>&#125;);<br><br><span class="hljs-comment">//POST请求,返回结果在返回结果里面需要自己指定</span><br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">this</span>.href;<br><span class="hljs-keyword">var</span> args = &#123;<br><span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>&#125;;<br>$.post(url, args,<br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<br>$(<span class="hljs-string">&quot;#con&quot;</span>).empty().append(data);<br>&#125;);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h1 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jsonObject = &#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;guigui&quot;</span>,<br><span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">12</span>,<br><span class="hljs-string">&quot;address&quot;</span>: &#123;<br><span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;sc&quot;</span>,<br><span class="hljs-string">&quot;school&quot;</span>: <span class="hljs-string">&quot;sc&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;teaching&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>alert(<span class="hljs-string">&quot;Java&quot;</span>);<br>&#125;<br>&#125;<br>alert(jsonObject.name);<br>alert(jsonObject.address.city);<br><br>jsonObject.teaching();<br><span class="hljs-comment">//把字符串转为json</span><br><span class="hljs-keyword">var</span> jsonStr = <span class="hljs-string">&quot;&#123;&#x27;name&#x27;:&#x27;guigui&#x27;&#125;&quot;</span>;<br>jsonStr = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;(&quot;</span> + jsonStr + <span class="hljs-string">&quot;)&quot;</span>);<br>alert(jsonStr.name);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Html</tag>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA自定义后的快捷键-仿Eclipse</title>
    <link href="/d2d51dce913f.html"/>
    <url>/d2d51dce913f.html</url>
    
    <content type="html"><![CDATA[<ol><li>执行(run) alt+r</li><li>提示补全 (Class Name Completion) alt+/</li><li>单行注释 ctrl + /</li><li>多行注释 ctrl + shift + /</li><li>向下复制一行 (Duplicate Lines) ctrl+alt+down</li><li>删除一行或选中行 (delete line) ctrl+d</li><li>向下移动行(move statement down) alt+down</li><li>向上移动行(move statement up) alt+up</li><li>向下开始新的一行(start new line) shift+enter</li><li>向上开始新的一行 (Start New Line before current) ctrl+shift+enter</li><li>如何查看源码 (class) ctrl + 选中指定的结构 或 ctrl + shift + t</li><li>万能解错/生成返回值变量 alt + enter</li><li>退回到前一个编辑的页面 (back) alt + left</li><li>进入到下一个编辑的页面(针对于上条) (forward) alt + right</li><li>查看继承关系(type hierarchy) F4</li><li>格式化代码(reformat code) ctrl+shift+F</li><li>提示方法参数类型(Parameter Info) ctrl+alt+/</li><li>复制代码 ctrl + c</li><li>撤销 ctrl + z</li><li>反撤销 ctrl + y</li><li>剪切 ctrl + x</li><li>粘贴 ctrl + v</li><li>保存 ctrl + s</li><li>全选 ctrl + a</li><li>选中数行，整体往后移动 tab</li><li>选中数行，整体往前移动 shift + tab</li><li>查看类的结构：类似于 eclipse 的 outline ctrl+o</li><li>重构：修改变量名与方法名(rename) alt+shift+r</li><li>大写转小写/小写转大写(toggle case) ctrl+shift+y</li><li>生成构造器/get/set/toString alt +shift + s</li><li>查看文档说明(quick documentation) F2</li><li>收起所有的方法(collapse all) alt + shift + c</li><li>打开所有方法(expand all) alt+shift+x</li><li>打开代码所在硬盘文件夹(show in explorer) ctrl+shift+x</li><li>生成 try-catch 等(surround with) alt+shift+z</li><li>局部变量抽取为成员变量(introduce field) alt+shift+f</li><li>查找/替换(当前) ctrl+f</li><li>查找(全局) ctrl+h</li><li>查找文件 double Shift</li><li>查看类的继承结构图(Show UML Diagram) ctrl + shift + u</li><li>查看方法的多层重写结构(method hierarchy) ctrl+alt+h</li><li>添加到收藏(add to favorites) ctrl+alt+f</li><li>抽取方法(Extract Method) alt+shift+m</li><li>打开最近修改的文件(Recently Files) ctrl+E</li><li>关闭当前打开的代码栏(close) ctrl + w</li><li>关闭打开的所有代码栏(close all) ctrl + shift + w</li><li>快速搜索类中的错误(next highlighted error) ctrl + shift + q</li><li>选择要粘贴的内容(Show in Explorer) ctrl+shift+v 49 查找方法在哪里被调用(Call Hierarchy) ctrl+shift+h</li></ol><p><a href="IDEA2-20190406/%E5%BF%AB%E6%8D%B7%E9%94%AE.rar">快捷键包</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IntelliJ IDEA</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA常用模板</title>
    <link href="/3494683249bc.html"/>
    <url>/3494683249bc.html</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">public</span> class Test &#123;<br>    <span class="hljs-comment">//常用模板</span><br>    <span class="hljs-comment">//psvm</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">//sout</span><br>        System.out.<span class="hljs-built_in">println</span>();<br><span class="hljs-comment">//变种 soutp/soutm/soutv/xxx.sout</span><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;args = [&quot;</span> + args + <span class="hljs-string">&quot;]&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Test.main&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;args = &quot;</span> + args);<br>        <span class="hljs-built_in">int</span> num = <span class="hljs-number">0</span>;<br>        System.out.<span class="hljs-built_in">println</span>(num);<br><span class="hljs-comment">//fori</span><br>        <span class="hljs-built_in">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(arr[i]);<br>        &#125;<br>        <span class="hljs-comment">//变种 iter/itar</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i : arr) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-built_in">int</span> i1 = arr[i];<br>            System.out.<span class="hljs-built_in">println</span>(i1);<br>        &#125;<br><span class="hljs-comment">//list.for</span><br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>);<br>        list.<span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>);<br>        list.<span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">Object</span> o : list) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(o);<br>        &#125;<br>        <span class="hljs-comment">//变种 list.fori/list.forr</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-built_in">size</span>(); i++) &#123;<br>&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = list.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>&#125;<br><span class="hljs-comment">//ifn</span><br>        ArrayList list2 = <span class="hljs-keyword">new</span> ArrayList();<br>        list2.<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>);<br>        list2.<span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>);<br>        list2.<span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">if</span> (list2 == <span class="hljs-keyword">null</span>) &#123;<br>&#125;<br>        <span class="hljs-comment">//变种 inn/xxx.nn/xxx.null</span><br>        <span class="hljs-keyword">if</span> (list2 != <span class="hljs-keyword">null</span>) &#123;<br>&#125;<br>        <span class="hljs-keyword">if</span> (list2 != <span class="hljs-keyword">null</span>) &#123;<br>&#125;<br>        <span class="hljs-keyword">if</span> (list2 == <span class="hljs-keyword">null</span>) &#123;<br>&#125;<br>    &#125;<br><span class="hljs-comment">//prsf</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//psf</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> num2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//psgi</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//psgs</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> s = <span class="hljs-string">&quot;0&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IntelliJ IDEA</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Solr</title>
    <link href="/cf7513efc8a3.html"/>
    <url>/cf7513efc8a3.html</url>
    
    <content type="html"><![CDATA[<h1 id="索引搜索"><a href="#索引搜索" class="headerlink" title="索引搜索"></a>索引搜索</h1><ul><li>环境配置<ul><li>下载解压</li><li>solr.bat<figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">@echo off<br>e:<br>cd E:<span class="hljs-symbol">\M</span>ySVN<span class="hljs-symbol">\r</span>epository<span class="hljs-symbol">\s</span>olr-7.5.0<span class="hljs-symbol">\b</span>in<br>solr start -p 8989<br></code></pre></div></td></tr></table></figure></li><li>运行<br><code>http://localhost:8989/solr/#/~cores </code></li><li>创建core（报错）</li><li>solr-7.5.0\server\solr\configsets_default目录下，把conf文件夹复制到solr-7.5.0\server\solr\new_core 目录下，然后再执行Add core</li></ul></li><li>数据库配置<ul><li>Jar包<br>JDBC驱动<br><img src="/cf7513efc8a3/1.png"></li><li>放入server\solr-webapp\webapp\WEB-INF\lib</li><li>\example\example-DIH\solr\db\conf覆盖\server\solr\test_core\conf</li><li>修改db-data-config.xml<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&lt;dataConfig&gt;<br>&lt;dataSource driver=&quot;com.mysql.cj.jdbc.Driver&quot; url=&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;amp;characterEncoding=utf-8&quot; <span class="hljs-keyword">user</span>=&quot;root&quot; <span class="hljs-keyword">password</span>=&quot;123456&quot;/&gt;<br>&lt;document&gt;<br>    &lt;entity <span class="hljs-type">name</span>=&quot;user&quot; query=&quot;select * from user&quot; pk=&quot;user_id&quot;&gt;<br>            &lt;field column=&quot;user_id&quot; <span class="hljs-type">name</span>=&quot;userId&quot; /&gt;<br>&lt;field column=&quot;user_name&quot; <span class="hljs-type">name</span>=&quot;userName&quot; /&gt;<br>&lt;field column=&quot;user_pass&quot; <span class="hljs-type">name</span>=&quot;userPass&quot; /&gt;<br>&lt;field column=&quot;user_time&quot; <span class="hljs-type">name</span>=&quot;userTime&quot; /&gt;<br>    &lt;/entity&gt;<br>&lt;/document&gt;<br>&lt;/dataConfig&gt;<br>配置说明：<br>dataSource<span class="hljs-comment">--&gt;数据库连接，用户名密码配置</span><br>entity<span class="hljs-comment">--&gt;sql定义</span><br>field<span class="hljs-comment">--&gt;字段定义，column对应数据库字段，name对应solr的索引字段名</span><br></code></pre></div></td></tr></table></figure></li><li>修改managed-schema<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;field <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attribute">indexed</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">stored</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">required</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">multiValued</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt; <br>&lt;field <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text_general&quot;</span> <span class="hljs-attribute">indexed</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">stored</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>&lt;field <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;userPass&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text_general&quot;</span> <span class="hljs-attribute">indexed</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">stored</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>&lt;field <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;userTime&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;pdate&quot;</span> <span class="hljs-attribute">indexed</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attribute">stored</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><p>注意：我们copy来的配置文件中有一些关键字已经配置了，如id，name，那就不需要重新配置field，只需要配置没有的。</p><p>如果你的表主键id不是叫id，那么你定义的field需要指定required=”true”,并把默认的id的required=”true”属性去掉，并把<uniqueKey>id</uniqueKey>修改成你的主键id值，否则数据导入不进去。</p><p>说明：因为只是做个基础的搜索业务，没有精细该schema文件，精益求精的小伙伴可以把冗余字段都干掉试试。</p><p>到此，配置完成，接下来我们操作导入数据</p><h2 id="清空数据"><a href="#清空数据" class="headerlink" title="清空数据"></a>清空数据</h2><p><img src="/cf7513efc8a3/2.png"></p><p><code>&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;&lt;commit/&gt;</code></p><h1 id="增量更新索引"><a href="#增量更新索引" class="headerlink" title="增量更新索引"></a>增量更新索引</h1><ul><li>准备jar包</li></ul><p><a href="solr-20190406/apache-solr-dataimportscheduler-1.4.jar">下载</a><br>放入\server\solr-webapp\webapp\WEB-INF</p><ul><li>添加监听</li></ul><p>打开web.xml</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">&lt;listener&gt;<br> &lt;listener-class&gt; org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.solr</span><span class="hljs-selector-class">.handler</span><span class="hljs-selector-class">.dataimport</span><span class="hljs-selector-class">.scheduler</span><span class="hljs-selector-class">.ApplicationListener</span><br> &lt;/listener-class&gt;<br>&lt;/listener&gt;<br></code></pre></div></td></tr></table></figure><ul><li>增加dataimport.properties配置</li></ul><p>增加增量导入配置文件<br>重点是目录<br>是在\server\solr目录下创建conf文件再在下面创建dataimport.properties文件</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta">#################################################</span><br><span class="hljs-meta">#                                               #</span><br><span class="hljs-meta">#       dataimport scheduler properties         #</span><br><span class="hljs-meta">#                                               #</span><br><span class="hljs-meta">#################################################</span><br><br><span class="hljs-meta">#  to sync or not to sync</span><br><span class="hljs-meta">#  1 - active; anything else - inactive</span><br>syncEnabled=<span class="hljs-number">1</span><br><br><span class="hljs-meta">#  which cores to schedule</span><br><span class="hljs-meta">#  in a multi-core environment you can decide which cores you want syncronized</span><br><span class="hljs-meta">#  leave empty or comment it out if using single-core deployment</span><br><span class="hljs-meta">#  修改成你所使用的core</span><br>syncCores=my_core<br><br><span class="hljs-meta">#  solr server name or IP address</span><br><span class="hljs-meta">#  [defaults to localhost if empty]</span><br>server=localhost<br><br><span class="hljs-meta">#  solr server port</span><br><span class="hljs-meta">#  [defaults to 80 if empty]</span><br><span class="hljs-meta">#  安装solr的端口</span><br>port=<span class="hljs-number">8983</span><br><br><span class="hljs-meta">#  application name/context</span><br><span class="hljs-meta">#  [defaults to current ServletContextListener&#x27;s context (app) name]</span><br>webapp=solr<br><br><span class="hljs-meta">#  URL params [mandatory]</span><br><span class="hljs-meta">#  remainder of URL</span><br><span class="hljs-meta">#  这里改成下面的形式，solr同步数据时请求的链接</span><br>params=/dataimport?command=delta-import&amp;clean=<span class="hljs-literal">false</span>&amp;commit=<span class="hljs-literal">true</span><br><br><span class="hljs-meta">#  schedule interval</span><br><span class="hljs-meta">#  number of minutes between two runs</span><br><span class="hljs-meta">#  [defaults to 30 if empty]</span><br><span class="hljs-meta">#这里是设置定时任务的，单位是分钟，也就是多长时间你检测一次数据同步，根据项目需求修改</span><br><span class="hljs-meta">#  开始测试的时候为了方便看到效果，时间可以设置短一点</span><br>interval=<span class="hljs-number">1</span><br><br><span class="hljs-meta">#  重做索引的时间间隔，单位分钟，默认7200，即5天; </span><br><span class="hljs-meta">#  为空,为0,或者注释掉:表示永不重做索引</span><br>reBuildIndexInterval=<span class="hljs-number">7200</span><br><br><span class="hljs-meta">#  重做索引的参数</span><br>reBuildIndexParams=/select?qt=/dataimport&amp;command=full-import&amp;clean=<span class="hljs-literal">true</span>&amp;commit=<span class="hljs-literal">true</span><br><br><span class="hljs-meta">#  重做索引时间间隔的计时开始时间，第一次真正执行的时间=reBuildIndexBeginTime+reBuildIndexInterval*60*1000；</span><br><span class="hljs-meta">#  两种格式：2012-04-11 01:00:00 或者  01:00:00，后一种会自动补全日期部分为服务启动时的日期</span><br>reBuildIndexBeginTime=<span class="hljs-number">01</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br></code></pre></div></td></tr></table></figure><ul><li>修改db-data-config.xml</li></ul><p>需要在entity配置</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">deltaImportQuery=&quot;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id=<span class="hljs-string">&#x27;$&#123;dataimporter.delta.user_id&#125;&#x27;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">deltaQuery=&quot;</span><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-symbol">`user_time`</span> &gt; <span class="hljs-string">&#x27;$&#123;dataimporter.last_index_time&#125;&#x27;</span><span class="hljs-string">&quot;</span><br></code></pre></div></td></tr></table></figure><p>如叫studentId，那么，这个取变量就应该写成${dataimporter.delta.studentId}<br>${dataimporter.last_index_time}  固定写法，更新的判断条件，上一次的修改时间需要大于上一次索引的更新时间。<br>需要user_time字段</p><h1 id="分词技术"><a href="#分词技术" class="headerlink" title="分词技术"></a>分词技术</h1><ul><li>IK分词的jar包</li></ul><p><a href="solr-20190406/ikanalyzer-solr6.5.zip">下载</a></p><ul><li>把ik-analyzer-solr5-5.x.jar放入\server\solr-webapp\webapp\WEB-INF\lib</li><li>修改\server\solr\new_core\conf 目录下的managed-schema 文件<br>添加<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">fieldType</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;text_ik&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;solr.TextField&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">analyzer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">useSmart</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">analyzer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">useSmart</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldType</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 定义ik分词器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fieldType</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;text_ik&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;solr.TextField&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">analyzer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tokenizer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="hljs-attr">useSmart</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">analyzer</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">analyzer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;query&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tokenizer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="hljs-attr">useSmart</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">analyzer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldType</span>&gt;</span><br></code></pre></div></td></tr></table></figure>name=”text_ik”,分词器名称，在后面的filed定义的时候，可以直接引用。<br>如，type定义为”text_ik”，则代表该字段将进行分词索引<br><code>&lt;field name=&quot;userName&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</code></li></ul><h1 id="Java调用接口"><a href="#Java调用接口" class="headerlink" title="Java调用接口"></a>Java调用接口</h1><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.solr<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>solr-solrj<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">public void solrQuery() throws IOException, SolrServerException &#123;<br> String solrUrl = <span class="hljs-string">&quot;http://127.0.0.1:8983/solr/new_core&quot;</span>; <br>HttpSolrClient solrClient = new HttpSolrClient.Builder(solrUrl).build(); <span class="hljs-comment">// 创建搜索对象 </span><br>SolrQuery <span class="hljs-keyword">query</span> = new SolrQuery(); <span class="hljs-comment">// 设置搜索条件 </span><br><span class="hljs-keyword">query</span>.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;name:张三是好人&quot;</span>); <span class="hljs-comment">// 分页参数 </span><br><span class="hljs-keyword">query</span>.setStart(0); <span class="hljs-comment">// 设置每页显示多少条 </span><br><span class="hljs-keyword">query</span>.setRows(10); <span class="hljs-comment">//发起搜索请求 </span><br>QueryResponse response = solrClient.<span class="hljs-keyword">query</span>(<span class="hljs-keyword">query</span>); <span class="hljs-comment">// 查询结果 </span><br>SolrDocumentList docs = response.getResults(); <span class="hljs-comment">// 查询结果总数 </span><br>long <span class="hljs-keyword">count</span>= docs.getNumFound();<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;总条数为&quot;</span>+<span class="hljs-keyword">count</span>+<span class="hljs-string">&quot;条&quot;</span>); <br><span class="hljs-keyword">for</span> (SolrDocument doc : docs) &#123; <br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;id:&quot;</span>+ doc.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;id&quot;</span>) + <span class="hljs-string">&quot;,name:&quot;</span>+ doc.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;name&quot;</span>) + <span class="hljs-string">&quot;,uuid:&quot;</span>+ doc.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;uuid&quot;</span>));<br>&#125; <br>solrClient.<span class="hljs-keyword">close</span>(); <br>&#125;<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Solr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thread Local</title>
    <link href="/4264568384dd.html"/>
    <url>/4264568384dd.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>高并发处理 : 在当前进程取出对象，不会冲突<br>放入的东西<br>各个线程保存的东西是分开只与进程有关系<br>每个进程会处理自己的内容</p></blockquote><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>ThreadLocal的是一个本地线程副本变量工具类。</p><p>主要用于将私有线程和该线程存放的副本对象做一个映射，各个线程之间的变量互不干扰，在高并发场景下，可以实现无状态的调用，特别适用于各个线程依赖不通的变量值完成操作的场景。</p><span id="more"></span><p>原理大佬说的很清楚了》<a href="https://www.jianshu.com/p/98b68c97df9b">https://www.jianshu.com/p/98b68c97df9b</a></p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">示例：<br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">SysUser</span>&gt; userHolder</span> = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-title">ThreadLocal</span>&lt;<span class="hljs-title">HttpServletRequest</span>&gt; requestHolder</span> = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">SysUser sysUser</span>)</span>&#123;<br>       userHolder.<span class="hljs-keyword">set</span>(sysUser);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">HttpServletRequest request</span>)</span>&#123;<br>       requestHolder.<span class="hljs-keyword">set</span>(request);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SysUser <span class="hljs-title">getCurrentUser</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> userHolder.<span class="hljs-keyword">get</span>();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpServletRequest <span class="hljs-title">getCurrentRequest</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> requestHolder.<span class="hljs-keyword">get</span>();<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span>(<span class="hljs-params"></span>)</span>&#123;<br>       userHolder.<span class="hljs-keyword">remove</span>();<br>       requestHolder.<span class="hljs-keyword">remove</span>();<br>   &#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数组</title>
    <link href="/df5068bb57d2.html"/>
    <url>/df5068bb57d2.html</url>
    
    <content type="html"><![CDATA[<h1 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h1><span id="more"></span><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br> <span class="hljs-comment">// 这样拷贝数组没有隔离性</span><br> String<span class="hljs-literal">[]</span> ss1 = &#123; <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span> &#125;;<br> <span class="hljs-comment">// 把ss1对数组的引用传递给变量ss2,两个变量指向的是用一个数组</span><br> String<span class="hljs-literal">[]</span> ss2 = ss1;<br> ss2<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = <span class="hljs-string">&quot;4&quot;</span>;<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">ss1</span>)</span>);<br>&#125;<br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br><span class="hljs-comment">// 方法1</span><br><span class="hljs-comment">// 推荐</span><br>String<span class="hljs-literal">[]</span> ss1 = &#123; <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span> &#125;;<br><span class="hljs-comment">// 通过new关键字再内存中开辟一块空间，ss2指向的是新的数组对象</span><br>String<span class="hljs-literal">[]</span> ss2 = <span class="hljs-keyword">new</span> String<span class="hljs-literal">[<span class="hljs-identifier">ss1</span>.<span class="hljs-identifier">length</span>]</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ss2.length; i++) &#123;<br>ss2<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = ss1<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>&#125;<br>ss2<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = <span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">ss1</span>)</span>);<br>&#125;<br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br><span class="hljs-comment">// 方法2</span><br><span class="hljs-comment">// API提供的方式，底层用C++写的，所以速度很快，比for循环的效率高</span><br>String<span class="hljs-literal">[]</span> ss1 = &#123; <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span> &#125;;<br>String<span class="hljs-literal">[]</span> ss2 = <span class="hljs-keyword">new</span> String<span class="hljs-literal">[<span class="hljs-identifier">ss1</span>.<span class="hljs-identifier">length</span>]</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>arraycopy(ss1, <span class="hljs-number">0</span>, ss2, <span class="hljs-number">0</span>, ss1.length);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * (Object src,int srcPos,Object dest,int destPos,int length)</span><br><span class="hljs-comment"> * src:源数组,srcPos:源数组要复制的起始位置;dest:目的数组;destPos:目的数组放置的起始位置;length:复制的长度</span><br><span class="hljs-comment"> * 注意：src and dest都必须是同类型或者可以进行转换类型的数组．</span><br><span class="hljs-comment"> * 有趣的是这个函数可以实现自己到自己复制，比如：</span><br><span class="hljs-comment"> * int[] fun =&#123;0,1,2,3,4,5,6&#125;; </span><br><span class="hljs-comment"> * System.arraycopy(fun,0,fun,3,3);</span><br><span class="hljs-comment"> * 则结果为：&#123;0,1,2,0,1,2,6&#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">ss2</span>)</span>);<br>&#125;<br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br><span class="hljs-comment">//方法3</span><br>String<span class="hljs-literal">[]</span> ss1 = &#123; <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span> &#125;;<br>String<span class="hljs-literal">[]</span> ss2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">Of(<span class="hljs-params">ss1</span>, <span class="hljs-params">ss1</span>.<span class="hljs-params">length</span>)</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *该方法对应不同的数据类型都有各自的重载方法</span><br><span class="hljs-comment"> *original - 要复制的数组</span><br><span class="hljs-comment"> *newLength - 要返回的副本的长度</span><br><span class="hljs-comment"> *newType - 要返回的副本的类型</span><br><span class="hljs-comment"> *仔细观察发现，copyOf()内部调用了System.arraycopy()方法</span><br><span class="hljs-comment"> *区别在于：</span><br><span class="hljs-comment"> *arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置</span><br><span class="hljs-comment"> *copyOf()是系统自动在内部新建一个数组，调用arraycopy()将original内容复制到copy中去，并且长度为newLength。返回copy; 即将原数组拷贝到一个长度为newLength的新数组中，并返回该数组。</span><br><span class="hljs-comment"> *总结</span><br><span class="hljs-comment"> *Array.copyOf()可以看作是受限的System.arraycopy()，它主要是用来将原数组全部拷贝到一个新长度的数组，适用于数组扩容。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">ss2</span>)</span>);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h1><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>String<span class="hljs-literal">[]</span> ss1 = &#123; <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span> &#125;;<br>ss1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">Of(<span class="hljs-params">ss1</span>, <span class="hljs-params">ss1</span>.<span class="hljs-params">length</span> + 2)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ss1.length);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">ss1</span>)</span>);<br><span class="hljs-comment">// 5</span><br><span class="hljs-comment">// [1, 2, 3, null, null]</span><br>&#125;<br>常见面试题: 统计字符的位置<br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>String str = <span class="hljs-string">&quot;统计一个字符再字符串中的所有位置&quot;</span>;<br><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arry = count<span class="hljs-constructor">All(<span class="hljs-params">str</span>, &#x27;字&#x27;)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">arry</span>)</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> static <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> count<span class="hljs-constructor">All(String <span class="hljs-params">str</span>, <span class="hljs-params">char</span> <span class="hljs-params">ch</span>)</span> &#123;<br><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> <span class="hljs-built_in">array</span> = &#123;&#125;;<span class="hljs-comment">// 创建一个空数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; str.length<span class="hljs-literal">()</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (ch<span class="hljs-operator"> == </span>str.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>) &#123;<br><span class="hljs-comment">// charAt(i)遍历String每个字符</span><br><span class="hljs-built_in">array</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">Of(<span class="hljs-params">array</span>, <span class="hljs-params">array</span>.<span class="hljs-params">length</span> + 1)</span>;<br><span class="hljs-comment">// 扩容</span><br><span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">array</span>.<span class="hljs-identifier">length</span> - <span class="hljs-number">1</span>]</span> = i;<br><span class="hljs-comment">// 刚扩容的位置</span><br>&#125;<br>&#125;<br>return <span class="hljs-built_in">array</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-comment">//Java提供排序方法</span><br><span class="hljs-keyword">int</span>[] ss1= &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br>Arrays.<span class="hljs-built_in">sort</span>(ss1);<br>System.out.<span class="hljs-built_in">println</span>(Arrays.<span class="hljs-built_in">toString</span>(ss1));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-comment">// 方法1</span><br><span class="hljs-comment">// 冒泡排序，前一个数与后一个数进行比较</span><br><span class="hljs-keyword">int</span>[] ss1 = &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ss1.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; ss1.length; j++) &#123;<br><span class="hljs-keyword">if</span> (ss1[j] &lt; ss1[i]) &#123;<br>temp = ss1[i];<br>ss1[i] = ss1[j];<br>ss1[j] = temp;<br>&#125;<br>&#125;<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(Arrays.<span class="hljs-built_in">toString</span>(ss1));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-comment">// 方法2</span><br><span class="hljs-comment">// 选择排序</span><br><span class="hljs-keyword">int</span>[] ss1 = &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ss1.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">int</span> min = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; ss1.length; j++) &#123;<br><span class="hljs-keyword">if</span> (ss1[min] &gt; ss1[j]) &#123;<br><span class="hljs-comment">// 找到比选定下标小的数</span><br>min = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (min != i) &#123;<br><span class="hljs-comment">// 交换位置</span><br>temp = ss1[i];<br>ss1[i] = ss1[min];<br>ss1[min] = temp;<br>&#125;<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(Arrays.<span class="hljs-built_in">toString</span>(ss1));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-comment">// 方法3</span><br><span class="hljs-comment">// 插入排序</span><br><span class="hljs-keyword">int</span>[] ss1 = &#123; <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; ss1.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br><span class="hljs-keyword">if</span> (ss1[j] &lt; ss1[j - <span class="hljs-number">1</span>]) &#123;<br>temp = ss1[j];<br>ss1[j] = ss1[j - <span class="hljs-number">1</span>];<br>ss1[j - <span class="hljs-number">1</span>] = temp;<br>&#125; <span class="hljs-keyword">else</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(Arrays.<span class="hljs-built_in">toString</span>(ss1));<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-comment">// 有序数组,二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">bingarySerarch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> high = array.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br><span class="hljs-keyword">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (num &gt; array[mid]) &#123;<br>low = mid + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; array[mid]) &#123;<br>high = mid - <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> mid;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 无序数组，采用遍历，也可以先排序，后采用二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">int</span> index = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br><span class="hljs-keyword">if</span> (num == array[i]) &#123;<br>index = i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><span class="hljs-comment">// Java 提供的查找方式。查看源码，它的本质就是二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * binarySearch(Object[], Object key) a: 要搜索的数组 key：要搜索的值</span><br><span class="hljs-comment"> * 如果key在数组中，则返回搜索值的索引；否则返回-1或“-”（插入点）。插入点是索引键将要插入数组的那一点，即第一个大于该键的元素的索引。 技巧： [1]</span><br><span class="hljs-comment"> * 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”； [2] 搜索值是数组元素，从0开始计数，得搜索值的索引值； [3]</span><br><span class="hljs-comment"> * 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1); [4] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">int</span> index = Arrays.<span class="hljs-built_in">binarySearch</span>(array, <span class="hljs-number">8</span>);<br>System.out.<span class="hljs-built_in">println</span>(index);<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心数据结构(List、Map、Set)原理与使用技巧</title>
    <link href="/378fe56bd246.html"/>
    <url>/378fe56bd246.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>JDK提供了一组主要的数据结构实现，如List、Map、Set等常用数据结构。这些数据都继承自java.util.Collection接口，并位于java.util包内</p></blockquote><h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><p>最重要的三种List接口实现：ArrayList、Vector、LinkedList。它们的类图如下：</p><p><img src="/378fe56bd246/1.png"></p><p>可以看到，3种List均来自AbstratList的实现。</p><p>而AbstratList直接实现了List接口，并扩展自AbstratCollection。</p><p>ArrayList和Vector使用了数组实现，可以认为，ArrayList封装了对内部数组的操作。比如向数组中添加、删除、插入新的元素或数组的扩展和重定义。对ArrayList或者Vector的操作，等价于对内部对象数组的操作。</p><p>ArrayList和Vector几乎使用了相同的算法，它们的唯一区别可以认为是对多线程的支持。ArrayList没有对一个方法做线程同步，因此不是线程安全的。Vector中绝大多数方法都做了线程同步，是一种线程安全的实现。因此ArrayList和Vector的性能特性相差无几。</p><p>LinkedList使用了循环双向链表数据结构。LinkedList由一系列表项连接而成。一个表项总是包含3个部分：元素内容、前驱表项和后驱表项。如图所示：</p><p><img src="/378fe56bd246/2.png"></p><p>LinkedList的表项源码：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">private static class <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; &#123;<br>    E item;<br>    <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; next;<br>    <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; prev;<br><br>    <span class="hljs-keyword">Node</span><span class="hljs-title">(Node</span><span class="hljs-tag">&lt;E&gt;</span> prev, E element, <span class="hljs-keyword">Node</span><span class="hljs-title">&lt;E</span>&gt; next) &#123;<br>        this.item = element;<br>        this.next = next;<br>        this.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>无论LinkedList是否为空，链表都有一个header表项，它既是链表的开始，也表示链表的结尾。它的后驱表项便是链表的第一个元素，前驱表项便是链表的最后一个元素。如图所示：</p><p><img src="/378fe56bd246/3.png"></p><p>下面比较下ArrayList和LinkedList的不同。</p><h2 id="增加元素到列表尾端"><a href="#增加元素到列表尾端" class="headerlink" title="增加元素到列表尾端"></a>增加元素到列表尾端</h2><p>对于ArrayList来说，只要当前容量足够大，add()操作的效率是非常高的。</p><p>只有当ArrayList对容量的需求超过当前数组的大小时，才需要进行扩容。扩容会进行大量的数组复制操作。而复制时最终调用的是System.arraycopy()方法，因此，add()效率还是相当高的。</p><p>LinkedList由于使用了链表的结构，因此不需要维护容量的大小。这点比ArrayList有优势，不过，由于每次元素增加都需要新建Node对象，并进行更多的赋值操作。在频繁的系统调用中，对性能会产生一定影响。</p><h2 id="插入元素到列表任意位置"><a href="#插入元素到列表任意位置" class="headerlink" title="插入元素到列表任意位置"></a>插入元素到列表任意位置</h2><p>ArrayList是基于数组实现的，而数组是一块连续的内存空间，每次插入操作，都会进行一次数组复制。大量的数组复制会导致系统性能低下。</p><p>LinkedList是基于链表实现的，在任意位置插入和在尾端增加是一样的。所以，如果系统应用需要对List对象在任意位置进行频繁的插入操作，可以考虑用LinkedList替代ArrayList。</p><h2 id="容量参数"><a href="#容量参数" class="headerlink" title="容量参数"></a>容量参数</h2><p>容量参数是ArrayList 和 Vector等基于数组的List的特有性能参数，它表示初始数组的大小。</p><p>合理的设置容量参数，可以减少数组扩容，提升系统性能。</p><p>默认ArrayList的数组初始大小为10。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_CAPACITY = <span class="hljs-number">10</span>;<br></code></pre></div></td></tr></table></figure><h2 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h2><p>常用的三种列表遍历方式：ForEach操作、迭代器和for循环。</p><p>对于ForEach操作，反编译可知实际上是将ForEach循环体作为迭代器处理。不过ForEach比自定义的迭代器多了一步赋值操作，性能不如直接使用迭代器的方式。</p><p>使用For循环通过随机访问遍历列表，ArrayList表现很好，速度最快；但是LinkedList的表现非常差，应避免使用，这是因为对LinkedList的随机访问时，总会进行一次列表的遍历操作。</p><h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><p>Map是一种非常常用的数据结构。围绕着Map接口，最主要的实现类有Hashtable, HashMap, LinkedHashMap 和 TreeMap，在Hashtable中，还有Properties 类的实现。</p><p><img src="/378fe56bd246/4.png"></p><p>Hashtable和hashMap的区别在于Hashtable的大部分方法都做了线程同步，而HashMap没有，</p><p>因此，Hashtable是线程安全的，HashMap不是。</p><p>其次，Hashtable 不允许key或value使用null值，而HashMap可以。</p><p>第三，它们在内部对key的hash算法和hash值到内存索引的映射算法不同。</p><p>由于HashMap使用广泛，本文以HashMap为例，阐述它的实现原理。</p><h2 id="HashMap的实现原理"><a href="#HashMap的实现原理" class="headerlink" title="HashMap的实现原理"></a>HashMap的实现原理</h2><p>简单来说，HashMap就是将key做hash算法，然后将hash值映射到内存地址，直接取得key所对应的数据。</p><p>在HashMap中，底层数据结构使用的是数组。所谓的内存地址，就是数组的下标索引。</p><p>用代码简单表示如下：</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">object[key_hash] = value<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h2 id="Hash冲突"><a href="#Hash冲突" class="headerlink" title="Hash冲突"></a>Hash冲突</h2><p>当需要存放的两个元素1和2经hash计算后，发现对应在内存中的同一个地址。此时HashMap又会如何处理以保证数据的完整存放？</p><p>在HashMap的底层使用数组，但数组内的元素不是简单的值，而是一个Entity类的对象。每一个Entity表项包括key，value，next，hash几项。注意这里的next部分，它指向另外一个Entity。</p><p>当put()操作有冲突时，新的Entity会替换原有的值，为了保证旧值不丢失，会将next指向旧值。这便实现了在一个数组空间内存放多个值项。因此，HashMap实际上是一个链表的数组。</p><p>而在进行get()操作时，如果定位到的数组元素不含链表（当前entry的next指向null），则直接返回；如果定位到的数组元素包含链表，则需要遍历链表，通过key对象的equals方法逐一比对查找。</p><h2 id="容量参数-1"><a href="#容量参数-1" class="headerlink" title="容量参数"></a>容量参数</h2><p>和ArrayList一样，基于数组的结构，不可避免的需要在数组空间不足时，进行扩展。而数组的重组比较耗时，因此对其做一定的优化很有必要了。</p><p>HashMap提供了两个可以指定初始化大小的构造函数：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-constructor">HashMap(<span class="hljs-params">int</span> <span class="hljs-params">initialCapacity</span>)</span> <br>          构造一个带指定初始容量和默认负载因子 (<span class="hljs-number">0.75</span>) 的空 HashMap。<br><br><span class="hljs-constructor">HashMap(<span class="hljs-params">int</span> <span class="hljs-params">initialCapacity</span>, <span class="hljs-params">float</span> <span class="hljs-params">loadFactor</span>)</span> <br>          构造一个带指定初始容量和负载因子的空 HashMap。<br></code></pre></div></td></tr></table></figure><p>其中，HashMap会使用大于等于initialCapacity并且是2的指数次幂的最小的整数作为内置数组的大小。</p><p>负载因子又叫做填充比，它是介于0和1之间的浮点数。</p><p>负载因子 = 实际元素个数 / 内部数组总大小</p><p>负载因子的作用就是决定HashMap的阈值（threshold）。</p><p>阈值 = 数组总容量 × 负载因子</p><p>当HashMap的实际容量超过阈值便会进行扩容，每次扩容将新的数组大小设置为原大小的1.5倍。</p><p>默认情况下，HashMap的初始大小是16，负载因子为0.75。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="hljs-number">0.75f</span>;<br></code></pre></div></td></tr></table></figure><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>LinkedHashMap继承自HashMap，因此，它具备了HashMap的优良特性，并在此基础上，LinkedHashMap又在内部增加了一个链表，用以存放元素的顺序。</p><p>因此，LinkedHashMap可以简单理解为一个维护了元素次序表的HashMap.</p><p>LinkedHashMap提供两种类型的顺序：一是元素插入时的顺序；二是最近访问的顺序。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-constructor">LinkedHashMap(<span class="hljs-params">int</span> <span class="hljs-params">initialCapacity</span>, <span class="hljs-params">float</span> <span class="hljs-params">loadFactor</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">accessOrder</span>)</span> <br>          构造一个带指定初始容量、负载因子和排序模式的空 LinkedHashMap 实例<br></code></pre></div></td></tr></table></figure><p>其中accessOrder为true时，按照元素最后访问时间排序；当accessOrder为false 时，按照插入顺序排序。默认为 false 。</p><p>在内部实现中，LinkedHashMap通过继承HashMap.Entity类，实现LinkedHashMap.Entity，为HashMap.Entity增加了before和after属性用以记录某一表项的前驱和后继，并构成循环链表。</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>TreeMap可以简单理解为一种可以进行排序的Map实现。与LinkedHashMap不同，LinkedHashMap是根据元素增加或者访问的先后顺序进行排序，而TreeMap则根据元素的Key进行排序。为了确定Key的排序算法，可以使用两种方式指定：</p><ul><li>在TreeMap的构造函数中注入一个Comparator：</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-constructor">TreeMap(Comparator&lt;? <span class="hljs-params">super</span> K&gt; <span class="hljs-params">comparator</span>)</span> <br></code></pre></div></td></tr></table></figure><ul><li>使用一个实现了 Comparable 接口的 Key。</li></ul><p>TreeMap的内部实现是基于红黑树的。红黑树是一种平衡查找树，这里不做过多介绍。</p><p>TreeMap 其它排序接口如下：</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-built_in">subMap</span>(K fromKey, K toKey) <br>          返回此映射的部分视图，其键值的范围从 fromKey（包括）到 toKey（不包括）。<br><br><span class="hljs-built_in">tailMap</span>(K fromKey) <br>          返回此映射的部分视图，其键大于等于 fromKey。<br><br><span class="hljs-built_in">firstKey</span>() <br>          返回此映射中当前第一个（最低）键。<br><br><span class="hljs-built_in">headMap</span>(K toKey) <br>          返回此映射的部分视图，其键值严格小于 toKey。<br><br>一个简单示例如下：<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyKey</span> <span class="hljs-title">implements</span> <span class="hljs-title">Comparable</span>&lt;</span>MyKey&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(MyKey o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (o.id &lt; <span class="hljs-keyword">this</span>.id)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o.id &gt; <span class="hljs-keyword">this</span>.id)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        MyKey myKey1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyKey</span>(<span class="hljs-number">1</span>);<br>        MyKey myKey2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyKey</span>(<span class="hljs-number">2</span>);<br>        MyKey myKey3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyKey</span>(<span class="hljs-number">3</span>);<br>        Map&lt;MyKey,Object&gt; map = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br>        map.<span class="hljs-built_in">put</span>(myKey1,<span class="hljs-string">&quot;一号&quot;</span>);<br>        map.<span class="hljs-built_in">put</span>(myKey3,<span class="hljs-string">&quot;三号&quot;</span>);<br>        map.<span class="hljs-built_in">put</span>(myKey2,<span class="hljs-string">&quot;二号&quot;</span>);<br><br>        Iterator&lt;MyKey&gt; iterator = map.<span class="hljs-built_in">keySet</span>().<span class="hljs-built_in">iterator</span>();<br>        <span class="hljs-keyword">while</span> (iterator.<span class="hljs-built_in">hasNext</span>())&#123;<br>            System.out.<span class="hljs-built_in">println</span>(map.<span class="hljs-built_in">get</span>(iterator.<span class="hljs-built_in">next</span>()));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><p>Set并没有在Collection接口之上增加额外的操作，Set集合中的元素是不能重复的。<br>其中最为重要的是HashSet、LinkedHashSet、TreeSet 的实现。这里不再一一赘述，因为所有的这些Set实现都只是对应的Map的一种封装而已。</p><h1 id="优化集合访问代码"><a href="#优化集合访问代码" class="headerlink" title="优化集合访问代码"></a>优化集合访问代码</h1><h2 id="分离循环中被重复调用的代码"><a href="#分离循环中被重复调用的代码" class="headerlink" title="分离循环中被重复调用的代码"></a>分离循环中被重复调用的代码</h2><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">举个例子，当我们要使用<span class="hljs-keyword">for</span>循环遍历集合时<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;collection.<span class="hljs-built_in">size</span>();i++)&#123;<br>    <span class="hljs-comment">//.....</span><br>&#125;<br>很明显，每次循环都会调用<span class="hljs-built_in">size</span>()方法，并且每次都会返回相同的数值。分离所有类似的代码对提升循环性能有着积极地意义。因此，可以将上段代码改造成<br><span class="hljs-keyword">int</span> size= collection.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>    <span class="hljs-comment">//.....</span><br>&#125;<br>当元素的数量越多时，这样的处理就越有意义。<br></code></pre></div></td></tr></table></figure><h2 id="省略相同的操作"><a href="#省略相同的操作" class="headerlink" title="省略相同的操作"></a>省略相同的操作</h2><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">假设我们有一段类似的操作如下<br><span class="hljs-keyword">int</span> size= collection.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>    <span class="hljs-keyword">if</span> (list.<span class="hljs-built_in">get</span>(i)==<span class="hljs-number">1</span>||list.<span class="hljs-built_in">get</span>(i)==<span class="hljs-number">2</span>||list.<span class="hljs-built_in">get</span>(i)==<span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br>虽然每次循环调用<span class="hljs-built_in">get</span>(i)的返回值不同，但在同一次调用中，结果是相同的，因此可以提取这些相同的操作。<br><span class="hljs-keyword">int</span> size= collection.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>    <span class="hljs-keyword">if</span> ((k = list.<span class="hljs-built_in">get</span>(i))==<span class="hljs-number">1</span>||k==<span class="hljs-number">2</span>||k==<span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="减少方法调用"><a href="#减少方法调用" class="headerlink" title="减少方法调用"></a>减少方法调用</h2><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing">方法调用是需要消耗系统堆栈的，如果可以，则尽量访问内部元素，而不要调用对应的接口，函数调用是需要消耗系统资源的，直接访问元素会更高效。<br>假设上面的代码是Vector.class的子类的部分代码，那么可以这么改写<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">size</span> = <span class="hljs-keyword">this</span>.elementCount;<br><span class="hljs-keyword">Object</span> k=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">size</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span> ((k = elementData[i])==<span class="hljs-string">&quot;1&quot;</span>||k==<span class="hljs-string">&quot;2&quot;</span>||k==<span class="hljs-string">&quot;3&quot;</span>)&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br>可以看到，原本的 <span class="hljs-built_in">size</span>() 和 <span class="hljs-built_in">get</span>() 方法被直接替代为访问原始变量，这对系统性能的提升是非常有用的。<br></code></pre></div></td></tr></table></figure><h1 id="RandomAccess接口"><a href="#RandomAccess接口" class="headerlink" title="RandomAccess接口"></a>RandomAccess接口</h1><p>RandomAccess接口是一个标志接口，本身并没有提供任何方法，任何实现RandomAccess接口的对象都可以认为是支持快速随机访问的对象。此接口的主要目的是标识那些可以支持快速随机访问的List实现。</p><p>在JDK中，任何一个基于数组的List实现都实现了RandomAccess接口，而基于链表的实现则没有。这很好理解，只有数组能够快速随机访问，（比如：通过 object[5]，object[6]可以直接查找并返回对象），而对链表的随机访问需要进行链表的遍历。</p><p>在实际操作中，可以根据list instanceof RandomAccess来判断对象是否实现 RandomAccess接口，从而选择是使用随机访问还是iterator迭代器进行访问。</p><p>在应用程序中，如果需要通过索引下标对 List 做随机访问，尽量不要使用 LinkedList，ArrayList和Vector都是不错的选择。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery-A标签</title>
    <link href="/bef1ac8b1d67.html"/>
    <url>/bef1ac8b1d67.html</url>
    
    <content type="html"><![CDATA[<span id="more"></span><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">拦截元素发生默认的行为<br><span class="hljs-function"><span class="hljs-title">preventDefault</span><span class="hljs-params">()</span></span> <br><br>阻止冒泡事件<br><span class="hljs-function"><span class="hljs-title">stopPropagation</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Html</tag>
      
      <tag>JQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql基础</title>
    <link href="/1e8a3115b061.html"/>
    <url>/1e8a3115b061.html</url>
    
    <content type="html"><![CDATA[<p>远程连接</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;<br></code></pre></div></td></tr></table></figure><p>初始化密码</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>更改表中字段字符集</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8;<br></code></pre></div></td></tr></table></figure><p>查看字符集</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表 ;<br></code></pre></div></td></tr></table></figure><blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建从零开始(三)</title>
    <link href="/a39447736c9e.html"/>
    <url>/a39447736c9e.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo优化"><a href="#Hexo优化" class="headerlink" title="Hexo优化"></a>Hexo优化</h1><p>先安装这些东西</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>npm install gulp -g<br><span class="hljs-bullet">- </span>npm install gulp-clean-css --save<br><span class="hljs-bullet">- </span>npm install gulp-uglify --save<br><span class="hljs-bullet">- </span>npm install gulp-htmlmin --save<br><span class="hljs-bullet">- </span>npm install gulp-htmlclean --save<br><span class="hljs-bullet">- </span>npm install gulp-imagemin --save<br></code></pre></div></td></tr></table></figure><p>安装好了呢</p><p>配置gulpfile.js（名字必须是这个）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> gutil = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-util&#x27;</span>);<br><span class="hljs-keyword">var</span> clean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-clean&#x27;</span>);<br><span class="hljs-keyword">var</span> debug = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-debug&#x27;</span>);<br><span class="hljs-keyword">var</span> cache = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-cache&#x27;</span>);<br><span class="hljs-keyword">var</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-babel&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> changed = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-changed&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>);<br><span class="hljs-keyword">var</span> imagemin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-clean-css&#x27;</span>);<br><span class="hljs-keyword">var</span> pngquant = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;imagemin-pngquant&#x27;</span>);<br><br><span class="hljs-comment">// 压缩css文件</span><br>gulp.task(<span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.css&#x27;</span>)<br>    .pipe(minifycss())<br>    .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 压缩js文件，支持将ES6代码转换成ES5代码</span><br>gulp.task(<span class="hljs-string">&#x27;minify-js&#x27;</span>,[<span class="hljs-string">&#x27;minify-css&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.js&#x27;</span>)<br>    .pipe(babel(&#123;<br>      <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;es2015&#x27;</span>]<br>    &#125;))<br>    .pipe(uglify())<br>    .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 压缩html文件</span><br>gulp.task(<span class="hljs-string">&#x27;minify-html&#x27;</span>,[<span class="hljs-string">&#x27;minify-js&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>    .pipe(htmlclean())<br>    .pipe(htmlmin(&#123;<br>      <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>,<br>    &#125;))<br>    .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// 压缩图片(深度压缩)</span><br>gulp.task(<span class="hljs-string">&#x27;minify-images&#x27;</span>,[<span class="hljs-string">&#x27;minify-html&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  gulp.src(<span class="hljs-string">&#x27;./public/**/**/*.&#123;png,jpg,gif,ico&#125;&#x27;</span>)<br>    .pipe(cache(imagemin(&#123;                   <span class="hljs-comment">//启用缓存，只压缩发生变化的图片</span><br>      <span class="hljs-attr">progressive</span>: <span class="hljs-literal">true</span>,                     <span class="hljs-comment">//是否无损压缩jpg图片</span><br>      <span class="hljs-attr">interlaced</span>: <span class="hljs-literal">false</span>,                     <span class="hljs-comment">//是否隔行扫描gif进行渲染</span><br>      <span class="hljs-attr">svgoPlugins</span>: [&#123;<span class="hljs-attr">removeViewBox</span>: <span class="hljs-literal">false</span>&#125;], <span class="hljs-comment">//是否移除svg的viewbox属性</span><br>      <span class="hljs-attr">multipass</span>: <span class="hljs-literal">false</span>,                      <span class="hljs-comment">//是否多次优化svg直到完全优化</span><br>      <span class="hljs-attr">optimizationLevel</span>: <span class="hljs-number">5</span>,                   <span class="hljs-comment">//优化等级，取值范围：0-7，默认值：3</span><br>      <span class="hljs-attr">use</span>: [pngquant()]                      <span class="hljs-comment">//使用pngquant深度压缩png图片的imagemin插件</span><br>    &#125;)))<br>    .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">// gulp3的写法</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, [<span class="hljs-string">&#x27;minify-images&#x27;</span>]);<br><br><span class="hljs-comment">// gulp4的写法</span><br><span class="hljs-comment">// gulp.task(&#x27;default&#x27;,gulp.series(gulp.parallel(&#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-images&#x27;, &#x27;minify-html&#x27;)))</span><br><br><br></code></pre></div></td></tr></table></figure><p>根据自己的情况增，删，改，然后</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">在hexo g 后 输入 gulp 或者 gulp <span class="hljs-attribute">--max_old_space_size</span>=3000<br></code></pre></div></td></tr></table></figure><p>第二种是内存不足的时候干的</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建从零开始(二)</title>
    <link href="/57bfd13fa382.html"/>
    <url>/57bfd13fa382.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h1><p>Hexo配置文件在根目录下的_config.yml文件<br>所有的配置项后面的冒号（:）与值之间要有一个空格。<br>当然依旧是官方配置文件说明<a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></p><span id="more"></span><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">I</span> <span class="hljs-string">had</span> <span class="hljs-string">a</span> <span class="hljs-string">crush</span> <span class="hljs-string">on</span> <span class="hljs-string">him</span> <span class="hljs-comment">#网站标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-comment">#网站副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">所有人的坚强</span> <span class="hljs-string">都是软弱生的茧</span> <span class="hljs-comment">#网站描述</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Guard</span> <span class="hljs-comment">#网站作者名称</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#网络语言，默认为英语</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">Asia/Shanghai</span> <span class="hljs-comment">#网站时区</span><br><br><span class="hljs-comment"># URL 网站设置</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://blog.guard.ren</span> <span class="hljs-comment">#网站的地址</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#网站的根目录，如果是子文件夹下，则填写子文件夹路径</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:title.html</span> <span class="hljs-comment">#文章链接地址格式 </span><br><span class="hljs-attr">permalink_defaults:</span><br><br><span class="hljs-comment"># Directory 目录设置</span><br><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span> <span class="hljs-comment">#资源文件夹，默认是source</span><br><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span> <span class="hljs-comment">#公共文件夹，默认是public</span><br><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span> <span class="hljs-comment">#标签文件夹，默认是tags</span><br><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span> <span class="hljs-comment">#档案文件夹，默认是archives</span><br><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span> <span class="hljs-comment">#分类文件夹，默认是categories</span><br><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span> <span class="hljs-comment">#代码文件夹，默认是downloads/code</span><br><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">:lang</span> <span class="hljs-comment">#国际化文件夹，默认跟language相同</span><br><span class="hljs-attr">skip_render:</span> <span class="hljs-string">README.md</span> <span class="hljs-comment">#不需要渲染的文件夹或文件夹,放在[]中</span><br><br><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:year/:title.md</span> <span class="hljs-comment"># 新帖子的文件名</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span> <span class="hljs-comment">#默认布局模板</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 将标题转换为标题</span><br><span class="hljs-attr">external_link:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 在新标签中打开外部链接</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">highlight:</span> <span class="hljs-comment">#高亮显示</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#默认开启</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示行号，默认开启</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tab_replace:</span><br>  <br><span class="hljs-comment"># 主页设置</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br>  <br><span class="hljs-comment"># 类别和标签</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span><br><span class="hljs-attr">category_map:</span><br><span class="hljs-attr">tag_map:</span><br><br><span class="hljs-comment"># 日期/时间格式</span><br><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><br><span class="hljs-comment">## You can customize the date format as defined in</span><br><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span><br><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span><br><br><span class="hljs-comment"># 分页</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br><br><span class="hljs-comment"># 扩展</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><br><br><span class="hljs-comment"># 主题</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br><br><span class="hljs-comment"># 部署</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-comment"># other deployer</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-comment">#github仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># github分支</span><br></code></pre></div></td></tr></table></figure><h1 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h1><p>上面的差不多就是Hexo的基础本身的了，当然主题啊什么感觉不好看，也有点简陋，所以下面就开始个性化设置，这都是看自己的喜好设置，不用全部设置上</p><h2 id="RSS订阅插件"><a href="#RSS订阅插件" class="headerlink" title="RSS订阅插件"></a>RSS订阅插件</h2><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install hexo-generator-feed <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>Hexo的_config.yml，添加配置信息</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta">#sitemap</span><br><span class="hljs-symbol">sitemap:</span><br><span class="hljs-symbol">  path:</span> sitemap.xml<br></code></pre></div></td></tr></table></figure><h2 id="SiteMap插件"><a href="#SiteMap插件" class="headerlink" title="SiteMap插件"></a>SiteMap插件</h2><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install hexo-generator-sitemap <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>Hexo的_config.yml，添加配置信息</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-comment">#feed</span><br>atom:<br>  <span class="hljs-keyword">type</span>: atom<br>  path: atom.<span class="hljs-keyword">xml</span><br>  <span class="hljs-title">limit</span>: <span class="hljs-number">20</span><br></code></pre></div></td></tr></table></figure><h2 id="Git插件"><a href="#Git插件" class="headerlink" title="Git插件"></a>Git插件</h2><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><h2 id="更换主题为next"><a href="#更换主题为next" class="headerlink" title="更换主题为next"></a>更换主题为next</h2><ul><li>下载next</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">cd hexo<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theme-next/</span>hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span><br></code></pre></div></td></tr></table></figure><ul><li>设置Hexo下的_config.yml</li></ul><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean"># 主题<br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: next<br></code></pre></div></td></tr></table></figure><p>next下也会有一个_config.yml,为了区分两个_config.yml，我讲称为Hexo的_config.yml，next的_config.yml</p><h2 id="next基础设置"><a href="#next基础设置" class="headerlink" title="next基础设置"></a>next基础设置</h2><h3 id="更换favicon"><a href="#更换favicon" class="headerlink" title="更换favicon"></a>更换favicon</h3><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">favicon:</span><br><span class="hljs-symbol">  small:</span> <span class="hljs-meta-keyword">/images/</span>guard.png<br><span class="hljs-symbol">  medium:</span> <span class="hljs-meta-keyword">/images/</span>guard.png<br><span class="hljs-symbol">  apple_touch_icon:</span> <span class="hljs-meta-keyword">/images/</span>guard.png<br><span class="hljs-symbol">  safari_pinned_tab:</span> <span class="hljs-meta-keyword">/images/</span>guard.svg<br></code></pre></div></td></tr></table></figure><h3 id="隐藏底部版本"><a href="#隐藏底部版本" class="headerlink" title="隐藏底部版本"></a>隐藏底部版本</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># Specify the date when the site was setup. If not defined, current year will be used.</span><br>  <span class="hljs-comment">#since: 2015</span><br><br>  <span class="hljs-comment"># 年份和版权信息之间的图标。</span><br>  <span class="hljs-attr">icon:</span><br>    <span class="hljs-comment"># Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/</span><br>    <span class="hljs-comment"># `heart` is recommended with animation in red (#ff0000).</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">heart-o</span><br>    <span class="hljs-comment"># If you want to animate the icon, set it to true.</span><br>    <span class="hljs-attr">animated:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Change the color of icon, using Hex Code.</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#808080&quot;</span><br><br>  <span class="hljs-comment"># 如果没有定义，将使用来自Hexo主配置的`author`。</span><br>  <span class="hljs-attr">copyright:</span><br><br>  <span class="hljs-attr">powered:</span><br>    <span class="hljs-comment"># Hexo link (Powered by Hexo).</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Version info of Hexo after Hexo link (vX.X.X).</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-attr">theme:</span><br>    <span class="hljs-comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Version info of NexT after scheme info (vX.X.X).</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Beian icp为中国用户提供的信息。在中国，每个法律网站的网站页脚都应该有一个beian icp。</span><br>  <span class="hljs-comment"># http://www.miitbeian.gov.cn</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">icp:</span><br></code></pre></div></td></tr></table></figure><h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">creative_commons:</span><br>  <span class="hljs-attr">license:</span> <span class="hljs-string">by-nc-sa</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">post:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">language:</span><br></code></pre></div></td></tr></table></figure><h3 id="右上角GitHub"><a href="#右上角GitHub" class="headerlink" title="右上角GitHub"></a>右上角GitHub</h3><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">github_banner:</span><br><span class="hljs-symbol">  enable:</span> true<br><span class="hljs-symbol">  permalink:</span> https:<span class="hljs-comment">//github.com/isGuard</span><br><span class="hljs-symbol">  title:</span> Follow me on GitHub<br></code></pre></div></td></tr></table></figure><h3 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h3><p>要创建对应为目录文件</p><p>如果是tags 最好就是在\scaffolds\post.md加一个tags: 以后每次创建文章就不用自己加了</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">  home:</span> / || home<br><span class="hljs-symbol">  about:</span> <span class="hljs-meta-keyword">/about/</span> || user<br><span class="hljs-symbol">  tags:</span> <span class="hljs-meta-keyword">/tags/</span> || tags<br><span class="hljs-symbol">  categories:</span> <span class="hljs-meta-keyword">/categories/</span> || th<br><span class="hljs-symbol">  archives:</span> <span class="hljs-meta-keyword">/archives/</span> || archive<br>  <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>  <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br>  <span class="hljs-meta">#commonweal: /404/ || heartbeat</span><br><br><span class="hljs-meta"># 启用/禁用菜单图标/项目徽章.</span><br><span class="hljs-symbol">menu_settings:</span><br><span class="hljs-symbol">  icons:</span> true<br><span class="hljs-symbol">  badges:</span> false<br></code></pre></div></td></tr></table></figure><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># Schemes</span><br><span class="hljs-meta">#scheme: Muse</span><br>scheme: Mist<br><span class="hljs-meta">#scheme: Pisces</span><br><span class="hljs-meta">#scheme: Gemini</span><br></code></pre></div></td></tr></table></figure><h3 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h3><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">socia<span class="hljs-variable">l:</span><br>  GitHu<span class="hljs-variable">b:</span> http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/isGuard || github<br>  E-Mai<span class="hljs-variable">l:</span> mailto:isguard@outlook.<span class="hljs-keyword">com</span> || envelope<br>  #Weibo: http<span class="hljs-variable">s:</span>//weibo.<span class="hljs-keyword">com</span>/yourname || weibo<br>  #Google: http<span class="hljs-variable">s:</span>//plus.google.<span class="hljs-keyword">com</span>/yourname || google<br>  #Twitter: http<span class="hljs-variable">s:</span>//twitter.<span class="hljs-keyword">com</span>/yourname || twitter<br>  #FB Page: http<span class="hljs-variable">s:</span>//www.facebook.<span class="hljs-keyword">com</span>/yourname || facebook<br>  #VK Group: http<span class="hljs-variable">s:</span>//vk.<span class="hljs-keyword">com</span>/yourname || vk<br>  #StackOverflo<span class="hljs-variable">w:</span> http<span class="hljs-variable">s:</span>//stackoverflow.<span class="hljs-keyword">com</span>/yourname || stack-overflow<br>  #YouTube: http<span class="hljs-variable">s:</span>//youtube.<span class="hljs-keyword">com</span>/yourname || youtube<br>  #Instagram: http<span class="hljs-variable">s:</span>//instagram.<span class="hljs-keyword">com</span>/yourname || instagram<br>  #Skype: skype:yourname?<span class="hljs-keyword">call</span>|chat || skype<br><br>social_icon<span class="hljs-variable">s:</span><br>  enable: true<br>  icons_only: true<br>  transition: true<br></code></pre></div></td></tr></table></figure><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># 博客卷</span><br><span class="hljs-symbol">links_icon:</span> link<br><span class="hljs-symbol">links_title:</span> 友链<br><span class="hljs-symbol">links_layout:</span> block<br><span class="hljs-meta">#links_layout: inline</span><br><span class="hljs-symbol">links:</span><br>  <span class="hljs-meta">#Title: http:<span class="hljs-comment">//example.com</span></span><br></code></pre></div></td></tr></table></figure><h3 id="边栏头像"><a href="#边栏头像" class="headerlink" title="边栏头像"></a>边栏头像</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 边栏头像</span><br><span class="hljs-attr">avatar:</span><br>  <span class="hljs-comment"># In theme directory (source/images): /images/avatar.gif</span><br>  <span class="hljs-comment"># In site directory (source/uploads): /uploads/avatar.gif</span><br>  <span class="hljs-comment"># 您还可以使用其他链接图像。</span><br>  <span class="hljs-attr">url:</span> <br>  <span class="hljs-comment"># 如果是真的，那么化身就会被圈下来。</span><br>  <span class="hljs-attr">rounded:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 不透明度的值应该从0到1中选择以设置化身的不透明度。</span><br>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">1</span><br>  <span class="hljs-comment"># 如果为true，则将使用光标旋转头像。</span><br>  <span class="hljs-attr">rotated:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 边栏中的目录</span><br><span class="hljs-attr">toc:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 自动将列表编号添加到toc。</span><br>  <span class="hljs-attr">number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 如果为true，如果标题宽度大于侧边栏宽度，则所有单词将放在下一行。</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果为true，将显示帖子中的所有TOC级别，而不是其中的激活部分。</span><br>  <span class="hljs-attr">expand_all:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 生成的toc的最大航向深度。您可以通过Front Matter中的`toc_max_depth`在一个帖子中设置它。</span><br>  <span class="hljs-attr">max_depth:</span> <span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h3 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"># 自动摘录（不推荐）.<br># 使用 <span class="hljs-comment">&lt;!-- more --&gt;</span>在帖子中准确控制摘录.<br>auto_excerpt:<br>  enable: true<br>  length: 150<br></code></pre></div></td></tr></table></figure><h3 id="修改文章底部的-号的标签"><a href="#修改文章底部的-号的标签" class="headerlink" title="修改文章底部的#号的标签"></a>修改文章底部的#号的标签</h3><p>打开themes/next/layout/_macro/下的post.swig文件</p><p>搜索rel=”tag”&gt;#</p><p>将 # 换成<i class="fa fa-tag"></i></p><h3 id="加入本地搜索"><a href="#加入本地搜索" class="headerlink" title="加入本地搜索"></a>加入本地搜索</h3><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install hexo-generator-searchdb <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>Hexo的_config.yml,添加配置</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta">#search</span><br><span class="hljs-symbol">search:</span><br><span class="hljs-symbol">  path:</span> search.xml<br><span class="hljs-symbol">  field:</span> post<br><span class="hljs-symbol">  format:</span> html<br><span class="hljs-symbol">  limit:</span> <span class="hljs-number">10000</span><br></code></pre></div></td></tr></table></figure><p>next的_config.yml,添加配置</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"># <span class="hljs-keyword">Local</span> <span class="hljs-keyword">search</span><br># Dependencies: https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>github.com<span class="hljs-operator">/</span>theme<span class="hljs-operator">-</span>next<span class="hljs-operator">/</span>hexo<span class="hljs-operator">-</span>generator<span class="hljs-operator">-</span>searchdb<br>local_search:<br>  enable: <span class="hljs-literal">true</span><br>  # If auto, <span class="hljs-keyword">trigger</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">by</span> changing input.<br>  # If manual, <span class="hljs-keyword">trigger</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">by</span> pressing enter key <span class="hljs-keyword">or</span> <span class="hljs-keyword">search</span> button.<br>  <span class="hljs-keyword">trigger</span>: auto<br>  # <span class="hljs-keyword">Show</span> top n results <span class="hljs-keyword">per</span> article, <span class="hljs-keyword">show</span> <span class="hljs-keyword">all</span> results <span class="hljs-keyword">by</span> setting <span class="hljs-keyword">to</span> <span class="hljs-number">-1</span><br>  top_n_per_article: <span class="hljs-number">1</span><br>  # Unescape html strings <span class="hljs-keyword">to</span> the readable one.<br>  unescape: <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h3 id="添加Google统计"><a href="#添加Google统计" class="headerlink" title="添加Google统计"></a>添加Google统计</h3><p>访问<a href="https://analytics.google.com/">Google Analytics</a>,需要登录,按照提示填写网站信息开通GA服务获取统计ID</p><p>next的__config.yml,找到关键字google_analytics,删除注释#并填写获取到的统计ID</p><h3 id="不蒜子访问量统计"><a href="#不蒜子访问量统计" class="headerlink" title="不蒜子访问量统计"></a>不蒜子访问量统计</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="hljs-comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="hljs-attr">busuanzi_count:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors_icon:</span> <span class="hljs-string">user</span><br>  <span class="hljs-attr">total_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_views_icon:</span> <span class="hljs-string">eye</span><br>  <span class="hljs-attr">post_views:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">post_views_icon:</span> <span class="hljs-string">eye</span><br><br></code></pre></div></td></tr></table></figure><p>大部分next上都有可以抽一部分时间看，应该都能配好，有什么疑问可以留言</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建从零开始(一)</title>
    <link href="/b6106669f562.html"/>
    <url>/b6106669f562.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo是在网上无意间找到的，然后就爱上了</p><p>推荐理由：</p><ol><li>免费</li><li>开源</li><li>便捷</li><li>爱折腾</li></ol><p>最好掌握的技能或者现学，但至少要有点编程基础</p><ul><li>html+css+javascript</li><li>git</li><li>markdown</li><li>nodejs</li></ul><p>当然这都是比较简单的也不用了解太过完全，毕竟Google是个不错的方法</p><h1 id="安装Git客户端"><a href="#安装Git客户端" class="headerlink" title="安装Git客户端"></a>安装Git客户端</h1><blockquote><p>安装过的用户请跳过</p></blockquote><p>安装教程—&gt;<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" title="Git">Git</a></p><p><img src="/b6106669f562/1.png"></p><h1 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h1><blockquote><p>已经有的又可以跳过了</p></blockquote><ol><li>打开网站<a href="https://github.com/">https://github.com/</a></li><li>然后对着上面疯狂输出就好了</li></ol><h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>这个位置</p><p><img src="/b6106669f562/2.png"></p><p>仓库名称必须为</p><p>用户名.github.io</p><p>其他都不重要了，用public，如果是付费用户就当我没说</p><h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h1><blockquote><p>已经有的又可以跳过了</p></blockquote><p>打开Git Bash终端：在桌面右键，会出现”Git Bash here”的选项，点击即可</p><ul><li>设置user name和email：</li></ul><figure class="highlight verilog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;你的GitHub用户名&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>生成ssh密钥:</li></ul><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></div></td></tr></table></figure><p>如果是第一次配置那一直回车就好了</p><p>此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub。</p><p>注：id_rsa文件是私钥，要妥善保管，id_rsa.pub是公钥文件。</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\用</span>户名<span class="hljs-symbol">\.</span>ssh<br></code></pre></div></td></tr></table></figure><ul><li>添加公钥到Github</li></ul><p>点击用户头像，然后点击显示的Settings(设置)选项</p><p><img src="/b6106669f562/3.png"></p><p>在用户设置栏，点击SSH and GPG keys选项，然后点击New SSH key(新建SSH)按钮</p><p><img src="/b6106669f562/4.png"></p><p>将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮，titale随意</p><p><img src="/b6106669f562/5.png"></p><ul><li>测试SSH</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></div></td></tr></table></figure><p>会确认信息：</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">....<br>Are you sure you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> connecting (<span class="hljs-literal">yes</span>/<span class="hljs-literal">no</span>)?<br></code></pre></div></td></tr></table></figure><ul><li>输入yes后回车</li></ul><p>然后显示如下信息则OK</p><figure class="highlight irpf90"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs irpf90">Hi 你的用户名<span class="hljs-comment">! You&#x27;ve successfully authenticated, </span><br>but GitHub does not <span class="hljs-keyword">provide</span> shell <span class="hljs-keyword">access</span>.<br></code></pre></div></td></tr></table></figure><h1 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h1><p>就创建一个文件夹（blog什么的),然后进去</p><figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos"><span class="hljs-built_in">mkdir</span> blog<br><span class="hljs-built_in">cd</span> blog<br></code></pre></div></td></tr></table></figure><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><blockquote><p>Hexo官方也有安装教程<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><ul><li>先安装Nodejs</li></ul><p>官网 <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><ul><li>安装Hexo</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></div></td></tr></table></figure><p>hexo全局安装一次就够了，后面可以直接使用hexo相关的操作</p><ul><li>初始化Hexo</li></ul><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></div></td></tr></table></figure><ul><li>安装依赖</li></ul><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></div></td></tr></table></figure><ul><li>启动Hexo</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></div></td></tr></table></figure><p>启动之后，打开浏览器，在地址栏输入：<a href="http://localhost:4000，你会看到Hexo的示例页面">http://localhost:4000，你会看到Hexo的示例页面</a></p><h1 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h1><ul><li>新建文章</li></ul><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></div></td></tr></table></figure><ul><li>生成静态页面</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></div></td></tr></table></figure><p>生成的静态内容在public文件夹内</p><ul><li>清除生成内容</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo c</span><br></code></pre></div></td></tr></table></figure><p>执行此操作会删除public文件夹中的内容</p><h1 id="部署Hexo到Github"><a href="#部署Hexo到Github" class="headerlink" title="部署Hexo到Github"></a>部署Hexo到Github</h1><ul><li>编辑配置文件</li></ul><p>编辑Hexo配置文件_config.yml，找到下面内容</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span><br></code></pre></div></td></tr></table></figure><p>添加github仓库信息</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> <span class="hljs-meta">#github仓库地址</span><br><span class="hljs-symbol">  branch:</span> master <span class="hljs-meta"># github分支</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意：type、repo、branch的前面有两个空格，后面的:后面有一个空格</p></blockquote><ul><li>安装git插件</li></ul><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><ul><li>部署</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></div></td></tr></table></figure><p>如果没有意外，部署就成功了，可以打开 http://&lt;用户名&gt;.github.io 查看</p><h1 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h1><p>缩写</p><figure class="highlight verilog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs verilog">hexo g：hexo <span class="hljs-keyword">generate</span><br>hexo c：hexo clean<br>hexo s：hexo server<br>hexo d：hexo deploy<br></code></pre></div></td></tr></table></figure><p>组合</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo g -s，就是清除、生成、启动</span><br>hexo clean <span class="hljs-meta">&amp;&amp; hexo g -d，就是清除、生成、部署</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Table适应手机端</title>
    <link href="/1c1b04db2c01.html"/>
    <url>/1c1b04db2c01.html</url>
    
    <content type="html"><![CDATA[<p>表格字段一多，在手机上就无法直视了</p><p>所以想着把表格转成ul</p><p>这段代码取之网络</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$.fn.setTable = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el=<span class="hljs-built_in">this</span>;<br>    <span class="hljs-built_in">this</span>.start=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        $(el).find(<span class="hljs-string">&quot;ul&quot;</span>).remove();<br>        $(el).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> list = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">var</span> name = [];<br>            <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).find(<span class="hljs-string">&quot;th&quot;</span>).length == <span class="hljs-number">0</span>) &#123;<br>                name = <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                $(<span class="hljs-built_in">this</span>).find(<span class="hljs-string">&quot;th&quot;</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                    name.push($(<span class="hljs-built_in">this</span>).html());<br>                &#125;);<br>            &#125;<br>            $(<span class="hljs-built_in">this</span>).find(<span class="hljs-string">&quot;tbody tr&quot;</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">var</span> ul = <span class="hljs-string">&#x27;&lt;ul&gt;&#x27;</span>;<br>                $(<span class="hljs-built_in">this</span>).find(<span class="hljs-string">&quot;td&quot;</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index, item</span>) </span>&#123;<br>                    <span class="hljs-keyword">if</span>(name) &#123;<br>                        ul += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span> + name[index] + <span class="hljs-string">&quot;:&amp;nbsp;&quot;</span> + $(<span class="hljs-built_in">this</span>).html() + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        ul += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span> +<span class="hljs-string">&quot;&amp;nbsp;&quot;</span> + $(<span class="hljs-built_in">this</span>).html() + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;<br>                    &#125;<br>                &#125;);<br>                ul += <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>;<br>                list += ul;<br>            &#125;);<br>            $(<span class="hljs-built_in">this</span>).find(<span class="hljs-string">&quot;table&quot;</span>).hide();<br>            $(<span class="hljs-built_in">this</span>).append(list);<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">var</span> _this=<span class="hljs-built_in">this</span>;<br>    $(<span class="hljs-built_in">window</span>).resize(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>($(<span class="hljs-built_in">window</span>).width()&lt;<span class="hljs-number">767</span>)&#123;<br>           _this.start();<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>            $(el).find(<span class="hljs-string">&quot;table&quot;</span>).show();<br>            $(el).find(<span class="hljs-string">&quot;ul&quot;</span>).hide();<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">if</span>($(<span class="hljs-built_in">window</span>).width()&lt;<span class="hljs-number">767</span>)&#123;<br>        _this.start();<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>调用也简单</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/table2ul.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"> </span><br><span class="javascript">$(<span class="hljs-string">&quot;.table-list&quot;</span>).setTable(); </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>上面是基础源码，这个修改一下应该是可以应付大部分了</p>]]></content>
    
    
    <categories>
      
      <category>Html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Html</tag>
      
      <tag>JQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流书</title>
    <link href="/dc5ef838632f.html"/>
    <url>/dc5ef838632f.html</url>
    
    <content type="html"><![CDATA[<p>མ་འཕུར་ན་མི་ཚེ་ཚར་རྒྱུ་རེད།</p><p>མ་འཕུར་ན་རེ་བ་བརླག་རྒྱུ་རེད།</p><hr><blockquote><p>我一辈子走过许多地方的路<br>行过许多地方的桥<br>看过许多次数的云<br>喝过许多种类的酒<br>却只爱过一个正当最好年龄的人<br>—— 边城</p><p>等待而已，也叫努力？<br>是在等别人离开，还是在等自己放弃？<br>—— 云边有个小卖部</p><p>我们就这样说了声再见<br>在我们内心深处说再见之前<br>—— 朗读者</p><p>I had a crush on him<br>—— 送你一颗子弹</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>流书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-8函数式编程2</title>
    <link href="/49d077e64aa6.html"/>
    <url>/49d077e64aa6.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言</p><p>Java 8 Lambdas，Richard Warburton 著（O’Reilly，2014）。版权所有， 978-1-449-37077-0</p><ul><li>如何编写出简单、干净、易读的代码 —— 尤其是对于集合的操作？</li><li>如何简单地使用并行计算提高性能？</li><li>如何准确地为问题建模，并且开发出更好的领域特定语言？</li><li>如何写出不易出错，并且更简单的并发代码？</li><li>如何测试和调试 Lambda 表达式？</li></ul><p>将<strong>Lambda 表达式</strong>加入 Java，并不只是为了提高开发人员的生产效率，业界也对这一特性有根本性的需求。</p></blockquote><h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>Java 8 中新增的特性旨在帮助程序员写出更好的代码，其中对核心类库的改进是很关键的一部分。</p><p>对核心类库的改进主要包括集合类的 API 和新引入的流（Stream）。</p><p>流使程序员得以站在更高的抽象层次上对集合进行操作。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>Artist : 创作音乐的个人或团队<ul><li>name ：艺术家的名字</li><li>members ：乐队成员</li><li>origin ：乐队来自哪里</li><li>Track : 专辑中的一支曲目<ul><li>name : 曲目名称</li></ul></li><li>Album ： 专辑，若干曲目组成<ul><li>name ：专辑名</li><li>tracks ： 专辑上所有曲目的列表</li><li>musicians ：参与创作本专辑的艺术家列表 </li></ul></li></ul></li></ul><h2 id="从外部迭代到内部迭代"><a href="#从外部迭代到内部迭代" class="headerlink" title="从外部迭代到内部迭代"></a>从外部迭代到内部迭代</h2><p>Java 程序员在使用集合类时，一个通用的模式是在集合上进行迭代，然后处理返回的每一个元素。</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">使用 <span class="hljs-keyword">for</span> 循环计算来自伦敦的艺术家人数<br><br><span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">for</span> (Artist artist : allArtists) &#123; <br>    <span class="hljs-keyword">if</span> (artist.isFrom(<span class="hljs-string">&quot;London&quot;</span>)) &#123; <br>        <span class="hljs-keyword">count</span>++; <br>    &#125; <br>&#125;<br><br>尽管这样的操作可行，但存在几个问题<br><span class="hljs-number">1.</span>每次迭代集合类时，都需要写很多样板代码。<br><span class="hljs-number">2.</span>将<span class="hljs-keyword">for</span> 循环改造成并行方式运行也很麻烦，需要修改每个 <span class="hljs-keyword">for</span> 循环才能实现。<br><span class="hljs-number">3.</span>上述代码无法流畅传达程序员的意图。<br><span class="hljs-keyword">for</span> 循环的样板代码模糊了代码的本意，程序员必须阅读整个循环体才能理解。<br>若是单一的 <span class="hljs-keyword">for</span> 循环，倒也问题不大，但面对一个满是循环（尤其是嵌套循环）的庞大代码库时，负担就重了。<br></code></pre></div></td></tr></table></figure><p>for 循环其实是一个封装了迭代的语法糖，看看它的工作原理。</p><p>首先调用 iterator 方法，产生一个新的 Iterator 对象，进而控制整个迭代过程，这就是<strong>外部迭代</strong>。</p><p>迭代过程通过显式调用 Iterator 对象的 hasNext 和 next 方法完成迭代。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">使用迭代器计算来自伦敦的艺术家人数<br><br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <br><span class="hljs-built_in">Iterator</span>&lt;Artist&gt; <span class="hljs-built_in">iterator</span> = allArtists.<span class="hljs-built_in">iterator</span>(); <br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">iterator</span>.hasNext()) &#123; <br>    Artist artist = <span class="hljs-built_in">iterator</span>.next(); <br>    <span class="hljs-keyword">if</span> (artist.isFrom(<span class="hljs-string">&quot;London&quot;</span>)) &#123; <br>        count++; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>内部迭代</strong></p><p>首先要注意 stream() 方法的调用，它和调用 iterator() 的作用一样。</p><p>该方法不是返回一个控制迭代的 Iterator 对象，而是返回内部迭代中的相应接口：Stream。</p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs axapta">使用内部迭代计算来自伦敦的艺术家人数<br><br><span class="hljs-built_in">long</span> <span class="hljs-keyword">count</span> = allArtists.stream()<br>.filter(artist -&gt; artist.isFrom(<span class="hljs-string">&quot;London&quot;</span>))<br>.<span class="hljs-keyword">count</span>();<br><br>被分解为两步更简单的操作：<br>找出所有来自伦敦的艺术家<br>计算他们的人数<br></code></pre></div></td></tr></table></figure><p>每种操作都对应 Stream 接口的一个方法。<br>为了找出来自伦敦的艺术家，需要对 Stream 对象进行过滤：filter。过滤在这里是指“只保留通过某项测试的对象”。<br>测试由一个函数完成，根据艺术家是否来自伦敦，该函数返回 true 或者 false。<br>由于 Stream API 的函数式编程风格，我们并没有改变集合的内容，而是描述出 Stream 里的内容。<br>count() 方法计算给定 Stream 里包含多少个对象。</p><blockquote><p>Stream 是用函数式编程方式在集合类上进行复杂操作的工具。</p></blockquote><h2 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h2><p>整个过程被分解为两种更简单的操作：过滤和计数，看似有化简为繁之嫌<br>但 迭代只有一个for循环 ，两种操作是否以为着需要两次循环？ 答案并不是，只需要对列表迭代一次。</p><p>通常，在Java中调用一个方法，计算机会随机执行操作：比如，System.out.println(“Hello World”);会在终端上输出一条信息。<br>Streatm里的一些方法却略有不同，他们虽是普通Java方法，但返回的Stream对象却不是一个新集合，而是<strong>创建新集合的配方</strong>。</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less">只过滤，不计数<br><br><span class="hljs-selector-tag">allArtists</span><span class="hljs-selector-class">.stream</span>()<span class="hljs-selector-class">.filter</span>(artist -&gt; artist.isFrom(<span class="hljs-string">&quot;London&quot;</span>));<br></code></pre></div></td></tr></table></figure><p>这行代码并未做什么实际性的工作，filter 只刻画出了 Stream，但没有产生新的集合。<br>像filter 这样只描述 Stream，最终不产生新集合的方法叫<strong>作惰性求值方法</strong>；<br>而像 count 这样最终会从 Stream 产生值的方法叫作<strong>及早求值方法</strong>。</p><p>在过滤器中加入一条 println 语句，来输出艺术家的名字，就能轻而易举地看出其中的不同。</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">由于使用了惰性求值，没有输出艺术家的名字<br><br>allArtists.stream() <br>          .<span class="hljs-keyword">filter</span>(artist -&gt; &#123; <br>              <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(artist.getName()); <br>              <span class="hljs-keyword">return</span> artist.isFrom(&quot;London&quot;); <br>           &#125;);<br><br>运行这段代码，程序不会输出任何信息！<br></code></pre></div></td></tr></table></figure><p>如果将同样的输出语句加入一个拥有终止操作的流,艺术家的名字就会被输出。</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">long</span> <span class="hljs-keyword">count</span> = allArtists.stream() <br>                       .filter(artist -&gt; &#123; <br>                           System.out.<span class="hljs-keyword">println</span>(artist.getName()); <br>                           <span class="hljs-keyword">return</span> artist.isFrom(<span class="hljs-string">&quot;London&quot;</span>); <br>                       &#125;) <br>                       .<span class="hljs-keyword">count</span>();<br></code></pre></div></td></tr></table></figure><p>判断一个操作是惰性求值还是及早求值很简单：只需看它的返回值。<br>如果返回值是 Stream，那么是惰性求值；如果返回值是另一个值或为空，那么就是及早求值。<br>使用这些操作的理想方式就是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果，这正是它的合理之处。</p><h2 id="常用的流操作"><a href="#常用的流操作" class="headerlink" title="常用的流操作"></a>常用的流操作</h2><p>为了更好地理解 Stream API，掌握一些常用的 Stream 操作十分必要。除此处讲述的几种重要操作之外，该 API 的 Javadoc 中还有更多信息。</p><h3 id="collect-toList"><a href="#collect-toList" class="headerlink" title="collect(toList())"></a>collect(toList())</h3><blockquote><p>collect(toList()) 方法由 Stream 里的值生成一个列表，是一个及早求值操作。</p></blockquote><p>Stream 的 of 方法使用一组初始值生成新的 Stream。<br>事实上，collect 的用法不仅限于此，它是一个非常通用的强大结构。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">List&lt;String&gt; collected = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Stream</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br>                               .collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br><br><br>这段程序展示了如何使用 collect(<span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>) 方法从 Stream 中生成一个列表。<br>由于很多 Stream 操作都是惰性求值，因此调用 Stream 上一系列方法之后，还需要最后再调用一个类似 collect 的及早求值方法。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-8函数式编程1</title>
    <link href="/70ca5927dc18.html"/>
    <url>/70ca5927dc18.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言</p><p>Java 8 Lambdas，Richard Warburton 著（O’Reilly，2014）。版权所有， 978-1-449-37077-0</p><ul><li>如何编写出简单、干净、易读的代码 —— 尤其是对于集合的操作？</li><li>如何简单地使用并行计算提高性能？</li><li>如何准确地为问题建模，并且开发出更好的领域特定语言？</li><li>如何写出不易出错，并且更简单的并发代码？</li><li>如何测试和调试 Lambda 表达式？</li></ul><p>将<strong>Lambda 表达式</strong>加入 Java，并不只是为了提高开发人员的生产效率，业界也对这一特性有根本性的需求。</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在开始探索 Lambda 表达式之前，首先我们要知道它因何而生。</p><h2 id="为什么需要再次修改Java"><a href="#为什么需要再次修改Java" class="headerlink" title="为什么需要再次修改Java"></a>为什么需要再次修改Java</h2><p>Java还欠缺高效的并行操作</p><p>面向对象编程是对数据进行抽象，函数式编程是对行为进行抽象</p><h2 id="什么是函数式编程"><a href="#什么是函数式编程" class="headerlink" title="什么是函数式编程"></a>什么是函数式编程</h2><p>在思考问题时，使用不可变值和函数，函数对一个值进行处理，映射成另一个值</p><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Java 8 的最大变化是引入了 Lambda 表达式</p><h2 id="第一个Lambda表达式"><a href="#第一个Lambda表达式" class="headerlink" title="第一个Lambda表达式"></a>第一个Lambda表达式</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">button.add<span class="hljs-constructor">ActionListener(<span class="hljs-params">new</span> ActionListener()</span> &#123; <br>    public void action<span class="hljs-constructor">Performed(ActionEvent <span class="hljs-params">event</span>)</span> &#123; <br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;button clicked&quot;</span>); <br>    &#125; <br>&#125;);<span class="hljs-operator"></span><br><span class="hljs-operator"></span><br><span class="hljs-operator">==</span><br><span class="hljs-operator"></span><br><span class="hljs-operator"></span>button.add<span class="hljs-constructor">ActionListener(<span class="hljs-params">event</span> -&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-string">&quot;button clicked&quot;</span>)</span>);<br><br></code></pre></div></td></tr></table></figure><p>和传入一个实现某接口的对象不同，我们传入了一段代码块——一个没有名字的函数。event 是参数名，和上面匿名内部类示例中的是同一个参数。-&gt; 将参数和 Lambda 表达式的主体分开，而主体是用户点击按钮时会运行的一些代码。</p><p>和使用匿名内部类的另一处不同在于声明 event 参数的方式。使用匿名内部类时需要显式地声明参数类型 ActionEvent  event，而在 Lambda 表达式中无需指定类型，程序依然可以编译。这是因为 javac 根据程序的上下文（addActionListener 方法的签名）在后台推断出了参数 event 的类型。这意味着如果参数类型不言而明，则无需显式指定。</p><blockquote><p>尽管与之前相比，Lambda 表达式中的参数需要的样板代码很少，但是 Java 8仍然是一种静态类型语言。为了增加可读性并迁就我们的习惯，声明参数时也可以包括类型信息，而且有时编译器不一定能根据上下文推断出参数的类型！</p></blockquote><h2 id="如何辨别Lambda表达式"><a href="#如何辨别Lambda表达式" class="headerlink" title="如何辨别Lambda表达式"></a>如何辨别Lambda表达式</h2><p>编写 Lambda 表达式的不同形式</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">Runnable noArguments = <span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>); <br><br>Lambda 表达式不包含参数，使用空括号 () 表示没有参数。<br>该 Lambda 表达式实现了 Runnable 接口，该接口也只有一个 run 方法，没有参数，且返回类型为 <span class="hljs-keyword">void</span><br></code></pre></div></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">ActionListener oneArgument = <span class="hljs-keyword">event</span> -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;button clicked&quot;</span>);<br> <br>Lambda 表达式包含且只包含一个参数，可省略参数的括号。<br></code></pre></div></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">Runnable multiStatement = <span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> &#123;<br>System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span>); <br>System.out.println(<span class="hljs-string">&quot; World&quot;</span>); <br>&#125;;<br><br>Lambda 表达式的主体不仅可以是一个表达式，而且也可以是一段代码块，使用大括号（&#123;&#125;）将代码块括起来。<br>该代码块和普通方法遵循的规则别无二致，可以用返回或抛出异常来退出。<br>只有一行代码的 Lambda 表达式也可使用大括号，用以明确 Lambda表达式从何处开始、到哪里结束。<br></code></pre></div></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">BinaryOperator&lt;Long&gt; <span class="hljs-keyword">add</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> y) -&gt; <span class="hljs-keyword">x</span> + y<span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>Lambda 表达式也可以表示包含多个参数的方法。<br>这时就有必要思考怎样去阅读该 Lambda 表达式。<br>这行代码并不是将两个数字相加，而是创建了一个函数，用来计算两个数字相加的结果。<br>变量 <span class="hljs-keyword">add</span> 的类型是 BinaryOperator&lt;Long&gt;，它不是两个数字的和，而是将两个数字相加的那行代码。<br></code></pre></div></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">BinaryOperator&lt;Long&gt; addExplicit = <span class="hljs-function"><span class="hljs-params">(Long x, Long y)</span> -&gt;</span> x + y; <br><br>显式声明参数类型<br></code></pre></div></td></tr></table></figure><blockquote><p>目标类型是指 Lambda 表达式所在上下文环境的类型。<br>比如，将 Lambda 表达式赋值给一个局部变量，或传递给一个方法作为参数，局部变量或方法参数的类型就是 Lambda 表达式的目标类型。</p></blockquote><p>Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。</p><p>Java 中初始化数组时，数组的类型就是根据上下文推断出来的。另一个常见的例子是 null，只有将 null 赋值给一个变量，才能知道它的类型。</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">final String[]<span class="hljs-built_in"> array </span>= &#123; <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span> &#125;;<br>等号右边的代码并没有声明类型，系统根据上下文推断出类型信息<br></code></pre></div></td></tr></table></figure><h2 id="引用值，而不是变量"><a href="#引用值，而不是变量" class="headerlink" title="引用值，而不是变量"></a>引用值，而不是变量</h2><p>需要引用它所在方法里的变量。这时，需要将变量声明为 final</p><p>将变量声明为 final，意味着不能为其重复赋值。同时也意味着在使用 final 变量时，实际上是在使用赋给该变量的一个特定的值。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">匿名内部类中使用 final 局部变量<br><br>final <span class="hljs-built_in">String</span> name = getUserName(); <br>button.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">ActionListener</span>(<span class="hljs-params"></span>)</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">actionPerformed</span>(<span class="hljs-params">ActionEvent event</span>)</span> &#123; <br>        System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + name); <br>    &#125; <br>&#125;);<br></code></pre></div></td></tr></table></figure><p>Java 8 虽然放松了这一限制，可以引用非 final 变量，但是该变量在既成事实上必须是final。</p><p>虽然无需将变量声明为 final，但在 Lambda 表达式中，也无法用作非终态变量。</p><p>如果坚持用作非终态变量，编译器就会报错。</p><p>既成事实上的 final 是指只能给该变量赋值一次。</p><p>换句话说，Lambda 表达式引用的是值，而不是变量。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">Lambda 表达式中引用既成事实上的 final 变量<br>name 就是一个既成事实上的 final 变量<br><br>String name = get<span class="hljs-constructor">UserName()</span>; <br>button.add<span class="hljs-constructor">ActionListener(<span class="hljs-params">event</span> -&gt; System.<span class="hljs-params">out</span>.<span class="hljs-params">println</span>(<span class="hljs-string">&quot;hi &quot;</span> + <span class="hljs-params">name</span>)</span>);<br></code></pre></div></td></tr></table></figure><p>final 就像代码中的线路噪声，省去之后代码更易读。</p><p>当然，有些情况下，显式地使用 final代码更易懂。</p><p>是否使用这种既成事实上的 final 变量，完全取决于个人喜好。</p><p>如果你试图给该变量多次赋值，然后在 Lambda 表达式中引用它，编译器就会报错。</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fortran">未使用既成事实上的 <span class="hljs-keyword">final</span> 变量，导致无法通过编译（ Lambda 表达式中引用的局部变量必须是 <span class="hljs-keyword">final</span> 或既成事实上的 <span class="hljs-keyword">final</span> 变量）<br><br>String <span class="hljs-keyword">name</span> = getUserName(); <br><span class="hljs-keyword">name</span> = formatUserName(<span class="hljs-keyword">name</span>); <br>button.addActionListener(event -&gt; System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;hi &quot;</span> + <span class="hljs-keyword">name</span>));<br><br>显示出错信息：<span class="hljs-keyword">local</span> variables referenced from a Lambda expression must be <span class="hljs-keyword">final</span> or effectively <span class="hljs-keyword">final</span><br></code></pre></div></td></tr></table></figure><h2 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h2><blockquote><p>函数接口是只有一个抽象方法的接口，用作 Lambda 表达式的类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ActionListener 接口：接受 ActionEvent 类型的参数，返回空<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ActionListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventListener</span> </span>&#123; <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent event)</span></span>; <br>&#125;<br><br>ActionListener 只有一个抽象方法：actionPerformed，被用来表示行为：接受一个参数，返回空。<br>记住，由于 actionPerformed 定义在一个接口里，因此 <span class="hljs-keyword">abstract</span> 关键字不是必需的。<br>该接口也继承自一个不具有任何方法的父接口：EventListener。<br></code></pre></div></td></tr></table></figure><p>这就是函数接口，接口中单一方法的命名并不重要，只要方法签名和 Lambda 表达式的类型匹配即可。</p><p>可在函数接口中为参数起一个有意义的名字，增加代码易读性，便于更透彻地理解参数的用途。</p><p>Java一些重要的函数接口</p><table><thead><tr><th align="center">接口</th><th align="center">参数</th><th align="center">返回类型</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">Predicate<T></T></td><td align="center">T</td><td align="center">boolean</td><td align="center">用来判断真假</td></tr><tr><td align="center">Consumer<T></T></td><td align="center">T</td><td align="center">void</td><td align="center">输出一个值</td></tr><tr><td align="center">Function&lt;T,R&gt;</td><td align="center">T</td><td align="center">R</td><td align="center">获取Artist对象的名字</td></tr><tr><td align="center">Supplier<T></T></td><td align="center">None</td><td align="center">T</td><td align="center">工厂方法</td></tr><tr><td align="center">UnaryOperator<T></T></td><td align="center">T</td><td align="center">T</td><td align="center">逻辑非(!)</td></tr><tr><td align="center">BinaryOperator<T></T></td><td align="center">(T,T)</td><td align="center">T</td><td align="center">求两个数的乘积(*)</td></tr></tbody></table><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>Lambda 表达式中的类型推断，实际上是 Java 7 就引入的目标类型推断的扩展。</p><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; oldWordCounts = <span class="hljs-literal">new</span> HashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt;();<br><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Integer</span>&gt; diamondWordCounts = <span class="hljs-literal">new</span> HashMap&lt;&gt;(); <br></code></pre></div></td></tr></table></figure><p>javac 根据 Lambda 表达式上下文信息就能推断出参数的正确类型。</p><p>程序依然要经过类型检查来保证运行的安全性，但不用再显式声明类型罢了。这就是所谓的类型推断。</p><p>用 Lambda 表达式检测一个 Integer 是否大于 5。这实际上是一个 Predicate——用来判断真假的函数接口</p><p><code>Predicate&lt;Integer&gt; atLeast5 = x -&gt; x &gt; 5;</code></p><p>Predicate 也是一个 Lambda 表达式，和前文中 ActionListener 不同的是，它还返回一个值。</p><p>表达式 x  &gt;  5 是 Lambda 表达式的主体。</p><p>这样的情况下，返回值就是Lambda 表达式主体的值。</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Predicate 接口的源码，接受一个对象，返回一个布尔值<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Predicate</span>&lt;<span class="hljs-symbol">T</span>&gt; &#123; <br>    <span class="hljs-built_in">bool</span>ean test(T t); <br>&#125;<br><br>Predicate 只有一个泛型类型的参数，Integer 用于其中。<br>Lambda表达式实现了 Predicate 接口，因此它的单一参数被推断为 Integer 类型。<br>javac 还可检查Lambda 表达式的返回值是不是 <span class="hljs-built_in">bool</span>ean，这正是 Predicate 方法的返回类型。<br></code></pre></div></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">略显复杂的类型推断<br><br>BinaryOperator&lt;Long&gt; addLongs = <span class="hljs-function"><span class="hljs-params">(x, y)</span> -&gt;</span> x + y;<br><br>一个略显复杂的函数接口：BinaryOperator。<br>该接口接受两个参数，返回一个值，参数和值的类型均相同。<br>实例中所用的类型是 Long。<br></code></pre></div></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">没有泛型，代码则通不过编译<br><br>BinaryOperator <span class="hljs-function"><span class="hljs-title">add</span> = <span class="hljs-params">(x, y)</span> -&gt;</span> x + y;<br><br>编译器给出的报错信息如下：<br>Operator <span class="hljs-string">&#x27;&amp; #x002B;&#x27;</span> cannot be applied <span class="hljs-keyword">to</span> java.lang.<span class="hljs-built_in">Object</span>, java.lang.<span class="hljs-built_in">Object</span>.<br></code></pre></div></td></tr></table></figure><p>BinaryOperator 毕竟是一个具有泛型参数的函数接口，该类型既是参数 x 和 y 的类型，也是返回值的类型。<br>上面的例子中并没有给出变量add 的任何泛型信息，给出的正是原始类型的定义。<br>因此，编译器认为参数和返回值都是java.lang.Object 实例。</p><h2 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h2><ul><li>Lambda 表达式是一个匿名方法，将行为像数据一样进行传递。</li><li>Lambda 表达式的常见结构：BinaryOperator<Integer> add = (x, y) → x + y。</Integer></li><li>函数接口指仅具有单个抽象方法的接口，用来表示 Lambda 表达式的类型。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础回顾3</title>
    <link href="/a2cff47e45b4.html"/>
    <url>/a2cff47e45b4.html</url>
    
    <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>流是有起点和终点的有序字节序列</p><p>流的分类</p><ul><li>输入流/输出流：是当前程序为参照点，程序从外面读取数据这是输入流，把程序的数据保存到外面是输出流</li><li>字节流/字符流：如果是以字节为单位处理流中的数据就是字节流，如果是以字符为单位处理流中的数据就是字符流</li><li>节点流/处理流：如果直接从设备（数据源）上读写数据就是节点流，处理流是对节点流的包装</li></ul><p>在程序中从文件里读写数据需要使用IO流.Java定义了相关的流类，在java.io包中，如果这个类是以Stream单词结尾就是流类，如果是以Reader结尾就是字符输入流，以Writer单词结尾就是字符输出流。</p><ul><li>FileInputStream/FileOutputStream<ul><li>以节为单位读写文件内容</li></ul></li><li>FileReader/FileWriter<ul><li>FileReader/FileWriter只能读写与当前环境编码兼容的文本文件</li></ul></li><li>InputStreamReader/OutputStreamwriter<ul><li>如果文本文件与当前环境编码不兼容，使用InputStreamReader/OutputStreamwriter转换流读写</li></ul></li><li>BufferedReader/Bufferedwriter<ul><li>字符缓冲流BufferedReader/Bufferedwriter也是一种处理流，包装流</li></ul></li><li>ObjectinputStream/ObjectOutputStream<ul><li>对象序列化：把对象转换为01二进制序列就是对象序列化</li><li>对象反序列化：把一组01二进制序列转换为对象</li><li>注意：对象序列化/反序列化前提是对象的类要实现Serializable接口，该接口是一个标志性接口，没有任何方法</li></ul></li><li>PrintStream/PrintWriter</li><li>File类<ul><li>读取文件内容使用IO流，操作文件/文件来使用File类，如创建/遍历/删除文件来，查看文件的相关属性等操作</li></ul></li></ul><table><thead><tr><th align="center">File</th><th align="center"></th></tr></thead><tbody><tr><td align="center">getAbsolutePath</td><td align="center">返回绝对路径（从根目录开始的路径）</td></tr><tr><td align="center">getPath</td><td align="center">返回路径</td></tr><tr><td align="center">getParent</td><td align="center">返回上一级文件夹</td></tr><tr><td align="center">getName</td><td align="center">对象名</td></tr><tr><td align="center">length</td><td align="center">文件大小</td></tr><tr><td align="center">exists</td><td align="center">是否存在</td></tr><tr><td align="center">isFile</td><td align="center">是否为文件</td></tr><tr><td align="center">isAbsolute</td><td align="center">是否绝对路径</td></tr><tr><td align="center">lastModified</td><td align="center">最后一次修改的时间</td></tr></tbody></table><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>进程：进程就是操作系统运行的一个程序。</p><p>线程：线程就是进程的一个执行单元，一个进程至少有一个线程，如果进程有多个线程，则它就是多线程应用程序。每个线程都有独立的栈空间。</p><p>主线程：JVM启动主线程，主线程运行main方法</p><p>用户线程：开启的新的线程，也称子线程。</p><p>守护线程：守护线程是为其他线程提供服务的线程，不能独立运行，当JVM中只有守护线程时，JVM会退出。（垃圾回收器就是一个守护线程）</p><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><ul><li><p>继承Thread</p></li><li><p>实现Runnable接口</p></li><li><p>实现Callable接口</p></li></ul><h2 id="线程常用操作"><a href="#线程常用操作" class="headerlink" title="线程常用操作"></a>线程常用操作</h2><table><thead><tr><th align="center">Thread</th><th align="center"></th></tr></thead><tbody><tr><td align="center">activeCount</td><td align="center">当前活动线程的数量</td></tr><tr><td align="center">currentThread</td><td align="center">返回当前线程</td></tr><tr><td align="center">getContextClassLoader</td><td align="center">线程的上下文类加载器</td></tr><tr><td align="center">getId</td><td align="center">返回线程的ID，每个线程都有唯一的id</td></tr><tr><td align="center">getName</td><td align="center">返回线程名称</td></tr><tr><td align="center">getPriority</td><td align="center">返回线程优先级</td></tr><tr><td align="center">getState</td><td align="center">返回线程状态</td></tr><tr><td align="center">interrupt</td><td align="center">中断线程</td></tr><tr><td align="center">interrupted</td><td align="center">测试线程是否被中断</td></tr><tr><td align="center">isAlive</td><td align="center">测试线程是否结束</td></tr><tr><td align="center">isDaemon</td><td align="center">是否守护线程</td></tr><tr><td align="center">isInterrupted</td><td align="center">测试线程是否被中断</td></tr><tr><td align="center">join</td><td align="center">合并线程（加入）</td></tr><tr><td align="center">run</td><td align="center"></td></tr><tr><td align="center">setDaemon</td><td align="center">设置线程为守护线程</td></tr><tr><td align="center">setName</td><td align="center">设置线程名称</td></tr><tr><td align="center">setPriority</td><td align="center">设置优先级</td></tr><tr><td align="center">sleep</td><td align="center">线程休眠</td></tr><tr><td align="center">start</td><td align="center">开启线程</td></tr><tr><td align="center">stop</td><td align="center">终止线程</td></tr><tr><td align="center">toString</td><td align="center"></td></tr><tr><td align="center">yield</td><td align="center">线程让步</td></tr></tbody></table><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p><img src="/a2cff47e45b4/1.png"></p><p>线程优先级</p><ul><li>每个线程都有一个优先级，取值范围：1~10</li><li>所有线程默认的优先级为：5</li><li>优先级越高，获得CPU执行权的记录越大</li></ul><p>线程休眠（Thread.sleep(2000)）</p><ul><li>静态方法，通过类名直接调用</li><li>睡眠的单位是毫秒</li><li>sleep()有受检异常需要预处理</li><li>sleep()方法所在的线程睡眠</li></ul><p>线程中断（t1.interrupt()）</p><ul><li>一般情况下，是把处于睡眠/等待中的线程给中断</li></ul><p>线程让步（Thread.yield()）</p><ul><li>把线程转换为就绪状态，重新争抢CPU执行权</li></ul><p>线程加入（合并，t1.join()）</p><p>终止线程</p><ul><li>想办法让run()</li><li>在线程中设置一个标志，定期判断这个标志是否发生变化，标志发生变化就退出run()方法</li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul><li>线程安全问题。<ul><li>当多个线程同时操作堆区或者方法区的某个数据时，可能会出现数据不一致的现象，称为线程安全问题。</li></ul></li><li>出现线程安全问题怎么办？<ul><li>每个线程都访问自己的局部变量。</li><li>如果多个线程必须同时操作实例变量/静态变量时，可以采用线程同步技术</li></ul></li><li>线程同步技术解决什么问题？<ul><li>当一个线程在操作期间，不允许其他的线程加入。</li><li>某一段代码在某一时刻只能由一个线程执行</li></ul></li></ul><p>同步</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">synchronized（锁对象）&#123;<br>同步代码块<br>&#125;<br>工作原理：<br><span class="hljs-number">1</span>）任意对象都可以作为锁对象，每个对象有一个内置锁<br><span class="hljs-number">2</span>）某一时刻，锁对象最多只能被一个线程持有。<br><span class="hljs-number">3</span>）如果线程获得了锁对象后，会一直持有，直到执行完同步代码块后才释放<br><span class="hljs-number">4</span>）线程要执行同步代码块，必须先获得锁对象。<br>场景描述：假设有线程<span class="hljs-selector-tag">A</span>和线程<span class="hljs-selector-tag">B</span>两个线程都想要执行同步代码块。<br><span class="hljs-number">1</span>）线程<span class="hljs-selector-tag">A</span>获得CPU执行权，获得了锁对象后，开始执行同步代码块<br><span class="hljs-number">2</span>）线程<span class="hljs-selector-tag">A</span>在执行同步代码块期间，CPU执行权被线程<span class="hljs-selector-tag">B</span>抢走了，线程<span class="hljs-selector-tag">A</span>转为就绪状态<br><span class="hljs-number">3</span>）线程<span class="hljs-selector-tag">B</span>获得CPU执行权，也想要执行同步代码块，必须先获得锁对象，现在锁对象被线程<span class="hljs-selector-tag">A</span>持有，线程<span class="hljs-selector-tag">B</span>转到等待锁对象池中进行阻塞<br><span class="hljs-number">4</span>）线程<span class="hljs-selector-tag">A</span>重新获得CPU执行权，执行完同步代码块后释放锁对象。<br><span class="hljs-number">5</span>）等待锁对象池中的线程<span class="hljs-selector-tag">B</span>获得了锁对象，转为就绪状态。<br></code></pre></div></td></tr></table></figure><p>死锁</p><p>当多个线程同步时，获得锁的顺序不一致，导致线程相互等待的情况，称为死锁现象</p><p>如何避免</p><p>保证锁的顺序都一直</p><p><img src="/a2cff47e45b4/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础回顾2</title>
    <link href="/5d0a7171e2be.html"/>
    <url>/5d0a7171e2be.html</url>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>Object类是Java中所有类的根父类，Java中的类要么直接继承Object，要么间接继承Object类</p><p>Java中类的继承是可传递的，Object类中定义的方法，所有的类都能继承到</p><table><thead><tr><th align="center">Object</th><th align="center"></th></tr></thead><tbody><tr><td align="center">clone</td><td align="center">对象克隆</td></tr><tr><td align="center">equals</td><td align="center">用于判断两个对象的内容是否一样</td></tr><tr><td align="center">finalize</td><td align="center">当对象被垃圾回收器回收时，会执行对象的finalize()方法，但是垃圾回收器在什么时候回收这个对象不确定，即这个方法的执行时间不确定，一般不用</td></tr><tr><td align="center">getClass</td><td align="center">返回对象的运行时类对象，可以简单的理解为返回对象的类的字节码文件</td></tr><tr><td align="center">hashCode</td><td align="center">返回对象的哈希码</td></tr><tr><td align="center">notify</td><td align="center">在线程中用于唤醒等待中的线程</td></tr><tr><td align="center">notifyAll</td><td align="center"></td></tr><tr><td align="center">toString</td><td align="center">把对象转换为字符串</td></tr><tr><td align="center">wait</td><td align="center">在多线程中，让线程等待</td></tr></tbody></table><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>Collection存储数据时是单个存储的，只能存储引用类型数据</p><p><code>add(),remove(),contains(),iterator()</code></p><ul><li>list集合<ul><li>有序，可重复</li><li>为每个元素指定了一个索引值</li><li>add(index,0),remove(index),get(index),sort(Comparator)</li><li>ArrayList</li><li>Vector<ul><li>底层是数组，访问快，添加/删除慢</li><li>初始化容量：10</li><li>扩容：ArrayList是1.5倍，Vector是2倍</li><li>Vector是线程安全的，ArrayList不是线程安全的</li></ul></li><li>LinkedList<ul><li>底层是双向链表，添加/删除效率高，访问慢</li></ul></li></ul></li></ul><p>ArrayList应用于以查询访问为主，很少进行添加/删除操作<br>LinkedList应用于频繁的进行添加/删除操作的情况</p><ul><li>Set集合<ul><li>无序，不可重复</li><li>HashSet<ul><li>底层是HashMap</li><li>HashSet就是HashMap键的集合</li></ul></li><li>TreeSet<ul><li>底层是TreeMap</li><li>TreeSet就是TreeMap键的集合</li><li>TreeSet实现了SortedSet接口，可以对元素自然排序，要求元素必须是可比较的<ul><li>创建TreeSet时指定Comparator比较器</li><li>如果没有指定Comparator比较器，元素类需要实现Comparable接口</li></ul></li></ul></li></ul></li></ul><p>List集合与HashSet集合中判断是否同一个元素，需要调用对象的equals()方法，元素的类需要重写equals()方法</p><p>TreeSet集合判断是否同一个元素，根据Comparator/Comparable的比较结果是否为0判断，如果比较结果为0就认为是同一个元素</p><p><img src="/5d0a7171e2be/1.png"></p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li>HashSet底层是HashMap<ul><li>向HashSet中添加元素，实际上是把元素作为键添加到底层的HashMap中</li><li>HashSet就是HashMap键的集合</li></ul></li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li>TreeSet实现了SortedSet接口，可以对元素自然排序，要求集合中的元素必须是可比较的<ul><li>在创建TreeSet时，可以指定Comparator比较器</li><li>没有指定Comparator比较器，要求元素的类实现Comparable接口</li></ul></li><li>TreeSet底层是TreeMap<ul><li>向TreeSett中添加元素，实际上是把元素作为键添加到底层的TreeMap中</li><li>TreeSet就是TreeMap键的集合</li></ul></li></ul><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map是按&lt;键,值&gt;对的形式存储数据的</p><p><img src="/5d0a7171e2be/2.png"></p><table><thead><tr><th align="center">Map</th><th align="center"></th></tr></thead><tbody><tr><td align="center">clear</td><td align="center">清除所有的&lt;键,值&gt;对</td></tr><tr><td align="center">containsKey</td><td align="center">判断是否包含指定的键</td></tr><tr><td align="center">containsValue</td><td align="center">判断是否包含指定的值</td></tr><tr><td align="center">entrySet</td><td align="center">返回Entry的集合，一个&lt;键,值&gt;对就是一个entry</td></tr><tr><td align="center">equals</td><td align="center"></td></tr><tr><td align="center">get</td><td align="center">返回Key对应的值</td></tr><tr><td align="center">isEmpty</td><td align="center">判断是否为空</td></tr><tr><td align="center">ketSet</td><td align="center">返回键的集合</td></tr><tr><td align="center">put</td><td align="center">向Map中添加&lt;键,值&gt;对，如果这个键Key已存在，使用value替换原来的值，Map中的键是不重复的</td></tr><tr><td align="center">putAll</td><td align="center"></td></tr><tr><td align="center">remove</td><td align="center">只要key匹配就删除对应的&lt;键,值&gt;对</td></tr><tr><td align="center">remove</td><td align="center">要求&lt;键,值&gt;都匹配才会删除</td></tr><tr><td align="center">replace</td><td align="center">替换</td></tr><tr><td align="center">size</td><td align="center">返回&lt;键,值&gt;对的数量</td></tr><tr><td align="center">values</td><td align="center">返回值的集合</td></tr></tbody></table><p><img src="/5d0a7171e2be/3.png"></p><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><ul><li>底层都是哈希表（散列表），但是HashTable事线程安全的，HashMap不是线程安全的</li><li>HashMap的父类是AbstractMap,HashTable的父类是Dictionary</li><li>HashMap默认的初始化容量：16，HashTable默认的初始化容量：11</li><li>加载因子：0.75，当&lt;键,值&gt;对的数量大于数组的容量（哈希桶的容量）*加载因子时，数组要扩容</li><li>HashMap扩容默认：2倍大小，HashTable扩容默认：2倍+1</li><li>HashMap的键与值都可以为null，HashTable的键与值都不可以为null</li><li>HashMap在创建时，可以指定一个初始化容量，系统会调整为2的幂次方，为了快速计算出数组的下标</li><li>HashTable也可以指定初始化容量，系统不调整</li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>继承了HashTable</li><li>他的键与值都是String字符串</li><li>常用于设置读取系统属性值</li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>TreeMap实现了SortedMap，可以根据键自然排序，排序原理是二叉树原理</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础回顾1</title>
    <link href="/b17819308f04.html"/>
    <url>/b17819308f04.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java的加载与执行"><a href="#Java的加载与执行" class="headerlink" title="Java的加载与执行"></a>Java的加载与执行</h1><p><img src="/b17819308f04/1.png"></p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><ul><li>btye：Java中最小的数据类型，在内存中占8位(bit)，即1个字节，取值范围-128~127，默认值0</li><li>short：短整型，在内存中占16位，即2个字节，取值范围-32768~32717，默认值0</li><li>int：整型，用于存储整数，在内在中占32位，即4个字节，取值范围-2147483648~2147483647，默认值0</li><li>long：长整型，在内存中占64位，即8个字节-2^63~2^63-1，默认值0L</li><li>float：浮点型，在内存中占32位，即4个字节，用于存储带小数点的数字（与double的区别在于float类型有效小数点只有6~7位），默认值0</li><li>double：双精度浮点型，用于存储带有小数点的数字，在内存中占64位，即8个字节，默认值0</li><li>char：字符型，用于存储单个字符，占16位，即2个字节，取值范围0~65535，默认值为空</li><li>boolean：布尔类型，占1个字节，用于判断真或假（仅有两个值，即true、false），默认值false</li></ul><h1 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h1><ul><li>\n：表示换一行</li><li>\t：表示制表符</li><li>\\：表示输出一个\</li><li>&quot;:表示输出一个”</li><li>&#39;:表示输出一个’</li><li>\u0000：表示unicode转义序列符，输出一个空格</li></ul><h1 id="变量的内存分析"><a href="#变量的内存分析" class="headerlink" title="变量的内存分析"></a>变量的内存分析</h1><ol><li>当运行程序时，在内存中JVM会自动分配空间</li><li>内存中包含：<ul><li>栈：存放方法及方法中的局部变量</li><li>堆：存方法对象</li><li>方法区：代码片段、常量池（常量池中存放的时字符串的值）、静态属性</li></ul></li><li>基本数据类型内存中存放真正的值、引用数据类型内存中存放地址</li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ol><li>算术运算符：+、-、*、/、%、++、–</li><li>链接运算符：+</li><li>赋值运算符：=、+=、-=、*=、/=、%=</li><li>关系运算符：&gt;、&lt;、&gt;=、&lt;=、==</li><li>逻辑运算符：&amp;、|、^、！、&amp;&amp;、||</li><li>三目运算符：条件 ？代码1 ：代码2</li></ol><h1 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h1><p><code>Scanner input = new Scanner(System.in);</code></p><h1 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h1><figure class="highlight isbl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">if</span>(代码<span class="hljs-number">1</span>）&#123;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;<span class="hljs-variable"><span class="hljs-keyword">else</span></span>&#123;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function">或</span><br><span class="hljs-function"><span class="hljs-title">if</span>(代码<span class="hljs-number">1</span>）&#123;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;<span class="hljs-variable"><span class="hljs-keyword">else</span></span> <span class="hljs-title">if</span>(代码<span class="hljs-number">2</span>)&#123;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function">或</span><br><span class="hljs-function"><span class="hljs-title">if</span>(代码<span class="hljs-number">1</span>）&#123;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;<span class="hljs-variable"><span class="hljs-keyword">else</span></span> <span class="hljs-title">if</span>(代码<span class="hljs-number">2</span>)&#123;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;<span class="hljs-variable"><span class="hljs-keyword">else</span></span>&#123;</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;</span><br></code></pre></div></td></tr></table></figure><p>在Java中，字符串比较，使用==比较的时地址是否一致，equals()比较内容</p><h1 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h1><p>表达式 = byte、short、int、char、String（JDK7.0）、枚举</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">switsh</span>(<span class="hljs-params">表达式</span>)</span>&#123;<br><span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>：<span class="hljs-keyword">break</span>；<br><span class="hljs-keyword">case</span> 常量<span class="hljs-number">2</span>： <span class="hljs-keyword">break</span>；<br><span class="hljs-keyword">default</span>：<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(int i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)</span></span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(条件)</span></span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h2><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode"><span class="hljs-keyword">do</span>&#123;<br><br>&#125;<span class="hljs-keyword">while</span><span class="hljs-comment">(条件)</span><br></code></pre></div></td></tr></table></figure><h2 id="跳过及中断"><a href="#跳过及中断" class="headerlink" title="跳过及中断"></a>跳过及中断</h2><figure class="highlight kotlin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-keyword">break</span>；中断<br><span class="hljs-keyword">continue</span>；跳过<br></code></pre></div></td></tr></table></figure><h1 id="方法的内存分析"><a href="#方法的内存分析" class="headerlink" title="方法的内存分析"></a>方法的内存分析</h1><ul><li>当执行该方法时，则方法进栈（压栈）</li><li>当方法执行完毕，则该方法出栈（弹栈），局部变量也随之释放</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主从Mysql设置</title>
    <link href="/3dc224c52b20.html"/>
    <url>/3dc224c52b20.html</url>
    
    <content type="html"><![CDATA[<p>什么是主从，详细百度去吧，我说说我自己的理解</p><ul><li><p>为了灾备</p></li><li><p>均衡负载，提高吞吐量</p></li></ul><h2 id="主备的原理"><a href="#主备的原理" class="headerlink" title="主备的原理"></a>主备的原理</h2><p>主服务器（master） 把数据同步到从服务器（slave）</p><p><img src="/3dc224c52b20/1.jpg"></p><h2 id="下面就是实现了"><a href="#下面就是实现了" class="headerlink" title="下面就是实现了"></a>下面就是实现了</h2><p>首先需要两个mysql（本地测试推荐：phpstudy里面复制两个mysql）</p><h3 id="修改my-ini"><a href="#修改my-ini" class="headerlink" title="修改my.ini"></a>修改my.ini</h3><p>— 唯一 ,要与备机的不同</p><p><code>server_id = 101</code></p><p>— 开启二进制日志</p><p><code>log-bin= mysql-bin</code></p><h3 id="设置服务"><a href="#设置服务" class="headerlink" title="设置服务"></a>设置服务</h3><p>— 设置服务</p><p><code>.\mysqld.exe install MySQL-3310 –defaults-file=”D:\PhpStudy\MySQL\my.ini”</code></p><p>— 删除服务</p><p><code>.\mysqld.exe remove MySQL-3310</code></p><p>— 开启服务</p><p><code>net start MySQL-3310</code></p><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>— 查询连接账户</p><p><code>SELECT USER,HOST from user;</code></p><p>— 开启远程</p><p><code>grant all privileges on . to ‘root’@’%’ identified by ‘root’ with grant option;</code></p><h3 id="创建连接用户（主机配置）"><a href="#创建连接用户（主机配置）" class="headerlink" title="创建连接用户（主机配置）"></a>创建连接用户（主机配置）</h3><p>— CREATE USER ‘使用名’@’备机IP地址’ IDENTIFIED BY ‘密码’;#创建用户</p><p><code>create user ‘usermysql’@’localhost’ identified by ‘123456’;</code></p><p>— GRANT REPLICATION SLAVE ON . TO ‘使用名’@’备机IP地址’;#分配权限</p><p><code>grant replication slave on . to ‘usermysql’@’localhost’;</code></p><p>— 刷新权限</p><p><code>flush privileges;</code></p><p>— 查看master状态</p><p><code>show master status;</code></p><p>创建连接（从机配置）</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">CHANGE MASTER <span class="hljs-keyword">TO</span> <br><span class="hljs-attribute">MASTER_HOST</span>=’localhost’, #主机的IP<br><span class="hljs-attribute">MASTER_PORT</span>=3306,<br><span class="hljs-attribute">MASTER_USER</span>=’usermysql’, #之前创建的那个使用名<br><span class="hljs-attribute">MASTER_PASSWORD</span>=’123456′, #密码<br><span class="hljs-attribute">MASTER_LOG_FILE</span>=’mysql-bin.000001′, #这是主库中show master status;File下的那个值<br><span class="hljs-attribute">MASTER_LOG_POS</span>=446;#这是主库Position下的那个值<br><br>Slave_IO_Running: <span class="hljs-literal">Yes</span><br>Slave_SQL_Running: <span class="hljs-literal">Yes</span> <br>看到这两个都是<span class="hljs-literal">Yes</span>就成了<br></code></pre></div></td></tr></table></figure><p>— 关闭</p><p><code>stop slave;</code></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学车科三</title>
    <link href="/65e4aa78c9e6.html"/>
    <url>/65e4aa78c9e6.html</url>
    
    <content type="html"><![CDATA[<h2 id="开始和结束"><a href="#开始和结束" class="headerlink" title="开始和结束"></a>开始和结束</h2><ul><li>开始的时候绕车一圈（触碰对角的感应器）</li><li>上车先调，座椅，镜子，灯（回拉一下）</li><li>打左灯（下拉）</li><li>等5秒再起步</li></ul><hr><ul><li>结束的时候右灯（上提），慢慢滑倒旁边</li><li>脚踩离合和刹车，空挡-手刹-熄火-解开安全带</li><li>等5秒再下车</li></ul><h2 id="路途中"><a href="#路途中" class="headerlink" title="路途中"></a>路途中</h2><ul><li>起步的时候，需要变道的时候方向盘打轻点，中途方向灯停止了需要在打一次</li><li>需要转向时，先打灯，有虚线在虚线前停下，没有则在斑马先后面停下，3秒看对面车辆，不能再斑马线上停车，一档，转过去</li><li>转向后，有很长直线，加速跑4档，不加速跑5秒，然后换3档</li><li>过直线斑马线-点刹</li><li>需要回车的时候-点刹</li><li>转弯时，最好提前变道</li><li>右转（上提），左转（下拉）</li><li>停车后，一档起步</li></ul><h2 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h2><ul><li>打开前照灯 （位置：左手边 从0扭到灯光）</li><li>远光灯（下推）</li><li>夜间没有路灯不良条件下行驶</li><li>近光灯（轻推，回到默认位置）</li><li>夜间同方向跟车行驶</li><li>夜间会车</li><li>夜间直行通过路口</li><li>夜间在有路灯的情况下行驶</li><li>远近交替灯光（回拉，放下）</li><li>夜间通过急弯、坡路、拱桥</li><li>没有信号灯控制的路口</li><li>夜间超车 </li><li>视廓灯（位置：左手边 扭到中间）+ 紧急报警灯（位置：右手边 红色三角）</li><li>夜间机动车在路上发生故障又难以移动</li></ul>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>学车</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM配置</title>
    <link href="/a21c0106b4dc.html"/>
    <url>/a21c0106b4dc.html</url>
    
    <content type="html"><![CDATA[<h1 id="common"><a href="#common" class="headerlink" title="common"></a>common</h1><h2 id="获取上下文"><a href="#获取上下文" class="headerlink" title="获取上下文"></a>获取上下文</h2><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//获取上下文</span><br><span class="hljs-meta">@Component</span>(<span class="hljs-string">&quot;applicationContextHelper&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextHelper</span> <span class="hljs-title">implements</span> <span class="hljs-title">ApplicationContextAware</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> setApplicationContext(ApplicationContext context) throws BeansException &#123;<br>        applicationContext = context;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-function"><span class="hljs-title">popBean</span>(<span class="hljs-params">Class&lt;T&gt; clazz</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (applicationContext == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(clazz);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-function"><span class="hljs-title">popBean</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name, Class&lt;T&gt; clazz</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (applicationContext == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(name, clazz);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-function"><span class="hljs-title">getApplicationContext</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (applicationContext == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> applicationContext;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * bean里面有那些东西</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">printAllBeans</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">String</span>[] beans = applicationContext.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">String</span> beanName : beans) &#123;<br>            <span class="hljs-keyword">if</span> (beanName.indexOf(<span class="hljs-string">&quot;zuohy&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>                Class&lt;?&gt; beanType = applicationContext.getType(beanName);<br>                System.out.println(<span class="hljs-string">&quot;BeanName:&quot;</span> + beanName);<br>                System.out.println(<span class="hljs-string">&quot;Bean的类型：&quot;</span> + beanType);<br>                System.out.println(<span class="hljs-string">&quot;Bean所在的包：&quot;</span> + beanType.getPackage());<br>                System.out.println(<span class="hljs-string">&quot;Bean：&quot;</span> + ApplicationContextHelper.applicationContext.getBean(beanName));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Http前后监听"><a href="#Http前后监听" class="headerlink" title="Http前后监听"></a>Http前后监听</h2><figure class="highlight aspectj"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs aspectj"><span class="hljs-comment">//Http前后监听</span><br><span class="hljs-meta">@Slf</span>4j<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String START_TIME = <span class="hljs-string">&quot;requestStartTime&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求实现 前</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String url = request.getRequestURL().toString();<br>        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>        log.info(<span class="hljs-string">&quot;request start. url:&#123;&#125;, params:&#123;&#125;&quot;</span>, url, JsonMapper.obj2String(parameterMap));<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        request.setAttribute(START_TIME, start);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 正常请求结束后</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modelAndView</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任何请求结束后</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        String url = request.getRequestURL().toString();<br>        <span class="hljs-keyword">long</span> start = (Long) request.getAttribute(START_TIME);<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        log.info(<span class="hljs-string">&quot;request completion. url:&#123;&#125;, cost:&#123;&#125;&quot;</span>, url, end - start);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Json返回"><a href="#Json返回" class="headerlink" title="Json返回"></a>Json返回</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonData</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">boolean</span> ret;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> msg;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span> data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">JsonData</span>(<span class="hljs-params"><span class="hljs-built_in">boolean</span> ret</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.ret = ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonData <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg, <span class="hljs-built_in">Object</span> <span class="hljs-built_in">object</span></span>)</span> &#123;<br>        JsonData jsonData = <span class="hljs-keyword">new</span> JsonData(<span class="hljs-literal">true</span>);<br>        jsonData.msg = msg;<br>        jsonData.data = <span class="hljs-built_in">object</span>;<br>        <span class="hljs-keyword">return</span> jsonData;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonData <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> <span class="hljs-built_in">object</span></span>)</span> &#123;<br>        JsonData jsonData = <span class="hljs-keyword">new</span> JsonData(<span class="hljs-literal">true</span>);<br>        jsonData.data = <span class="hljs-built_in">object</span>;<br>        <span class="hljs-keyword">return</span> jsonData;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonData <span class="hljs-function"><span class="hljs-title">success</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JsonData(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JsonData <span class="hljs-function"><span class="hljs-title">fail</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg</span>)</span> &#123;<br>        JsonData jsonData = <span class="hljs-keyword">new</span> JsonData(<span class="hljs-literal">false</span>);<br>        jsonData.msg = msg;<br>        <span class="hljs-keyword">return</span> jsonData;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; <span class="hljs-function"><span class="hljs-title">toMap</span>(<span class="hljs-params"></span>)</span>&#123;<br>        HashMap&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; result = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        result.put(<span class="hljs-string">&quot;ret&quot;</span>,ret);<br>        result.put(<span class="hljs-string">&quot;msg&quot;</span>,msg);<br>        result.put(<span class="hljs-string">&quot;data&quot;</span>,data);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">@Slf4j<br>public <span class="hljs-keyword">class</span> SpringExceptionResolver implements HandlerExceptionResolver &#123;<br>    @Override<br>    public ModelAndView resolve<span class="hljs-constructor">Exception(HttpServletRequest <span class="hljs-params">request</span>, HttpServletResponse <span class="hljs-params">response</span>, Object <span class="hljs-params">o</span>, Exception <span class="hljs-params">e</span>)</span> &#123;<br>        String url = request.get<span class="hljs-constructor">RequestURL()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>        ModelAndView mv;<br>        String defaultMsg = <span class="hljs-string">&quot;System error&quot;</span>;<br>        <span class="hljs-comment">// .json .do</span><br>        <span class="hljs-comment">// 要求项目中所有请求json数据,都用.json结尾</span><br>        <span class="hljs-keyword">if</span> (url.ends<span class="hljs-constructor">With(<span class="hljs-string">&quot;.json&quot;</span>)</span>) &#123;<br>            <span class="hljs-keyword">if</span> (e instanceof PermissionException<span class="hljs-operator"> || </span>e instanceof ParamException) &#123;<br>                JsonData result = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JsonData</span>.</span></span>fail(e.get<span class="hljs-constructor">Message()</span>);<br>                mv = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ModelAndView(<span class="hljs-string">&quot;jsonView&quot;</span>, <span class="hljs-params">result</span>.<span class="hljs-params">toMap</span>()</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                log.error(<span class="hljs-string">&quot;unknown json exception---url:&quot;</span>+url,e);<br>                JsonData result = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JsonData</span>.</span></span>fail(defaultMsg);<br>                mv = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ModelAndView(<span class="hljs-string">&quot;jsonView&quot;</span>, <span class="hljs-params">result</span>.<span class="hljs-params">toMap</span>()</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.ends<span class="hljs-constructor">With(<span class="hljs-string">&quot;.do&quot;</span>)</span>) &#123;<span class="hljs-comment">//要求项目中所有请求page页面,都用.do结尾</span><br>            JsonData result = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JsonData</span>.</span></span>fail(defaultMsg);<br>            mv = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ModelAndView(<span class="hljs-string">&quot;exception&quot;</span>, <span class="hljs-params">result</span>.<span class="hljs-params">toMap</span>()</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.error(<span class="hljs-string">&quot;unknown page exception---url:&quot;</span>+url,e);<br>            JsonData result = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JsonData</span>.</span></span>fail(defaultMsg);<br>            mv = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ModelAndView(<span class="hljs-string">&quot;jsonView&quot;</span>, <span class="hljs-params">result</span>.<span class="hljs-params">toMap</span>()</span>);<br>        &#125;<br>        return mv;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h1><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//自定义异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PermissionException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">PermissionException</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">PermissionException</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">PermissionException</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message, Throwable cause</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">PermissionException</span>(<span class="hljs-params">Throwable cause</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-title">PermissionException</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message, Throwable cause, <span class="hljs-built_in">boolean</span> enableSuppression, <span class="hljs-built_in">boolean</span> writableStackTrace</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="校验异常"><a href="#校验异常" class="headerlink" title="校验异常"></a>校验异常</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//校验异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParamException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">ParamException</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">ParamException</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">ParamException</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message, Throwable cause</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">ParamException</span>(<span class="hljs-params">Throwable cause</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cause);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-title">ParamException</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> message, Throwable cause, <span class="hljs-built_in">boolean</span> enableSuppression, <span class="hljs-built_in">boolean</span> writableStackTrace</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause, enableSuppression, writableStackTrace);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="xml及-properties"><a href="#xml及-properties" class="headerlink" title=".xml及.properties"></a><em>.xml及</em>.properties</h1><h2 id="spring-xml"><a href="#spring-xml" class="headerlink" title="spring.xml"></a>spring.xml</h2><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 获取资源文件 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;propertyConfigurer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 忽略无法处理的占位 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ignoreUnresolvablePlaceholders&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;locations&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>classpath:settings.properties<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 数据源 init开始 destroy关闭 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.driverClassName&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 初始大小 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.initialSize&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 最小空余数量 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.minIdle&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 最大连接 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.maxActive&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 最长等待时间 --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;db.maxWait&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;stat&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;proxyFilters&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;wall-filter&quot;</span>/&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- sqlSessionFactory --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath*:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 数据库操作 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn.zuohy.dao&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 事务 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- druid --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stat-filter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.filter.stat.StatFilter&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 发现慢sql --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slowSqlMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3000&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 记录sql --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logSlowSql&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mergeSql&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wall-filter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.wall.WallFilter&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dbType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;config&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;wall-config&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 开启批量 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wall-config&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.wall.WallConfig&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multiStatementAllow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="spring-servlet-xml"><a href="#spring-servlet-xml" class="headerlink" title="spring-servlet.xml"></a>spring-servlet.xml</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- context Bean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 启动包扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.zuohy.controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.zuohy.service&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 启动注解驱动的Spring mvc 功能 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 静态 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/static/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/static/&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 加载上下文获取 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.zuohy.common.ApplicationContextHelper&quot;</span> <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 异常 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.zuohy.common.SpringExceptionResolver&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 格式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.BeanNameViewResolver&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- json --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jsonView&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.json.MappingJackson2JsonView&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- jsp --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="settings-properties"><a href="#settings-properties" class="headerlink" title="settings.properties"></a>settings.properties</h2><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">db.driverClassName</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">db.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/test?serverTimezone=Asia/Shanghai&amp;useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf8&amp;useSSL=<span class="hljs-literal">false</span>&amp;allowMultiQueries=<span class="hljs-literal">true</span><br><span class="hljs-attr">db.username</span>=<br><span class="hljs-attr">db.password</span>=<br><span class="hljs-attr">db.initialSize</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">db.minIdle</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">db.maxActive</span>=<span class="hljs-number">20</span><br><span class="hljs-attr">db.maxWait</span>=<span class="hljs-number">60000</span><br></code></pre></div></td></tr></table></figure><h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;typeAliases&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!----&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/typeAliases&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;plugins&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;plugin interceptor=&quot;&quot;&gt;&lt;/plugin&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;/plugins&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h2><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- log输出形式 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"> [%thread] %-5level %logger - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 日志物理输出 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;appender name=&quot;permission&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;!– 生成路径 –&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;file&gt;$</span></span><span class="hljs-template-variable">&#123;catalina.home&#125;</span><span class="xml"><span class="hljs-comment">/logs/permission.log&lt;/file&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;!– 日志压缩 –&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;FileNamePattern&gt;$</span></span><span class="hljs-template-variable">&#123;catalina.home&#125;</span><span class="xml"><span class="hljs-comment">/logs/permission.%</span></span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml"><span class="hljs-comment">.log.gz&lt;/FileNamePattern&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;/rollingPolicy&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;!– 日志输出样式 –&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;pattern&gt;%d</span></span><span class="hljs-template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="xml"><span class="hljs-comment"> [%thread] %-5level %logger - %msg%n&lt;/pattern&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;/layout&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;/appender&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!----&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;logger name=&quot;xxx&quot; leval=&quot;INFO&quot;&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;permission&quot;/&gt;--&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--&lt;/logger&gt;--&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- TEACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR--&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;WebApp_ID&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>module<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Spring beans 加载 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring mvc 配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Encoding --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- druid --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DruidStatServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>loginUsername<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>loginPassword<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DruidStatServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/sys/druid/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>exclusions<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>*.js,*.css,*.jpg,*.png,*.ico,*.gif,/sys/druid/*<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>DruidWebStatFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 未指定访问index.jsp --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="hljs-tag"><span class="xml"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.zuohy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>module<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>module Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">logback.version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">logback.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mybatis-spring.version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-spring.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.20<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">jackson.varsion</span>&gt;</span>2.9.7<span class="hljs-tag">&lt;/<span class="hljs-name">jackson.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slf4j.varsion</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">slf4j.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tomcat-jsp-api.varsion</span>&gt;</span>8.0.53<span class="hljs-tag">&lt;/<span class="hljs-name">tomcat-jsp-api.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">validation-api.varsion</span>&gt;</span>2.0.1.Final<span class="hljs-tag">&lt;/<span class="hljs-name">validation-api.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hibernate-validator.varsion</span>&gt;</span>6.0.13.Final<span class="hljs-tag">&lt;/<span class="hljs-name">hibernate-validator.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">commons-collections4.varsion</span>&gt;</span>4.2<span class="hljs-tag">&lt;/<span class="hljs-name">commons-collections4.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">commons-codec.varsion</span>&gt;</span>1.11<span class="hljs-tag">&lt;/<span class="hljs-name">commons-codec.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">commons-lang3.varsion</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">commons-lang3.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- spring --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- Spring MVC + Spring web --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- mybatis --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;mybatis.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;mybatis-spring.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- druid --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;druid.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- mysql --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;mysql.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- lombok --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;lombok.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- jackson --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-datatype-guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;jackson.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;jackson.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;jackson.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- logback --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;logback.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;logback.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;slf4j.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- jsp-api --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;tomcat-jsp-api.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- validation --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.validation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>validation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;validation-api.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;hibernate-validator.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- tools --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;commons-collections4.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;commons-codec.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;commons-lang3.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>module<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">failOnMissingWebXml</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">failOnMissingWebXml</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--编译之后包含xml --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h1 id="util"><a href="#util" class="headerlink" title="util"></a>util</h1><h2 id="json和类的转换"><a href="#json和类的转换" class="headerlink" title="json和类的转换"></a>json和类的转换</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//json和类的转换</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonMapper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//config</span><br>        objectMapper.disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);<br>        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="hljs-literal">false</span>);<br>        objectMapper.setFilterProvider(<span class="hljs-keyword">new</span> SimpleFilterProvider().setFailOnUnknownId(<span class="hljs-literal">false</span>));<br>        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">obj2String</span>(<span class="hljs-params">T src</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (src == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> src <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span> ? (<span class="hljs-built_in">String</span>) src : objectMapper.writeValueAsString(src);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.warn(<span class="hljs-string">&quot;parse Object to String exception, error:&#123;&#125;&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-function"><span class="hljs-title">string2Obj</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> src, TypeReference&lt;T&gt; typeReference</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (src == <span class="hljs-literal">null</span> || typeReference == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (T) (typeReference.getType().equals(<span class="hljs-built_in">String</span>.class) ? src : objectMapper.readValue(src, typeReference));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.warn(<span class="hljs-string">&quot;parse String to Object exception, String:&#123;&#125;, TypeReference&lt;T&gt;:&#123;&#125;, error:&#123;&#125;&quot;</span>, src, typeReference, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Validator校验工具"><a href="#Validator校验工具" class="headerlink" title="Validator校验工具"></a>Validator校验工具</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//Validator校验工具</span><br>public <span class="hljs-keyword">class</span> BeanValidator &#123;<br><br>    <span class="hljs-keyword">private</span> static ValidatorFactory validatorFactory = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Validation</span>.</span></span>build<span class="hljs-constructor">DefaultValidatorFactory()</span>;<br><br>    public static &lt;T&gt; Map&lt;String, String&gt; validate(T t, Class... groups) &#123;<br>        Validator validator = validatorFactory.get<span class="hljs-constructor">Validator()</span>;<br>        Set validateResult = validator.validate(t, groups);<br>        <span class="hljs-keyword">if</span> (validateResult.is<span class="hljs-constructor">Empty()</span>) &#123;<br>            return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collections</span>.</span></span>empty<span class="hljs-constructor">Map()</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            LinkedHashMap errors = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Maps</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">LinkedHashMap()</span>;<br>            Iterator iterator = validateResult.iterator<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">while</span> (iterator.has<span class="hljs-constructor">Next()</span>) &#123;<br>                ConstraintViolation violation = (ConstraintViolation) iterator.next<span class="hljs-literal">()</span>;<br>                errors.put(violation.get<span class="hljs-constructor">PropertyPath()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>, violation.get<span class="hljs-constructor">Message()</span>);<br>            &#125;<br>            return errors;<br>        &#125;<br>    &#125;<br><br>    public static Map&lt;String, String&gt; validate<span class="hljs-constructor">List(Collection&lt;?&gt; <span class="hljs-params">collection</span>)</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Preconditions</span>.</span></span>check<span class="hljs-constructor">NotNull(<span class="hljs-params">collection</span>)</span>;<br>        Iterator iterator = collection.iterator<span class="hljs-literal">()</span>;<br>        Map errors;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">if</span> (!iterator.has<span class="hljs-constructor">Next()</span>) &#123;<br>                return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collections</span>.</span></span>empty<span class="hljs-constructor">Map()</span>;<br>            &#125;<br>            Object <span class="hljs-keyword">object</span> = iterator.next<span class="hljs-literal">()</span>;<br>            errors = validate(<span class="hljs-keyword">object</span>, <span class="hljs-keyword">new</span> Class<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>);<br>        &#125; <span class="hljs-keyword">while</span> (errors.is<span class="hljs-constructor">Empty()</span>);<br>        return errors;<br>    &#125;<br><br>    public static Map&lt;String, String&gt; validate<span class="hljs-constructor">Object(Object <span class="hljs-params">first</span>, Object<span class="hljs-operator">...</span> <span class="hljs-params">objects</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (objects != null<span class="hljs-operator"> &amp;&amp; </span>objects.length &gt; <span class="hljs-number">0</span>) &#123;<br>            return validate<span class="hljs-constructor">List(Lists.<span class="hljs-params">asList</span>(<span class="hljs-params">first</span>, <span class="hljs-params">objects</span>)</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            return validate(first, <span class="hljs-keyword">new</span> Class<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  异常处理</span><br><span class="hljs-comment">     * @param param</span><br><span class="hljs-comment">     * @throws ParamException</span><br><span class="hljs-comment">     */</span><br>    public static void check(Object param) throws ParamException &#123;<br>        Map&lt;String, String&gt; map = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanValidator</span>.</span></span>validate<span class="hljs-constructor">Object(<span class="hljs-params">param</span>)</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MapUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">map</span>)</span>) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ParamException(<span class="hljs-params">map</span>.<span class="hljs-params">toString</span>()</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM目录</title>
    <link href="/7434890e6022.html"/>
    <url>/7434890e6022.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>这个是自用的目录结构</p></blockquote><span id="more"></span><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">目录结构<br>│  <span class="hljs-selector-class">.classpath</span><br>│  <span class="hljs-selector-class">.project</span><br>│  list<span class="hljs-selector-class">.txt</span><br>│  pom<span class="hljs-selector-class">.xml</span><br>│  <br>├─<span class="hljs-selector-class">.settings</span><br>│      <span class="hljs-selector-class">.jsdtscope</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.prefs</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.jdt</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.prefs</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.m2e</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.prefs</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.wst</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.component</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.wst</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.project</span><span class="hljs-selector-class">.facet</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.xml</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.wst</span><span class="hljs-selector-class">.jsdt</span><span class="hljs-selector-class">.ui</span><span class="hljs-selector-class">.superType</span><span class="hljs-selector-class">.container</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.wst</span><span class="hljs-selector-class">.jsdt</span><span class="hljs-selector-class">.ui</span><span class="hljs-selector-class">.superType</span><span class="hljs-selector-class">.name</span><br>│      org<span class="hljs-selector-class">.eclipse</span><span class="hljs-selector-class">.wst</span><span class="hljs-selector-class">.validation</span><span class="hljs-selector-class">.prefs</span><br>│      <br>├─<span class="hljs-attribute">src</span><br>│  ├─<span class="hljs-selector-tag">main</span><br>│  │  ├─java<br>│  │  │  └─cn<br>│  │  │      └─zuohy<br>│  │  │          ├─beans<br>│  │  │          ├─common<br>│  │  │          │      ApplicationContextHelper<span class="hljs-selector-class">.java</span><br>│  │  │          │      HttpInterceptor<span class="hljs-selector-class">.java</span><br>│  │  │          │      JsonData<span class="hljs-selector-class">.java</span><br>│  │  │          │      SpringExceptionResolver<span class="hljs-selector-class">.java</span><br>│  │  │          │      <br>│  │  │          ├─controller<br>│  │  │          │      TestController<span class="hljs-selector-class">.java</span><br>│  │  │          │      <br>│  │  │          ├─dao<br>│  │  │          ├─exception<br>│  │  │          │      ParamException<span class="hljs-selector-class">.java</span><br>│  │  │          │      PermissionException<span class="hljs-selector-class">.java</span><br>│  │  │          │      <br>│  │  │          ├─<span class="hljs-attribute">filter</span><br>│  │  │          ├─model<br>│  │  │          ├─param<br>│  │  │          │      TestParam<span class="hljs-selector-class">.java</span><br>│  │  │          │      <br>│  │  │          ├─service<br>│  │  │          └─util<br>│  │  │                  BeanValidator<span class="hljs-selector-class">.java</span><br>│  │  │                  JsonMapper<span class="hljs-selector-class">.java</span><br>│  │  │                  <br>│  │  ├─resources<br>│  │  │  │  logback<span class="hljs-selector-class">.xml</span><br>│  │  │  │  mybatis-config<span class="hljs-selector-class">.xml</span><br>│  │  │  │  settings<span class="hljs-selector-class">.properties</span><br>│  │  │  │  spring-servlet<span class="hljs-selector-class">.xml</span><br>│  │  │  │  spring<span class="hljs-selector-class">.xml</span><br>│  │  │  │  <br>│  │  │  └─mapper<br>│  │  └─webapp<br>│  │      │  index<span class="hljs-selector-class">.jsp</span><br>│  │      │  <br>│  │      ├─static<br>│  │      └─WEB-INF<br>│  │              web<span class="hljs-selector-class">.xml</span><br>│  │              <br>│  └─test<br>│      └─java<br>└─target<br>    ├─classes<br>    │  │  logback<span class="hljs-selector-class">.xml</span><br>    │  │  mybatis-config<span class="hljs-selector-class">.xml</span><br>    │  │  settings<span class="hljs-selector-class">.properties</span><br>    │  │  spring-servlet<span class="hljs-selector-class">.xml</span><br>    │  │  spring<span class="hljs-selector-class">.xml</span><br>    │  │  <br>    │  └─cn<br>    │      └─zuohy<br>    │          ├─beans<br>    │          ├─common<br>    │          │      ApplicationContextHelper<span class="hljs-selector-class">.class</span><br>    │          │      HttpInterceptor<span class="hljs-selector-class">.class</span><br>    │          │      JsonData<span class="hljs-selector-class">.class</span><br>    │          │      SpringExceptionResolver<span class="hljs-selector-class">.class</span><br>    │          │      <br>    │          ├─controller<br>    │          │      TestController<span class="hljs-selector-class">.class</span><br>    │          │      <br>    │          ├─dao<br>    │          ├─exception<br>    │          │      ParamException<span class="hljs-selector-class">.class</span><br>    │          │      PermissionException<span class="hljs-selector-class">.class</span><br>    │          │      <br>    │          ├─<span class="hljs-attribute">filter</span><br>    │          ├─model<br>    │          ├─param<br>    │          │      TestParam<span class="hljs-selector-class">.class</span><br>    │          │      <br>    │          ├─service<br>    │          └─util<br>    │                  BeanValidator<span class="hljs-selector-class">.class</span><br>    │                  JsonMapper<span class="hljs-selector-class">.class</span><br>    │                  <br>    ├─m2e-wtp<br>    │  └─web-resources<br>    │      └─META-INF<br>    │          │  MANIFEST<span class="hljs-selector-class">.MF</span><br>    │          │  <br>    │          └─maven<br>    │              └─cn<span class="hljs-selector-class">.zuohy</span><br>    │                  └─module<br>    │                          pom<span class="hljs-selector-class">.properties</span><br>    │                          pom<span class="hljs-selector-class">.xml</span><br>    │                          <br>    └─test-classes<br><br></code></pre></div></td></tr></table></figure><p><img src="/7434890e6022/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j配置</title>
    <link href="/d8aaf5d37cb0.html"/>
    <url>/d8aaf5d37cb0.html</url>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><span id="more"></span><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">log4j<span class="hljs-selector-class">.rootLogger</span> <br>为总的<br>log4j<span class="hljs-selector-class">.appender</span><span class="hljs-selector-class">.console</span>.Threshold=DEBUG <br>为控制台输出，这个决定着控制台是否输出sql语句<br></code></pre></div></td></tr></table></figure><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">log4j.varsion</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.varsion</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- log4j --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;log4j.varsion&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">### Log4j配置 ### #允许DEBUG级别以上的日志可以打印到控制台和写入日志文件</span><br>log4j.<span class="hljs-attribute">rootLogger</span>=DEBUG,console,file<br><span class="hljs-comment">#-----------------------------------# #1</span><br>定义日志输出目的地为控制台<br>log4j.appender.<span class="hljs-attribute">console</span>=org.apache.log4j.ConsoleAppender<br>log4j.appender.console.<span class="hljs-attribute">Target</span>=System.out<br>log4j.appender.console.<span class="hljs-attribute">Threshold</span>=DEBUG<br><br><span class="hljs-comment">####可以灵活地指定日志输出格式，下面一行是指定具体的格式</span><br><span class="hljs-comment">### #%c: 输出日志信息所属的类目，通常就是所在类的全名 #%m: 输出代码中指定的消息,产生的日志具体信息 #%n:</span><br>输出一个回车换行符，Windows平台为<span class="hljs-string">&quot;/r/n&quot;</span>，Unix平台为<span class="hljs-string">&quot;/n&quot;</span>输出日志信息换行<br>log4j.appender.console.<span class="hljs-attribute">layout</span>=org.apache.log4j.PatternLayout<br><br><span class="hljs-comment">#日志记录格式（根据自己喜好更改）</span><br>log4j.appender.console.layout.<span class="hljs-attribute">ConversionPattern</span>=%d [%-5p] - %c (%F.%M:%L) - %m%n<br><br><span class="hljs-comment">#-----------------------------------# #2</span><br>文件大小到达指定尺寸的时候产生一个新的文件<br>log4j.appender.<span class="hljs-attribute">file</span>=org.apache.log4j.RollingFileAppender<br><br><span class="hljs-comment">#日志文件输出目录</span><br>log4j.appender.file.<span class="hljs-attribute">File</span>=E\:/dummmmmmmy/logs/log.log<br><br><span class="hljs-comment">#定义文件最大大小</span><br>log4j.appender.file.<span class="hljs-attribute">MaxFileSize</span>=1024kb<br><br><span class="hljs-comment">#最多生成多少个文件</span><br>log4j.appender.file.<span class="hljs-attribute">MaxBackupIndex</span>=20<br><br><span class="hljs-comment">###输出日志信息### #写到文件的日志的最低级别</span><br>log4j.appender.file.<span class="hljs-attribute">Threshold</span>=ERROR<br>log4j.appender.file.<span class="hljs-attribute">layout</span>=org.apache.log4j.PatternLayout<br><br><span class="hljs-comment">#日志记录格式（根据自己喜好更改）</span><br>log4j.appender.file.layout.<span class="hljs-attribute">ConversionPattern</span>=%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; [%p] - %c - %F(%L) -%m%n #-----------------------------------#<br><br>log4j.logger.cn.zuohy.websocke.<span class="hljs-attribute">dao</span>=DEBUG --输出SQL语句<br><br><span class="hljs-comment">#3 mybatis 显示SQL语句部分</span><br>log4j.logger.org.<span class="hljs-attribute">mybatis</span>=DEBUG log4j.logger.java.<span class="hljs-attribute">sql</span>=DEBUG<br>log4j.logger.java.sql.<span class="hljs-attribute">Statement</span>=DEBUG<br>log4j.logger.java.sql.<span class="hljs-attribute">ResultSet</span>=DEBUG<br>log4j.logger.java.sql.<span class="hljs-attribute">PreparedStatement</span>=DEBUG<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Log4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rest风格</title>
    <link href="/f6db78db1f90.html"/>
    <url>/f6db78db1f90.html</url>
    
    <content type="html"><![CDATA[<h2 id="RestAction"><a href="#RestAction" class="headerlink" title="RestAction"></a>RestAction</h2><span id="more"></span><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试GET,POST,PUT,DELETE</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * @author dummmmmmmy</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br>@Controller<br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;/rest&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> RestAction &#123;<br><br>@Autowired<br><span class="hljs-keyword">private</span> UserService userService;<br><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/index.action&quot;</span>)</span><br>public String user<span class="hljs-constructor">Action(ModelMap <span class="hljs-params">map</span>)</span> &#123;<br>List&lt;User&gt; listUser = userService.<span class="hljs-built_in">list</span><span class="hljs-constructor">User(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>)</span>;<br>map.put(<span class="hljs-string">&quot;listUser&quot;</span>, listUser);<br>return <span class="hljs-string">&quot;/rest/user&quot;</span>;<br>&#125;<br><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/user.json&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.GET)</span><br>@ResponseBody<br>public Result user<span class="hljs-constructor">JsonGet(@Param(<span class="hljs-string">&quot;userId&quot;</span>)</span> Integer userId) &#123;<br>User user = userService.get(userId);<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Result</span>.</span></span>success<span class="hljs-literal">()</span>.add(<span class="hljs-string">&quot;user&quot;</span>, user);<br>&#125;<br><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/user.json&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.POST)</span><br>@ResponseBody<br>public Result user<span class="hljs-constructor">JsonPost(User <span class="hljs-params">user</span>)</span> &#123;<br><span class="hljs-built_in">int</span> tmp = userService.post(user);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;-------------返回:&quot;</span> + tmp);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;-------------ID:&quot;</span> + user.get<span class="hljs-constructor">UserId()</span>);<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Result</span>.</span></span>success<span class="hljs-literal">()</span>;<br>&#125;<br><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/user.json&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.PUT)</span><br>@ResponseBody<br>public Result user<span class="hljs-constructor">JsonPut(User <span class="hljs-params">user</span>)</span> &#123;<br><span class="hljs-built_in">int</span> tmp = userService.put(user);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;-------------返回:&quot;</span> + tmp);<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Result</span>.</span></span>success<span class="hljs-literal">()</span>;<br>&#125;<br><br>@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/user.json&quot;</span>, <span class="hljs-params">method</span> = RequestMethod.DELETE)</span><br>@ResponseBody<br>public Result user<span class="hljs-constructor">JsonDelete(@Param(<span class="hljs-string">&quot;userId&quot;</span>)</span> Integer userId) &#123;<br><span class="hljs-built_in">int</span> tmp = userService.delete(userId);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;-------------返回:&quot;</span> + tmp);<br>return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Result</span>.</span></span>success<span class="hljs-literal">()</span>;<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">filter</span>&gt;<br>&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;HiddenHttpMethodFilter&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;<br>&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;org.springframework.web.<span class="hljs-keyword">filter</span>.HiddenHttpMethodFilter&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;<br>&lt;/<span class="hljs-keyword">filter</span>&gt;<br>&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">mapping</span>&gt;<br>&lt;<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;HiddenHttpMethodFilter&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;<br>&lt;servlet-<span class="hljs-type">name</span>&gt;SpringMVC&lt;/servlet-<span class="hljs-type">name</span>&gt;<br>&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">mapping</span>&gt;<br></code></pre></div></td></tr></table></figure><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Rest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Socket</title>
    <link href="/0cfa7e337349.html"/>
    <url>/0cfa7e337349.html</url>
    
    <content type="html"><![CDATA[<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SocketAction</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> MyHandler myHandler = <span class="hljs-keyword">new</span> MyHandler();<br><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/login/&#123;username&#125;&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">HttpSession session, <span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;username&quot;</span>) <span class="hljs-built_in">String</span> username</span>)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;login登录接口,username=&quot;</span> + username);<br>session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username);<br>System.out.println(<span class="hljs-string">&quot;login&quot;</span> + session.getAttribute(<span class="hljs-string">&quot;username&quot;</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/websocket/index&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/message&quot;</span>)<br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">boolean</span> flag = myHandler.sendMessageToAllUsers(<span class="hljs-keyword">new</span> TextMessage(<span class="hljs-string">&quot;你好&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;sendMessage&quot;</span> + flag);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="MyHandler"><a href="#MyHandler" class="headerlink" title="MyHandler"></a>MyHandler</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">@Service<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MyHandler extends TextWebSocketHandler &#123;<br>// 在线用户列表<br>private static final Map&lt;String, WebSocketSession&gt; users;<br>// 用户标识<br>private static final String CLIENT_ID = &quot;username&quot;;<br><br>static &#123;<br>users = <span class="hljs-built_in">new</span> HashMap&lt;String, WebSocketSession&gt;();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * webSocket连接</span><br><span class="hljs-comment"> */</span><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterConnectionEstablished(WebSocketSession <span class="hljs-keyword">session</span>) throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;afterConnectionEstablished:成功建立连接&quot;);<br>String username = getClientId(<span class="hljs-keyword">session</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;afterConnectionEstablished:&quot; + username);<br><span class="hljs-keyword">if</span> (username != <span class="hljs-keyword">null</span>) &#123;<br>users.put(username, <span class="hljs-keyword">session</span>);<br><span class="hljs-keyword">session</span>.sendMessage(<span class="hljs-built_in">new</span> TextMessage(&quot;afterConnectionEstablished:成功建立socket连接&quot;));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;afterConnectionEstablished&quot;+username);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;afterConnectionEstablished&quot;+<span class="hljs-keyword">session</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 收到消息</span><br><span class="hljs-comment"> */</span><br>@Override<br>protected <span class="hljs-type">void</span> handleTextMessage(WebSocketSession <span class="hljs-keyword">session</span>, TextMessage message) throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;handleTextMessage&quot;+message.getPayload());<br>WebSocketMessage&lt;?&gt; message1 = <span class="hljs-built_in">new</span> TextMessage(&quot;handleTextMessage:&quot; + message);<br>try &#123;<br><span class="hljs-keyword">session</span>.sendMessage(message1);<br>&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> handleTransportError(WebSocketSession <span class="hljs-keyword">session</span>, Throwable <span class="hljs-keyword">exception</span>) throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">session</span>.isOpen()) &#123;<br><span class="hljs-keyword">session</span>.<span class="hljs-keyword">close</span>();<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;handleTransportError&quot;+&quot;连接出错&quot;);<br>users.remove(getClientId(<span class="hljs-keyword">session</span>));<br>&#125;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterConnectionClosed(WebSocketSession <span class="hljs-keyword">session</span>, CloseStatus status) throws <span class="hljs-keyword">Exception</span> &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;afterConnectionClosed连接已关闭：&quot; + status);<br>users.remove(getClientId(<span class="hljs-keyword">session</span>));<br>&#125;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> supportsPartialMessages() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取用户标识</span><br><span class="hljs-comment"> */</span><br>private String getClientId(WebSocketSession <span class="hljs-keyword">session</span>) &#123;<br>try &#123;<br>String clientId = (String) <span class="hljs-keyword">session</span>.getAttributes().<span class="hljs-keyword">get</span>(CLIENT_ID);<br><span class="hljs-keyword">return</span> clientId;<br>&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送信息给指定用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> sendMessageToUser(String clientId, TextMessage message) &#123;<br><span class="hljs-keyword">if</span> (users.<span class="hljs-keyword">get</span>(clientId) == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;sendMessageToUser + 1&quot;);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>WebSocketSession <span class="hljs-keyword">session</span> = users.<span class="hljs-keyword">get</span>(clientId);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;sendMessage:&quot; + <span class="hljs-keyword">session</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">session</span>.isOpen()) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;sendMessageToUser + 2&quot;);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>try &#123;<br><span class="hljs-keyword">session</span>.sendMessage(message);<br>&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;sendMessageToUser&quot;+e);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 广播信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> sendMessageToAllUsers(TextMessage message) &#123;<br><span class="hljs-type">boolean</span> allSendSuccess = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">Set</span>&lt;String&gt; clientIds = users.keySet();<br>WebSocketSession <span class="hljs-keyword">session</span> = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (String clientId : clientIds) &#123;<br>try &#123;<br><span class="hljs-keyword">session</span> = users.<span class="hljs-keyword">get</span>(clientId);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">session</span>.isOpen()) &#123;<br><span class="hljs-keyword">session</span>.sendMessage(message);<br>&#125;<br>&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>e.printStackTrace();<br>allSendSuccess = <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> allSendSuccess;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="WebSocketConfig"><a href="#WebSocketConfig" class="headerlink" title="WebSocketConfig"></a>WebSocketConfig</h2><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span> <span class="hljs-comment">// 标注在类上，相当于把该类作为spring的xml配置文件中的&lt;beans&gt;，作用为：配置spring容器(应用上下文)</span><br><span class="hljs-variable">@EnableWebSocket</span><br>public class WebSocketConfig implements WebSocketConfigurer &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个WebSocket配置类（这里也可以用配置文件来实现其实），实现接口来配置Websocket请求的路径和拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@Override</span><br>public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) &#123;<br><span class="hljs-comment">// 加个setAllowedOrigins(“*”)不然可能会报403的错误</span><br><span class="hljs-selector-tag">registry</span><span class="hljs-selector-class">.addHandler</span>(myHandler(), <span class="hljs-string">&quot;/myHandler&quot;</span>)<span class="hljs-selector-class">.addInterceptors</span>(new WebSocketInterceptor())<br>;<br>&#125;<br><span class="hljs-comment">//spring4.2以上加 .setAllowedOrigins(&quot;*&quot;)</span><br>@<span class="hljs-selector-tag">Bean</span>(name = <span class="hljs-string">&quot;myHandler&quot;</span>)<br><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">WebSocketHandler</span> <span class="hljs-selector-tag">myHandler</span>() &#123;<br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">MyHandler</span>();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 等价于 &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=</span><br><span class="hljs-comment"> * &quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:websocket=</span><br><span class="hljs-comment"> * &quot;http://www.springframework.org/schema/websocket&quot; xsi:schemaLocation=&quot;</span><br><span class="hljs-comment"> * http://www.springframework.org/schema/beans</span><br><span class="hljs-comment"> * http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-comment"> * http://www.springframework.org/schema/websocket</span><br><span class="hljs-comment"> * http://www.springframework.org/schema/websocket/spring-websocket.xsd&quot;&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * &lt;websocket:handlers&gt;</span><br><span class="hljs-comment"> * &lt;websocket:mapping path=&quot;/myHandler&quot; handler=&quot;myHandler&quot;/&gt;</span><br><span class="hljs-comment"> * &lt;/websocket:handlers&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * &lt;bean id=&quot;myHandler&quot; class=&quot;org.springframework.samples.MyHandler&quot;/&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * &lt;/beans&gt;</span><br><span class="hljs-comment"> */</span><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="WebSocketInterceptor"><a href="#WebSocketInterceptor" class="headerlink" title="WebSocketInterceptor"></a>WebSocketInterceptor</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">@Component //不好说明层面,但是交给Spring来管理<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> WebSocketInterceptor implements HandshakeInterceptor &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建拦截器，用来记录用户标识，便于后面向特定用户发送消息</span><br><span class="hljs-comment"> */</span><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler,<br>Map&lt;String, <span class="hljs-keyword">Object</span>&gt; attributes) throws <span class="hljs-keyword">Exception</span> &#123;<br>// <span class="hljs-keyword">object</span> instanceof <span class="hljs-keyword">class</span><br>// instanceof <span class="hljs-keyword">class</span>可以是<span class="hljs-keyword">object</span>对象的父类，自身类，不能是子类。<br>// 在前两种情况下result的结果为<span class="hljs-keyword">true</span><br>// 最后一种为<span class="hljs-keyword">false</span>。但是<span class="hljs-keyword">class</span>为子类时编译不会报错。运行结果为<span class="hljs-keyword">false</span>。<br><span class="hljs-keyword">if</span> (request instanceof ServletServerHttpRequest) &#123;<br>ServletServerHttpRequest serverHttpRequest = (ServletServerHttpRequest) request;<br>HttpSession <span class="hljs-keyword">session</span> = serverHttpRequest.getServletRequest().getSession();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">session</span> != <span class="hljs-keyword">null</span>) &#123;<br>attributes.put(&quot;username&quot;, <span class="hljs-keyword">session</span>.getAttribute(&quot;username&quot;));<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br>@Override<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler,<br><span class="hljs-keyword">Exception</span> <span class="hljs-keyword">exception</span>) &#123;<br><br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./static/js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 创建一个Socket实例</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&#x27;ws://localhost:8080/websocke/myHandler&#x27;</span>);</span><br><span class="javascript"><span class="hljs-comment">// 打开Socket</span></span><br><span class="javascript">socket.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 发送一个初始化消息</span></span><br><span class="javascript">socket.send(<span class="hljs-string">&#x27;I am the client and I\&#x27;m listening!&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 监听消息</span></span><br><span class="javascript">socket.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Client received a message&#x27;</span>, event);</span><br><span class="javascript">&#125;;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 监听Socket的关闭</span></span><br><span class="javascript">socket.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Client notified socket has closed&#x27;</span>, event);</span><br><span class="javascript">&#125;;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 关闭Socket....</span></span><br><span class="javascript"><span class="hljs-comment">//socket.close()</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebService</title>
    <link href="/51c5316ba4dc.html"/>
    <url>/51c5316ba4dc.html</url>
    
    <content type="html"><![CDATA[<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><span id="more"></span><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!-- WebService --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">cxf.version</span>&gt;</span>2.2.3&lt;/cxf.version</span><br><span class="xml"><span class="hljs-comment">&lt;!-- cxf.WebService --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.cxf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;cxf.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.cxf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;cxf.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-params">&lt;context-param&gt;</span><br><span class="hljs-params">&lt;param-name&gt;</span>contextConfigLocation<span class="hljs-params">&lt;/param-name&gt;</span><br><span class="hljs-params">&lt;param-value&gt;</span>classpath:cxf-*.xml<span class="hljs-params">&lt;/param-value&gt;</span><br><span class="hljs-params">&lt;/context-param&gt;</span><br><span class="hljs-params">&lt;listener&gt;</span><br><span class="hljs-params">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-params">&lt;/listener-class&gt;</span><br><span class="hljs-params">&lt;/listener&gt;</span><br><br><span class="hljs-params">&lt;servlet&gt;</span><br><span class="hljs-params">&lt;servlet-name&gt;</span>CXFServlet<span class="hljs-params">&lt;/servlet-name&gt;</span><br><span class="hljs-params">&lt;servlet-class&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="hljs-params">&lt;/servlet-class&gt;</span><br><span class="hljs-params">&lt;load-on-startup&gt;</span><span class="hljs-number">1</span><span class="hljs-params">&lt;/load-on-startup&gt;</span><br><span class="hljs-params">&lt;/servlet&gt;</span><br><span class="hljs-params">&lt;servlet-mapping&gt;</span><br><span class="hljs-params">&lt;servlet-name&gt;</span>CXFServlet<span class="hljs-params">&lt;/servlet-name&gt;</span><br><span class="hljs-params">&lt;url-pattern&gt;</span><span class="hljs-meta-keyword">/ws/</span>*<span class="hljs-params">&lt;/url-pattern&gt;</span><br><span class="hljs-params">&lt;/servlet-mapping&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="cxf-config-xml"><a href="#cxf-config-xml" class="headerlink" title="cxf-config.xml"></a>cxf-config.xml</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:jaxws</span>=<span class="hljs-string">&quot;http://cxf.apache.org/jaxws&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:jaxrs</span>=<span class="hljs-string">&quot;http://cxf.apache.org/jaxrs&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://cxf.apache.org/jaxrs</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://cxf.apache.org/schemas/jaxrs.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:META-INF/cxf/cxf.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span></span><br><span class="hljs-tag"><span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:META-INF/cxf/cxf-extension-soap.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath*:META-INF/cxf/cxf-servlet.xml&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- id 不能重复 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jaxws:endpoint</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userWebService&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">implementor</span>=<span class="hljs-string">&quot;cn.zuohy.kiking.webservice.UserWebServiceImpl&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">address</span>=<span class="hljs-string">&quot;/userws&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- &lt;jaxrs:server id=&quot;restContainer&quot; address=&quot;/&quot;&gt; &lt;jaxrs:serviceBeans&gt; </span><br><span class="hljs-comment">&lt;ref bean=&quot;roomService&quot; /&gt; &lt;/jaxrs:serviceBeans&gt; &lt;jaxrs:providers&gt; &lt;bean </span><br><span class="hljs-comment">class=&quot;org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider&quot; /&gt; &lt;/jaxrs:providers&gt; </span><br><span class="hljs-comment">&lt;jaxrs:extensionMappings&gt; &lt;entry key=&quot;json&quot; value=&quot;application/json&quot; /&gt; &lt;entry </span><br><span class="hljs-comment">key=&quot;xml&quot; value=&quot;application/xml&quot; /&gt; &lt;/jaxrs:extensionMappings&gt; &lt;/jaxrs:server&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@WebService</span><br>public interface UserWebService &#123;<br><span class="hljs-comment">// 使用@WebMethod注解标注WebServiceI接口中的方法</span><br><span class="hljs-variable">@WebMethod</span><br>List&lt;User&gt; listUser(<span class="hljs-variable">@WebParam</span>(name = <span class="hljs-string">&quot;userName&quot;</span>) String userName, <span class="hljs-variable">@WebParam</span>(name = <span class="hljs-string">&quot;userPass&quot;</span>) String userPass);<br><br><span class="hljs-variable">@WebMethod</span><br>List&lt;User&gt; list();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@WebService</span>(endpointInterface = <span class="hljs-string">&quot;cn.zuohy.kiking.webservice.UserWebService&quot;</span>, serviceName = <span class="hljs-string">&quot;userws&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserWebServiceImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">UserWebService</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> UserService userService;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-function"><span class="hljs-title">listUser</span>(<span class="hljs-params"><span class="hljs-meta">@WebParam</span>(name = <span class="hljs-string">&quot;userName&quot;</span>) <span class="hljs-built_in">String</span> userName,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-meta">@WebParam</span>(name = <span class="hljs-string">&quot;userPass&quot;</span>) <span class="hljs-built_in">String</span> userPass</span>)</span> &#123;<br>List&lt;User&gt; listUser = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 子容器 父容器 矛盾，因为service是在子容器springmvc中生成的，而webService是父容器中生成（先生成）自行获取spring</span><br><span class="hljs-comment">// mvc容器</span><br>userService = (UserService) ContextUtils.getSpringMVCContext().getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>listUser = userService.listUser(userName, userPass);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">//listUser = userService.listUser(userName, userPass);</span><br><span class="hljs-keyword">return</span> listUser;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-function"><span class="hljs-title">list</span>(<span class="hljs-params"></span>)</span> &#123;<br>List&lt;User&gt; list = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 子容器 父容器 矛盾，因为service是在子容器springmvc中生成的，而webService是父容器中生成（先生成）自行获取spring</span><br><span class="hljs-comment">// mvc容器</span><br>userService = (UserService) ContextUtils.getSpringMVCContext().getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>list = userService.list();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">//list = userService.list();</span><br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>提前获取SpringMVC</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextUtils</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WebApplicationContext <span class="hljs-title">getSpringMVCContext</span><span class="hljs-params">()</span> </span>&#123;<br>WebApplicationContext rootWac = ContextLoader.<span class="hljs-built_in">getCurrentWebApplicationContext</span>();<br><span class="hljs-comment">// 获取servletContext</span><br>ServletContext servletContext = rootWac.<span class="hljs-built_in">getServletContext</span>();<br><span class="hljs-comment">// 获取子容器，名字最后对应servlet名字</span><br><span class="hljs-comment">//1.查看spring容器中的对象名称</span><br><span class="hljs-keyword">String</span>[] beannames = rootWac.<span class="hljs-built_in">getBeanDefinitionNames</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">String</span> beanname:beannames)&#123;<br>System.out.<span class="hljs-built_in">println</span>(beanname);<br>&#125;<br><br>System.out.<span class="hljs-built_in">println</span>(servletContext);<br><br><br><span class="hljs-comment">//2.查看servlet中容器列表</span><br>Enumeration&lt;<span class="hljs-keyword">String</span>&gt; servletnames  = servletContext.<span class="hljs-built_in">getAttributeNames</span>();<br><span class="hljs-keyword">while</span>(servletnames.<span class="hljs-built_in">hasMoreElements</span>())&#123;<br>System.out.<span class="hljs-built_in">println</span>(servletnames.<span class="hljs-built_in">nextElement</span>());<br>&#125;<br><br>WebApplicationContext springmvc = WebApplicationContextUtils.<span class="hljs-built_in">getWebApplicationContext</span>(servletContext,<br><span class="hljs-string">&quot;org.springframework.web.servlet.FrameworkServlet.CONTEXT.SpringMVC&quot;</span>);<br><span class="hljs-keyword">return</span> springmvc;<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">apache-cxf-<span class="hljs-number">3.2</span>.<span class="hljs-number">7</span> 代码生成<br><br>生成后：对应接口的实现类和Response添加@XmlType( namespace = <span class="hljs-string">&quot;http://namespace.thats.not.the.same.as.the.generated&quot;</span>)<br><br>信息: Creating Service &#123;http:<span class="hljs-comment">//webservice.websocke.zuohy.cn/&#125;userws from WSDL: http://localhost:8080/websocke/ws/userws?wsdl</span><br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> javax<span class="hljs-selector-class">.xml</span><span class="hljs-selector-class">.ws</span><span class="hljs-selector-class">.soap</span><span class="hljs-selector-class">.SOAPFaultException</span>: Fault occurred while processing.<br>at org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.cxf</span><span class="hljs-selector-class">.jaxws</span><span class="hljs-selector-class">.JaxWsClientProxy</span><span class="hljs-selector-class">.invoke</span>(JaxWsClientProxy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1</span> <span class="hljs-number">43</span>) <span class="hljs-variable">$Proxy37</span><span class="hljs-selector-class">.list</span>(Unknown Source)<br>at com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.proxy</span>.<br><br>这为请求错误<br></code></pre></div></td></tr></table></figure><h2 id="创建WSDL的url-确定命名空间以及文档中服务端口的name属性-然后请求接口"><a href="#创建WSDL的url-确定命名空间以及文档中服务端口的name属性-然后请求接口" class="headerlink" title="创建WSDL的url,确定命名空间以及文档中服务端口的name属性,然后请求接口"></a>创建WSDL的url,确定命名空间以及文档中服务端口的name属性,然后请求接口</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">public void clientsoap() throws Exception &#123;<br><span class="hljs-regexp">//</span> 创建WSDL的URL，注意不是服务地址<br>URL url = new URL(<span class="hljs-string">&quot;http://localhost:8080/websocke/ws/userws?wsdl&quot;</span>);<br><br><span class="hljs-regexp">//</span> 创建服务名称<br><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>.namespaceURI - 命名空间地址 (wsdl文档中的targetNamespace<br><span class="hljs-regexp">//</span> targetNamespace=<span class="hljs-string">&quot;http://webserviceImp.gxa/&quot;</span>)<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.localPart - 服务视图名 (wsdl文档中服务名称，例如&lt;wsdl:service name=<span class="hljs-string">&quot;studentws&quot;</span>&gt;)<br>QName qname = new QName(<span class="hljs-string">&quot;http://webservice.websocke.zuohy.cn/&quot;</span>, <span class="hljs-string">&quot;userws&quot;</span>);<br><br><span class="hljs-regexp">//</span> 创建服务视图<br><span class="hljs-regexp">//</span> 参数解释：<br><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>.wsdlDocumentLocation - wsdl地址<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.serviceName - 服务名称<br>Service service = Service.create(url, qname);<br><span class="hljs-regexp">//</span> 获取服务实现类<br><span class="hljs-regexp">//</span> 参数解释:serviceEndpointInterface - 服务端口(wsdl文档中服务端口的name属性，例如&lt;wsdl:port<br><span class="hljs-regexp">//</span> binding=<span class="hljs-string">&quot;tns:studentwsSoapBinding&quot;</span> name=<span class="hljs-string">&quot;StudentWebServiceImpPort&quot;</span>&gt;)<br>UserWebService userWebService = service.getPort(UserWebService.class);<br><span class="hljs-regexp">//</span> 调用查询方法<br>List&lt;User&gt; users = userWebService.list();<br><span class="hljs-keyword">for</span> (User user : users) &#123;<br>System.out.println(user.getUserId()+<span class="hljs-string">&quot; &quot;</span>+user.getUserName());<br>&#125;<br>&#125;<br><br>public static void main(String[] args) throws Exception &#123;<br>new UserWebServiceApp().clientsoap();<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>WebService</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Could-Not-Find-Result-Map</title>
    <link href="/fe248847c921.html"/>
    <url>/fe248847c921.html</url>
    
    <content type="html"><![CDATA[<p>今天在写代码的时候，写完代码测试的时候发现登陆的时候登陆不进去，然后在登陆的断点处，抛出了这个异常</p><p><code>Could not find result map ren.guard.dao.SysDeptMapper.int</code></p><p>就是在 SysDeptMapper .xml里面本该是</p><p><code>resultType=&#39;int&#39;</code></p><p>写成了</p><p><code>resultMap=&#39;int&#39;</code></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis融入SSM</title>
    <link href="/3e4b52661133.html"/>
    <url>/3e4b52661133.html</url>
    
    <content type="html"><![CDATA[<p>根据个人的理解Redis融入SSM是需要在Spring里面给一个Redis的客户端，通过他来对Redis进行操作</p><span id="more"></span><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">jedis.version</span>&gt;</span>2.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">jedis.version</span>&gt;</span></span><br><span class="xml">     <span class="hljs-comment">&lt;!-- redis客户端 --&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;jedis.version&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="Redis-xml"><a href="#Redis-xml" class="headerlink" title="Redis.xml"></a>Redis.xml</h2><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:settings.properties&quot;</span>/&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jedisPoolConfig&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>/&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shardedJedisPool&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redis.clients.jedis.ShardedJedisPool&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jedisPoolConfig&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redis.clients.jedis.JedisShardInfo&quot;</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;host&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;redis.host&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;port&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;redis.port&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;redis.timeout&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;redis.password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="settings-properties"><a href="#settings-properties" class="headerlink" title="settings.properties"></a>settings.properties</h2><p>没有密码可以去除<property name="”password”" value="”${redis.password}”/">和redis.password=</property></p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">redis.<span class="hljs-attr">host=</span><br>redis.<span class="hljs-attr">port=6379</span><br>redis.<span class="hljs-attr">timeout=300</span><br>redis.<span class="hljs-attr">password=</span><br></code></pre></div></td></tr></table></figure><h2 id="引用和启用客户端"><a href="#引用和启用客户端" class="headerlink" title="引用和启用客户端"></a>引用和启用客户端</h2><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@Service</span>(<span class="hljs-string">&quot;redisPool&quot;</span>)<br><span class="hljs-variable">@Slf4j</span><br>public class RedisPool &#123;<br><br>    <span class="hljs-variable">@Resource</span>(name = <span class="hljs-string">&quot;shardedJedisPool&quot;</span>)<br>    private ShardedJedisPool shardedJedisPool;<br>    <span class="hljs-comment">//只有启用一个客户端</span><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">ShardedJedis</span> <span class="hljs-selector-tag">instance</span>()&#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">shardedJedisPool</span><span class="hljs-selector-class">.getResource</span>();<br>    &#125;<br>    <span class="hljs-comment">//关闭客户端</span><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">safeClose</span>(ShardedJedis shardedJedis)&#123;<br>        <span class="hljs-selector-tag">try</span> &#123;<br>            <span class="hljs-selector-tag">if</span>(shardedJedis!=null)&#123;<br>                <span class="hljs-selector-tag">shardedJedis</span><span class="hljs-selector-class">.close</span>();<br>            &#125;<br>        &#125;<span class="hljs-selector-tag">catch</span> (Exception e)&#123;<br>            <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.error</span>(<span class="hljs-string">&quot;return redis resource exception&quot;</span>,e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="封装客户端一些操作"><a href="#封装客户端一些操作" class="headerlink" title="封装客户端一些操作"></a>封装客户端一些操作</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysCacheService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span>(name = <span class="hljs-string">&quot;redisPool&quot;</span>)<br>    <span class="hljs-keyword">private</span> RedisPool redisPool;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">savaCache</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> toSavedValue, int timeoutSeconds, CacheKeyConstants prefix</span>)</span> &#123;<br>        savaCache(toSavedValue, timeoutSeconds, prefix, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">savaCache</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> toSavedValue, int timeoutSeconds, CacheKeyConstants prefix, <span class="hljs-built_in">String</span>... keys</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (toSavedValue == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        ShardedJedis shardedJedis = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">String</span> cacheKey = generateCacheKey(prefix, keys);<br>            shardedJedis = redisPool.instance();<br>            shardedJedis.setex(cacheKey, timeoutSeconds, toSavedValue);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;save cache exception, prefix:&#123;&#125;,keys:&#123;&#125;&quot;</span>, prefix.name(), JsonMapper.obj2String(keys), e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            redisPool.safeClose(shardedJedis);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getFromCache</span>(<span class="hljs-params">CacheKeyConstants prefix, <span class="hljs-built_in">String</span>... keys</span>)</span> &#123;<br>        ShardedJedis shardedJedis = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">String</span> cacheKey = generateCacheKey(prefix, keys);<br>        <span class="hljs-keyword">try</span> &#123;<br>            shardedJedis = redisPool.instance();<br>            <span class="hljs-built_in">String</span> value = shardedJedis.get(cacheKey);<br>            <span class="hljs-keyword">return</span> value;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;get from cache exception prefix:&#123;&#125;,keys:&#123;&#125;&quot;</span>, prefix.name(), JsonMapper.obj2String(keys), e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            redisPool.safeClose(shardedJedis);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">generateCacheKey</span>(<span class="hljs-params">CacheKeyConstants prefix, <span class="hljs-built_in">String</span>... keys</span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> key = prefix.name();<br>        <span class="hljs-keyword">if</span> (keys != <span class="hljs-literal">null</span> &amp;&amp; keys.length &gt; <span class="hljs-number">0</span>) &#123;<br>            key += <span class="hljs-string">&quot;_&quot;</span> + Joiner.on(<span class="hljs-string">&quot;_&quot;</span>).join(keys);<br>        &#125;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中枚举类CacheKeyConstants</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">CacheKeyConstants</span> </span>&#123;<br><br>    SYSTEM_ACLS,<br><br>    USER_ACLS<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="调用实例："><a href="#调用实例：" class="headerlink" title="调用实例："></a>调用实例：</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">public List&lt;SysAcl&gt; get<span class="hljs-constructor">CurrentUserAclListFromCache()</span>&#123;<br>       <span class="hljs-built_in">int</span> userId = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestHolder</span>.</span></span>get<span class="hljs-constructor">CurrentUser()</span>.get<span class="hljs-constructor">Id()</span>;<br>       String cacheValue = sysCacheService.get<span class="hljs-constructor">FromCache(CacheKeyConstants.USER_ACLS,String.<span class="hljs-params">valueOf</span>(<span class="hljs-params">userId</span>)</span>);<br>       <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Blank(<span class="hljs-params">cacheValue</span>)</span>)&#123;<br>           List&lt;SysAcl&gt; userAclList = get<span class="hljs-constructor">CurrentUserAclList()</span>;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CollectionUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">userAclList</span>)</span>)&#123;<br>               sysCacheService.sava<span class="hljs-constructor">Cache(JsonMapper.<span class="hljs-params">obj2String</span>(<span class="hljs-params">userAclList</span>)</span>,<span class="hljs-number">600</span>,CacheKeyConstants.USER_ACLS,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">userId</span>)</span>);<br>           &#125;<br>           return userAclList;<br>       &#125;<br>       return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JsonMapper</span>.</span></span>string2<span class="hljs-constructor">Obj(<span class="hljs-params">cacheValue</span>, <span class="hljs-params">new</span> TypeReference&lt;List&lt;SysAcl&gt;&gt;()</span> &#123;<br>       &#125;);<br>   &#125;<br></code></pre></div></td></tr></table></figure><h2 id="JsonMapper"><a href="#JsonMapper" class="headerlink" title="JsonMapper"></a>JsonMapper</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">//json和类的转换</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonMapper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//config</span><br>        objectMapper.disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);<br>        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="hljs-literal">false</span>);<br>        objectMapper.setFilterProvider(<span class="hljs-keyword">new</span> SimpleFilterProvider().setFailOnUnknownId(<span class="hljs-literal">false</span>));<br>        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">obj2String</span>(<span class="hljs-params">T src</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (src == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> src <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span> ? (<span class="hljs-built_in">String</span>) src : objectMapper.writeValueAsString(src);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.warn(<span class="hljs-string">&quot;parse Object to String exception, error:&#123;&#125;&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-function"><span class="hljs-title">string2Obj</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> src, TypeReference&lt;T&gt; typeReference</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (src == <span class="hljs-literal">null</span> || typeReference == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (T) (typeReference.getType().equals(<span class="hljs-built_in">String</span>.class) ? src : objectMapper.readValue(src, typeReference));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.warn(<span class="hljs-string">&quot;parse String to Object exception, String:&#123;&#125;, TypeReference&lt;T&gt;:&#123;&#125;, error:&#123;&#125;&quot;</span>, src, typeReference, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Travis-Api</title>
    <link href="/69bb6d2d9142.html"/>
    <url>/69bb6d2d9142.html</url>
    
    <content type="html"><![CDATA[<h1 id="第一次接触留个纪念吧"><a href="#第一次接触留个纪念吧" class="headerlink" title="第一次接触留个纪念吧"></a>第一次接触留个纪念吧</h1><p>postman调试Travis-API</p><p>因为第一次用postman 不知道怎么设置请求头</p><p>需要设置 Headers里面设置请求头以及Token</p><blockquote class="blockquote-center">为了一个爱的人</blockquote>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>日常</tag>
      
      <tag>Travis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/1698a47fcf6a.html"/>
    <url>/1698a47fcf6a.html</url>
    
    <content type="html"><![CDATA[<h1 id="第一次用Hexo，说一下安装和配置遇到的问题"><a href="#第一次用Hexo，说一下安装和配置遇到的问题" class="headerlink" title="第一次用Hexo，说一下安装和配置遇到的问题"></a>第一次用Hexo，说一下安装和配置遇到的问题</h1><ol><li>最好用linux来配置（我选的Ubuntu）尤其是在配置Travis CI的时候遇到了Git Bash无法登陆和加密有问题</li><li>在Ubuntu下安装Ruby遇到了一大堆的问题尤其是OpenSSL，最后选择了<a href="https://gorails.com/setup/ubuntu/18.10#ruby" title="Ruby">Ruby</a></li><li>私库必须登陆，而且链接为<a href="https://travis-ci.com/" title="Ruby">https://travis-ci.com</a></li></ol><h1 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h1><p>这次用的是hexo+next6.0这次配置的也比较完全</p><ol><li>next6.0里面大部分的功能都是有的只需要基础的配置就好了</li><li>这次遇到的最大问题就是gulp压缩网站的时候3.9和4.0的写发不一样</li><li>计数的在混用</li><li>其他看next6.0的配置真的很齐全对源码的更改不用太多，配置好就可以用了</li><li>还有的配置部署，有空再弄了，倒是coding和github两个https不知道为什么就是弄不好，现在还是http先用着</li><li>对访问量做了修改测试一下</li></ol><hr><p>差不多是这些，还有其他问题想到了再来写</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>表格计算</title>
    <link href="/40901eb5b99a.html"/>
    <url>/40901eb5b99a.html</url>
    
    <content type="html"><![CDATA[<p>某次无聊中， atm 发现了一个很老的程序。这个程序的功能类似于 Excel ，它对一个表格进行操作。<br>不妨设表格有 n 行，每行有 m 个格子。<br>每个格子的内容可以是一个正整数，也可以是一个公式。<br>公式包括三种：</p><ol><li>SUM(x1,y1:x2,y2) 表示求左上角是第 x1 行第 y1 个格子，右下角是第 x2 行第 y2 个格子这个矩形内所有格子的值的和。</li><li>AVG(x1,y1:x2,y2) 表示求左上角是第 x1 行第 y1 个格子，右下角是第 x2 行第 y2 个格子这个矩形内所有格子的值的平均数。</li><li>STD(x1,y1:x2,y2) 表示求左上角是第 x1 行第 y1 个格子，右下角是第 x2 行第 y2 个格子这个矩形内所有格子的值的标准差。</li></ol><p>标准差即为方差的平方根。<br>方差就是：每个数据与平均值的差的平方的平均值，用来衡量单个数据离开平均数的程度。</p><p>公式都不会出现嵌套。</p><p>如果这个格子内是一个数，则这个格子的值等于这个数，否则这个格子的值等于格子公式求值结果。</p><p>输入这个表格后，程序会输出每个格子的值。atm 觉得这个程序很好玩，他也想实现一下这个程序。</p><p>「输入格式」<br>第一行两个数 n, m 。<br>接下来 n 行输入一个表格。每行 m 个由空格隔开的字符串，分别表示对应格子的内容。<br>输入保证不会出现循环依赖的情况，即不会出现两个格子 a 和 b 使得 a 的值依赖 b 的值且 b 的值依赖 a 的值。</p><p>「输出格式」<br>输出一个表格，共 n 行，每行 m 个保留两位小数的实数。<br>数据保证不会有格子的值超过 1e6 。</p><p>「样例输入」<br>3 2<br>1 SUM(2,1:3,1)<br>2 AVG(1,1:1,2)<br>SUM(1,1:2,1) STD(1,1:2,2)</p><p>「样例输出」<br>1.00 5.00<br>2.00 3.00<br>3.00 1.48</p><p>「数据范围」<br>对于 30% 的数据，满足： n, m &lt;= 5<br>对于 100% 的数据，满足： n, m &lt;= 50</p><p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 2000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> class Main &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span>[][] form;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>input();<span class="hljs-comment">// 输入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; form.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; form[i].length; j++) &#123;<br>form[i][j] = judgment(form[i][j]);<br>&#125;<br>&#125;<br>out();<br>&#125;<br><br><span class="hljs-comment">// 判断</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> judgment(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<span class="hljs-comment">// 平均数</span><br><span class="hljs-keyword">return</span> average(<span class="hljs-built_in">str</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;S&#x27;</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.charAt(<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;U&#x27;</span>) &#123; <span class="hljs-comment">// 和</span><br><span class="hljs-keyword">return</span> with(<span class="hljs-built_in">str</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 标准差</span><br><span class="hljs-keyword">return</span> standardDeviation(<span class="hljs-built_in">str</span>);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 数</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">String</span>.format(<span class="hljs-string">&quot;%.2f&quot;</span>, Double.parseDouble(<span class="hljs-built_in">str</span>));<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 标准差</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> standardDeviation(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br><span class="hljs-built_in">int</span>[] number = axis(<span class="hljs-built_in">str</span>);<br>ArrayList squ = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">double</span> ave = <span class="hljs-number">0</span>, square = <span class="hljs-number">0</span>, num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = number[<span class="hljs-number">0</span>]; i &lt;= number[<span class="hljs-number">2</span>]; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = number[<span class="hljs-number">1</span>]; j &lt;= number[<span class="hljs-number">3</span>]; j++) &#123;<br>ave += Double.parseDouble(judgment(form[i][j]));<br>squ.<span class="hljs-built_in">add</span>(Double.parseDouble(judgment(form[i][j])));<br>num++;<br>&#125;<br>&#125;<br>ave = ave / num;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; squ.<span class="hljs-built_in">size</span>(); i++) &#123;<br>square += (squ.<span class="hljs-built_in">get</span>(i) - ave) * (squ.<span class="hljs-built_in">get</span>(i) - ave);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">String</span>.format(<span class="hljs-string">&quot;%.2f&quot;</span>, Math.<span class="hljs-built_in">sqrt</span>(square / num));<br>&#125;<br><br><span class="hljs-comment">// 和</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> with(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br><span class="hljs-built_in">int</span>[] number = axis(<span class="hljs-built_in">str</span>);<br><span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = number[<span class="hljs-number">0</span>]; i &lt;= number[<span class="hljs-number">2</span>]; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = number[<span class="hljs-number">1</span>]; j &lt;= number[<span class="hljs-number">3</span>]; j++) &#123;<br>sum += Double.parseDouble(judgment(form[i][j]));<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">String</span>.format(<span class="hljs-string">&quot;%.2f&quot;</span>, sum);<br>&#125;<br><br><span class="hljs-comment">// 平均数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> average(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br><span class="hljs-built_in">int</span>[] number = axis(<span class="hljs-built_in">str</span>);<br><span class="hljs-keyword">double</span> ave = <span class="hljs-number">0</span>, num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = number[<span class="hljs-number">0</span>]; i &lt;= number[<span class="hljs-number">2</span>]; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = number[<span class="hljs-number">1</span>]; j &lt;= number[<span class="hljs-number">3</span>]; j++) &#123;<br>ave += Double.parseDouble(judgment(form[i][j]));<br>num++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">String</span>.format(<span class="hljs-string">&quot;%.2f&quot;</span>, ave / num);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] axis(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br><span class="hljs-built_in">int</span>[] number = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">4</span>];<br><span class="hljs-built_in">int</span> a = <span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&quot;(&quot;</span>);<br><span class="hljs-built_in">int</span> b = <span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-built_in">int</span> c = <span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&quot;:&quot;</span>);<br><span class="hljs-built_in">int</span> d = <span class="hljs-built_in">str</span>.lastIndexOf(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-built_in">int</span> e = <span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-keyword">String</span> x1 = <span class="hljs-built_in">str</span>.substring(a + <span class="hljs-number">1</span>, b);<br><span class="hljs-keyword">String</span> y1 = <span class="hljs-built_in">str</span>.substring(b + <span class="hljs-number">1</span>, c);<br><span class="hljs-keyword">String</span> x2 = <span class="hljs-built_in">str</span>.substring(c + <span class="hljs-number">1</span>, d);<br><span class="hljs-keyword">String</span> y2 = <span class="hljs-built_in">str</span>.substring(d + <span class="hljs-number">1</span>, e);<br>number[<span class="hljs-number">0</span>] = Integer.parseInt(x1) - <span class="hljs-number">1</span>;<br>number[<span class="hljs-number">1</span>] = Integer.parseInt(y1) - <span class="hljs-number">1</span>;<br>number[<span class="hljs-number">2</span>] = Integer.parseInt(x2) - <span class="hljs-number">1</span>;<br>number[<span class="hljs-number">3</span>] = Integer.parseInt(y2) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> number;<br>&#125;<br><br><span class="hljs-comment">// 输入</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> input() &#123;<br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><span class="hljs-built_in">int</span> row = scanner.nextInt();<br><span class="hljs-built_in">int</span> col = scanner.nextInt();<br>form = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[row][col];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; form.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; form[i].length; j++) &#123;<br>form[i][j] = scanner.next();<br>&#125;<br>&#125;<br>scanner.close();<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> out() &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; form.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; form[i].length; j++) &#123;<br>System.out.<span class="hljs-built_in">print</span>(form[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>穿越雷区</title>
    <link href="/9865be07681a.html"/>
    <url>/9865be07681a.html</url>
    
    <content type="html"><![CDATA[<p>X星的坦克战车很奇怪，它必须交替地穿越正能量辐射区和负能量辐射区才能保持正常运转，否则将报废。<br>某坦克需要从A区到B区去（A，B区本身是安全区，没有正能量或负能量特征），怎样走才能路径最短？</p><p>已知的地图是一个方阵，上面用字母标出了A，B区，其它区都标了正号或负号分别表示正负能量辐射区。<br>例如：<br>A + – + –<br>– + – – +<br>– + + + –</p><ul><li>– + – +<br>B + – + –</li></ul><p>坦克车只能水平或垂直方向上移动到相邻的区。</p><p>数据格式要求：</p><p>输入第一行是一个整数n，表示方阵的大小， 4&lt;=n&lt;100<br>接下来是n行，每行有n个数据，可能是A，B，+，-中的某一个，中间用空格分开。<br>A，B都只出现一次。</p><p>要求输出一个整数，表示坦克从A区到B区的最少移动步数。<br>如果没有方案，则输出-1</p><p>例如：<br>用户输入：<br>5<br>A + – + –<br>– + – – +<br>– + + + –</p><ul><li>– + – +<br>B + – + –</li></ul><p>则程序应该输出：<br>10</p><p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 2000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span>[][] figure;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] start = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> min = Integer.MAX_VALUE;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] direction = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">String</span>[][] image = <span class="hljs-built_in">input</span>();<br><span class="hljs-built_in">initial</span>(image, start[<span class="hljs-number">0</span>], start[<span class="hljs-number">1</span>]);<br>System.out.<span class="hljs-built_in">println</span>(min);<br>&#125;<br><br><span class="hljs-comment">// 开始</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initial</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[][] image, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-comment">// 判断四个方向</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//下一步的坐标 int x2 = x + direction[i]; int y2 = y + direction[i + 1]; if (x2 &gt;= 0 &amp;&amp; x2 &lt; image.length &amp;&amp; y2 &gt;= 0 &amp;&amp; y2 &lt; image.length) &#123; //结束 if (figure[x][y].equals(&quot;B&quot;) || count &gt; min) &#123;</span><br><span class="hljs-keyword">if</span> (min &gt; count) &#123;<br>min = count;<br>&#125;<br><span class="hljs-comment">// 找到退一步</span><br>count--;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//相反，没走过</span><br><span class="hljs-keyword">if</span> (!(figure[x][y].<span class="hljs-built_in">equals</span>(figure[x2][y2])) &amp;&amp; !(image[x2][y2].<span class="hljs-built_in">equals</span>(<span class="hljs-string">&quot;0&quot;</span>))) &#123;<br>image[x][y] = <span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-comment">//out(image);</span><br>count++;<br><span class="hljs-built_in">initial</span>(image, x2, y2);<br>image[x][y] = figure[x][y];<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 找不到退一步</span><br>count--;<br>&#125;<br><span class="hljs-comment">//测试显示</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[][] image)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; image.length; i++) &#123;<br>System.out.<span class="hljs-built_in">println</span>(Arrays.<span class="hljs-built_in">toString</span>(image[i]));<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>();<br>&#125;<br><br><span class="hljs-comment">// 输入</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span>[][] <span class="hljs-built_in">input</span>() &#123;<br>Scanner scanner = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br><span class="hljs-keyword">int</span> number = scanner.<span class="hljs-built_in">nextInt</span>();<br>figure = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[number][number];<br><span class="hljs-keyword">String</span>[][] image = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[number][number];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; number; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; number; j++) &#123;<br>image[i][j] = figure[i][j] = scanner.<span class="hljs-built_in">next</span>();<br><br><span class="hljs-keyword">if</span> (figure[i][j].<span class="hljs-built_in">equals</span>(<span class="hljs-string">&quot;A&quot;</span>)) &#123;<br>start[<span class="hljs-number">0</span>] = i;<br>start[<span class="hljs-number">1</span>] = j;<br>&#125;<br>&#125;<br>&#125;<br>scanner.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">return</span> image;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>显示二叉树</title>
    <link href="/083b7d32f844.html"/>
    <url>/083b7d32f844.html</url>
    
    <content type="html"><![CDATA[<p>排序二叉树的特征是：<br>某个节点的左子树的所有节点值都不大于本节点值。<br>某个节点的右子树的所有节点值都不小于本节点值。</p><p>为了能形象地观察二叉树的建立过程，小明写了一段程序来显示出二叉树的结构来。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>BiTree tree = <span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">500</span>);<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">200</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">509</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">100</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">250</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">507</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">600</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">650</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">450</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">510</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">440</span>));<br>tree.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> BiTree(<span class="hljs-number">220</span>));<br>tree.show();<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BiTree</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> v;<br><span class="hljs-keyword">private</span> BiTree l;<span class="hljs-comment">// 左</span><br><span class="hljs-keyword">private</span> BiTree r;<span class="hljs-comment">// 右</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BiTree</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> v</span>)</span> &#123;<br><span class="hljs-keyword">this</span>.v = v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">BiTree the</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (the.v &lt; v) &#123;<br><span class="hljs-keyword">if</span> (l == <span class="hljs-literal">null</span>)<br>l = the;<br><span class="hljs-keyword">else</span><br>l.<span class="hljs-keyword">add</span>(the);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>)<br>r = the;<br><span class="hljs-keyword">else</span><br>r.<span class="hljs-keyword">add</span>(the);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getHeight</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">int</span> h = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">int</span> hl = l == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : l.getHeight();<br><span class="hljs-built_in">int</span> hr = r == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : r.getHeight();<br><span class="hljs-keyword">return</span> h + Math.max(hl, hr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getWidth</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">int</span> w = (<span class="hljs-string">&quot;&quot;</span> + v).length();<br><span class="hljs-keyword">if</span> (l != <span class="hljs-literal">null</span>)<br>w += l.getWidth();<br><span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>)<br>w += r.getWidth();<br><span class="hljs-keyword">return</span> w;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">char</span>[][] buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[getHeight()][getWidth()];<br>printInBuf(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>showBuf(buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showBuf</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[][] x</span>)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; x.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; x[i].length; j++)<br>System.<span class="hljs-keyword">out</span>.print(x[i][j] == <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27; &#x27;</span> : x[i][j]);<br>System.<span class="hljs-keyword">out</span>.println();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printInBuf</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[][] buf, <span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y</span>)</span> &#123;<br>String sv = <span class="hljs-string">&quot;&quot;</span> + v;<br><span class="hljs-built_in">int</span> p1 = l == <span class="hljs-literal">null</span> ? x : l.getRootPos(x);<br><span class="hljs-built_in">int</span> p2 = getRootPos(x);<br><span class="hljs-built_in">int</span> p3 = r == <span class="hljs-literal">null</span> ? p2 : r.getRootPos(p2 + sv.length());<br>buf[y][p2] = <span class="hljs-string">&#x27;|&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = p1; i &lt;= p3; i++)<br>buf[y + <span class="hljs-number">1</span>][i] = <span class="hljs-string">&#x27;-&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; sv.length(); i++)<br>buf[y + <span class="hljs-number">1</span>][p2 + i] = sv.charAt(i);<span class="hljs-comment">// 填空位置</span><br><span class="hljs-keyword">if</span> (p1 &lt; p2) buf[y + <span class="hljs-number">1</span>][p1] = <span class="hljs-string">&#x27;/&#x27;</span>; <span class="hljs-keyword">if</span> (p3 &gt; p2)<br>buf[y + <span class="hljs-number">1</span>][p3] = <span class="hljs-string">&#x27;\\&#x27;</span>;<br><span class="hljs-keyword">if</span> (l != <span class="hljs-literal">null</span>)<br>l.printInBuf(buf, x, y + <span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>)<br>r.printInBuf(buf, p2 + sv.length(), y + <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getRootPos</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x</span>)</span> &#123;<br><span class="hljs-keyword">return</span> l == <span class="hljs-literal">null</span> ? x : x + l.getWidth();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五星填数</title>
    <link href="/c6c507ac38c4.html"/>
    <url>/c6c507ac38c4.html</url>
    
    <content type="html"><![CDATA[<p>如【图1.png】的五星图案节点填上数字：1~12，除去7和11。<br>要求每条直线上数字和相等。</p><p>如图就是恰当的填法。</p><p>请你利用计算机搜索所有可能的填法有多少种。<br>注意：旋转或镜像后相同的算同一种填法。</p><p>请提交表示方案数目的整数，不要填写任何其它内容。</p><p><img src="/c6c507ac38c4/1.png"></p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Main &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> connt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span> &#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br><br>Assignment(<span class="hljs-number">0</span>);<br>System.out.<span class="hljs-keyword">println</span>(connt/<span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> Assignment(<span class="hljs-keyword">int</span> n) &#123;<br><span class="hljs-keyword">if</span> (with(num) &amp;&amp; n == <span class="hljs-number">10</span>) &#123;<br>System.out.<span class="hljs-keyword">println</span>(Arrays.toString(num));<br>connt++;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &lt; num.length; i++) &#123;<br><span class="hljs-keyword">int</span> tmp = num[i];<br>num[i] = num[n];<br>num[n] = tmp;<br>Assignment(n + <span class="hljs-number">1</span>);<br><span class="hljs-comment">//回溯</span><br><span class="hljs-keyword">int</span> temp1 = num[i];<br>num[i] = num[n];<br>num[n] = temp1;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> with(<span class="hljs-keyword">int</span>[] <span class="hljs-keyword">Times</span>) &#123;<br><span class="hljs-keyword">int</span> tmp = <span class="hljs-keyword">Times</span>[<span class="hljs-number">0</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">5</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">6</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-keyword">Times</span>[<span class="hljs-number">1</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">6</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">7</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">3</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-keyword">Times</span>[<span class="hljs-number">2</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">7</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">8</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">4</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-keyword">Times</span>[<span class="hljs-number">3</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">8</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">9</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span> (tmp == <span class="hljs-keyword">Times</span>[<span class="hljs-number">4</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">9</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">5</span>] + <span class="hljs-keyword">Times</span>[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分机号</title>
    <link href="/7c039cfe73f4.html"/>
    <url>/7c039cfe73f4.html</url>
    
    <content type="html"><![CDATA[<p>X老板脾气古怪，他们公司的电话分机号都是3位数，老板规定，所有号码必须是降序排列，且不能有重复的数位。比如：</p><p>751,520,321 都满足要求，而，<br>766,918,201 就不符合要求。</p><p>现在请你计算一下，按照这样的规定，一共有多少个可用的3位分机号码？</p><p>请直接提交该数字，不要填写任何多余的内容。</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Main &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">9</span>; i &gt;= <span class="hljs-number">0</span>; i<span class="hljs-comment">--) &#123;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">9</span>; j &gt;= <span class="hljs-number">0</span>; j<span class="hljs-comment">--) &#123;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">9</span>; k &gt;= <span class="hljs-number">0</span>; k<span class="hljs-comment">--) &#123;</span><br><span class="hljs-keyword">if</span> (i &gt; j &amp;&amp; j &gt; k) &#123;<br>num++;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(num);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成回文数</title>
    <link href="/eea72e773574.html"/>
    <url>/eea72e773574.html</url>
    
    <content type="html"><![CDATA[<p>所谓回文数就是左右对称的数字，比如：<br>585,5885,123321…<br>当然，单个的数字也可以算作是对称的。</p><p>小明发现了一种生成回文数的方法：<br>比如，取数字19，把它与自己的翻转数相加：<br>19 + 91 = 110，如果不是回文数，就再进行这个过程：<br>110 + 011 = 121 这次是回文数了。</p><p>200以内的数字中，绝大多数都可以在30步以内变成回文数，只有一个数字很特殊，就算迭代了1000次，它还是顽固地拒绝回文！</p><p>请你提交该顽固数字，不要填写任何多余的内容。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">import java.math.BigInteger;<br><br>public <span class="hljs-keyword">class</span> Main &#123;<br><br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>StringBuffer buffer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer()</span>;<br>Long i = <span class="hljs-number">10L</span>;<br>BigInteger tmp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigInteger(<span class="hljs-params">i</span> + <span class="hljs-string">&quot;&quot;</span>)</span>;<br><span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">200</span>) &#123;<br><span class="hljs-keyword">while</span> (!is<span class="hljs-constructor">HuiWen(<span class="hljs-params">tmp</span>)</span><span class="hljs-operator"> &amp;&amp; </span>i &lt;= <span class="hljs-number">200</span>) &#123;<br>buffer.append(tmp);<br><span class="hljs-comment">// Long tmp2 = Long.valueOf(buffer.reverse().toString().trim());</span><br><span class="hljs-comment">// tmp = tmp + tmp2;</span><br>BigInteger big = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigInteger(<span class="hljs-params">buffer</span>.<span class="hljs-params">toString</span>()</span>);<br>BigInteger big2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigInteger(<span class="hljs-params">buffer</span>.<span class="hljs-params">reverse</span>()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>tmp = big.add(big2);<br>buffer.delete(<span class="hljs-number">0</span>, buffer.length<span class="hljs-literal">()</span>);<br>count++;<br><br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">9999</span>) &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(i);<br>break;<br>&#125;<br>&#125;<br>count = <span class="hljs-number">0</span>;<br>i++;<br>tmp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigInteger(<span class="hljs-params">i</span> + <span class="hljs-string">&quot;&quot;</span>)</span>;<br>buffer.delete(<span class="hljs-number">0</span>, buffer.length<span class="hljs-literal">()</span>);<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> static boolean is<span class="hljs-constructor">HuiWen(BigInteger <span class="hljs-params">tmp</span>)</span> &#123;<br>StringBuffer buffer1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer()</span>;<br>StringBuffer buffer2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer()</span>;<br>buffer1.append(tmp);<br>buffer2.append(tmp).reverse<span class="hljs-literal">()</span>;<br>boolean flag = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// int i = 0;</span><br><span class="hljs-comment">// while (buffer1.length() / 2 &gt; i) &#123;</span><br><span class="hljs-comment">// if (!(buffer1.charAt(i) == buffer2.charAt(i))) &#123;</span><br><span class="hljs-comment">// flag = false;</span><br><span class="hljs-comment">// break;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// i++;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">if</span> (buffer1.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.equals(buffer2.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>)) &#123;<br>flag = <span class="hljs-literal">true</span>;<br>&#125;<br>return flag;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>空心菱形</title>
    <link href="/d149732b2cfe.html"/>
    <url>/d149732b2cfe.html</url>
    
    <content type="html"><![CDATA[<p>小明刚刚开发了一个小程序，可以打印出任意规模的空心菱形，规模为6时，如下图：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">****</span><span class="hljs-strong">** **</span><span class="hljs-strong">****</span><br><span class="hljs-strong">****</span><span class="hljs-emphasis">* <span class="hljs-strong">****</span>*</span><br><span class="hljs-strong">****</span>  <span class="hljs-strong">****</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*   <span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">**    **</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">*</span>           <span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">**         **</span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">**<span class="hljs-emphasis">*   <span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span>  <span class="hljs-strong">****</span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span>*</span> **</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">****</span><span class="hljs-strong">** **</span><span class="hljs-strong">****</span></span></span></span></span></span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">（如果有对齐问题，参看【图1.png】）</span></span></span></span></span></span></span></span><br></code></pre></div></td></tr></table></figure><p>他一高兴，踢掉了电源，最后一次修改没有保存…..<br>毛病出在划线的部分。<br>请你帮助小明分析程序，填写划线部分缺失的代码。</p><p><img src="/d149732b2cfe/1.png"></p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-title">pr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">String</span> s = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>s += <span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>s = <span class="hljs-string">&quot;*&quot;</span> + s + <span class="hljs-string">&quot;*&quot;</span>;<br><span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">String</span> s = <span class="hljs-built_in">pr</span>(<span class="hljs-number">1</span>, n * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">String</span> s2 = s;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>s = <span class="hljs-built_in">pr</span>(<span class="hljs-number">1</span> + i, n * <span class="hljs-number">2</span> - i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;\n&quot;</span>; <span class="hljs-comment">// 填空位置</span><br>s2 = s + s2 + s;<br>&#125;<br><br>System.out.<span class="hljs-built_in">print</span>(s2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-built_in">f</span>(<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇怪的数列</title>
    <link href="/f563a9569919.html"/>
    <url>/f563a9569919.html</url>
    
    <content type="html"><![CDATA[<p>从X星截获一份电码，是一些数字，如下：<br>13<br>1113<br>3113<br>132113<br>1113122113<br>….</p><p>YY博士经彻夜研究，发现了规律：<br>第一行的数字随便是什么，以后每一行都是对上一行“读出来”<br>比如第2行，是对第1行的描述，意思是：1个1，1个3，所以是：1113<br>第3行，意思是：3个1,1个3，所以是：3113</p><p>请你编写一个程序，可以从初始数字开始，连续进行这样的变换。</p><p>数据格式：</p><p>第一行输入一个数字组成的串，不超过100位<br>第二行，一个数字n，表示需要你连续变换多少次，n不超过20</p><p>输出一个串，表示最后一次变换完的结果。</p><p>例如：<br>用户输出：<br>5<br>7</p><p>则程序应该输出：<br>13211321322115</p><p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 1000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>Scanner scanner = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br><span class="hljs-keyword">String</span> input = scanner.<span class="hljs-built_in">next</span>();<br><span class="hljs-keyword">int</span> num = scanner.<span class="hljs-built_in">nextInt</span>();<br><span class="hljs-keyword">String</span> number = <span class="hljs-built_in">list</span>(input);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; num; i++) &#123;<br>number = <span class="hljs-built_in">list</span>(number);<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(number);<br>scanner.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-title">list</span><span class="hljs-params">(<span class="hljs-keyword">String</span> input)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> tmp;<br><span class="hljs-keyword">String</span> index = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span> (i &lt; input.<span class="hljs-built_in">length</span>()) &#123;<br>tmp = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">flag</span>(i, input)) &#123;<br>i++;<br>tmp++;<br>&#125;<br>index = index + tmp + <span class="hljs-keyword">String</span>.<span class="hljs-built_in">valueOf</span>(input.<span class="hljs-built_in">charAt</span>(i));<br>i++;<br>&#125;<br><span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">flag</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">String</span> input)</span> </span>&#123;<br><span class="hljs-keyword">String</span> valueOf = <span class="hljs-keyword">String</span>.<span class="hljs-built_in">valueOf</span>(input.<span class="hljs-built_in">charAt</span>(i));<br><span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; input.<span class="hljs-built_in">length</span>()) &#123;<br><span class="hljs-keyword">String</span> valueOf2 = <span class="hljs-keyword">String</span>.<span class="hljs-built_in">valueOf</span>(input.<span class="hljs-built_in">charAt</span>(i + <span class="hljs-number">1</span>));<br><span class="hljs-keyword">if</span> (valueOf.<span class="hljs-built_in">equals</span>(valueOf2)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>切开字符串</title>
    <link href="/2f190b34c2b3.html"/>
    <url>/2f190b34c2b3.html</url>
    
    <content type="html"><![CDATA[<p>Pear有一个字符串，不过他希望把它切成两段。<br>这是一个长度为N（&lt;=10^5）的字符串。<br>Pear希望选择一个位置，把字符串不重复不遗漏地切成两段，长度分别是t和N-t（这两段都必须非空）。<br>Pear用如下方式评估切割的方案：<br>定义“正回文子串”为：长度为奇数的回文子串。<br>设切成的两段字符串中，前一段中有A个不相同的正回文子串，后一段中有B个不相同的非正回文子串，则该方案的得分为A<em>B。<br>注意，后一段中的B表示的是：“…非正回文…”，而不是: “…正回文…”。<br>那么所有的切割方案中，A</em>B的最大值是多少呢？<br>【输入数据】<br>输入第一行一个正整数N（&lt;=10^5）<br>接下来一行一个字符串，长度为N。该字符串仅包含小写英文字母。<br>【输出数据】<br>一行一个正整数，表示所求的A*B的最大值。<br>【样例输入】<br>10<br>bbaaabcaba<br>【样例输出】<br>38<br>【数据范围】<br>对于20%的数据，N&lt;=100<br>对于40%的数据，N&lt;=1000<br>对于100%的数据，N&lt;=10^5<br>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 2000ms<br>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">public</span> class Main &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">max</span> = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">String</span>[] <span class="hljs-built_in">str</span> = input();<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">str</span>.length; i += <span class="hljs-number">2</span>) &#123;<br><span class="hljs-built_in">int</span> x = palindrome(<span class="hljs-built_in">str</span>[i]);<br><span class="hljs-built_in">int</span> y = notPalindrome(<span class="hljs-built_in">str</span>[i + <span class="hljs-number">1</span>]);<br><span class="hljs-built_in">max</span> = Math.<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>, x * y);<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">max</span>);<br>&#125;<br><span class="hljs-comment">// 非回文</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> notPalindrome(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br><span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>Set <span class="hljs-built_in">set</span> = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">str</span>.length(); i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-built_in">str</span>.length() - i; j++) &#123;<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-built_in">str</span>.substring(j, i + j));<br>&#125;<br>&#125;<br>Iterator iterator = <span class="hljs-built_in">set</span>.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br><span class="hljs-keyword">if</span> (!verification(iterator.next())) &#123;<br>sum++;<br>&#125;<br>&#125;<br><span class="hljs-comment">// String[] array = set.toArray(new String[0]);</span><br><span class="hljs-comment">// for (int i = 0; i &lt; array.length; i++) &#123;</span><br><span class="hljs-comment">// if (!verification(array[i])) &#123;</span><br><span class="hljs-comment">// sum++;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-comment">// 回问</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> palindrome(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br><span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br>Set <span class="hljs-built_in">set</span> = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">str</span>.length(); i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-built_in">str</span>.length() - i; j++) &#123;<br><span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-built_in">str</span>.substring(j, i + j));<br>&#125;<br>&#125;<br>Iterator iterator = <span class="hljs-built_in">set</span>.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br><span class="hljs-keyword">if</span> (verification(iterator.next())) &#123;<br>sum++;<br>&#125;<br>&#125;<br><span class="hljs-comment">// String[] array = set.toArray(new String[0]);</span><br><span class="hljs-comment">// for (int i = 0; i &lt; array.length; i++) &#123;</span><br><span class="hljs-comment">// if (verification(array[i])) &#123;</span><br><span class="hljs-comment">// sum++;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> verification(<span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>) &#123;<br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-built_in">str</span>);<br><span class="hljs-keyword">String</span> s = sb.<span class="hljs-built_in">reverse</span>().toString();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.length() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.equals(s)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span>[] input() &#123;<br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><span class="hljs-built_in">int</span> number = scanner.nextInt();<br><span class="hljs-keyword">String</span>[] <span class="hljs-built_in">str</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[(number - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>];<br><span class="hljs-keyword">String</span> s = scanner.next();<br><span class="hljs-built_in">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">str</span>.length; i += <span class="hljs-number">2</span>) &#123;<br><span class="hljs-built_in">str</span>[i] = s.substring(<span class="hljs-number">0</span>, j);<br><span class="hljs-built_in">str</span>[i + <span class="hljs-number">1</span>] = s.substring(j, s.length());<br>j++;<br>&#125;<br>scanner.close();<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>只能解决20%</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>居民集会</title>
    <link href="/5e4e6842d754.html"/>
    <url>/5e4e6842d754.html</url>
    
    <content type="html"><![CDATA[<p>蓝桥村的居民都生活在一条公路的边上，公路的长度为L，每户家庭的位置都用这户家庭到公路的起点的距离来计算，第i户家庭距起点的距离为di。</p><p>每年，蓝桥村都要举行一次集会。今年，由于村里的人口太多，村委会决定要在4个地方举行集会，其中3个位于公路中间，1个位最公路的终点。</p><p>已知每户家庭都会向着远离公路起点的方向去参加集会，参加集会的路程开销为家庭内的人数ti与距离的乘积。</p><p>给定每户家庭的位置di和人数ti，请为村委会寻找最好的集会举办地：p1, p2, p3, p4 (p1&lt;=p2&lt;=p3&lt;=p4=L),使得村内所有人的路程开销和最小。</p><p>【输入格式】<br>输入的第一行包含两个整数n, L，分别表示蓝桥村的家庭数和公路长度。<br>接下来n行，每行两个整数di, ti，分别表示第i户家庭距离公路起点的距离和家庭中的人数。</p><p>【输出格式】<br>输出一行，包含一个整数，表示村内所有人路程的开销和。<br>【样例输入】<br>6 10<br>1 3<br>2 2<br>4 5<br>5 20<br>6 5<br>8 7<br>【样例输出】<br>18<br>【样例说明】<br>在距起点2, 5, 8, 10这4个地方集会，6个家庭需要的走的距离分别为1, 0, 1, 0, 2, 0，总的路程开销为1<em>3+0</em>2+1<em>5+0</em>20+2<em>5+0</em>7=18。</p><p>【数据规模与约定】<br>对于10%的评测数据，1&lt;=n&lt;=300。<br>对于30%的评测数据，1&lt;=n&lt;=2000，1&lt;=L&lt;=10000，0&lt;=di&lt;=L，di&lt;=di+1，0&lt;=ti&lt;=20。<br>对于100%的评测数据，1&lt;=n&lt;=100000，1&lt;=L&lt;=1000000，0&lt;=di&lt;=L，di&lt;=di+1，0&lt;=ti&lt;=1000000。</p><p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 512M<br>CPU消耗 &lt; 8000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意：不要使用package语句。不要使用jdk1.7及以上版本的特性。<br>注意：主类的名字必须是：Main，否则按无效代码处理。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> n = <span class="hljs-number">0</span>, l = <span class="hljs-number">0</span>;<span class="hljs-comment">// 家庭数和公路长度</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[][] family;<span class="hljs-comment">// 家庭距离公路起点的距离和家庭中的人数</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>n = scanner.nextInt();<br>l = scanner.nextInt();<br>family = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>family[i][<span class="hljs-number">0</span>] = scanner.nextInt();<br>family[i][<span class="hljs-number">1</span>] = scanner.nextInt();<br>&#125;<br>scanner.close();<br>punctuation(l);<br>System.<span class="hljs-keyword">out</span>.println(sum);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">punctuation</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> num</span>)</span> &#123;<br><span class="hljs-built_in">int</span> tmp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt;= num; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i; j &lt;= num; j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt;= num; k++) &#123;<br>tmp = overhead(i, j, k);<br><span class="hljs-keyword">if</span> (tmp &lt;= sum) &#123;<br>sum = tmp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">overhead</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j, <span class="hljs-built_in">int</span> k</span>)</span> &#123;<br><span class="hljs-built_in">int</span> number = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">with</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> l = <span class="hljs-number">0</span>; l &lt; n; l++) &#123;<br>number = family[l][<span class="hljs-number">0</span>];<br><span class="hljs-built_in">int</span> contrast = Compared(number, i, j, k);<br><span class="hljs-keyword">with</span> += (contrast - number) * family[l][<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span> &amp;&amp; k == <span class="hljs-number">0</span>) &#123;<br>sum = <span class="hljs-keyword">with</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">with</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Compared</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> number, <span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j, <span class="hljs-built_in">int</span> k</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (number &lt;= i) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt;= j) &#123;<br><span class="hljs-keyword">return</span> j;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt;= k) &#123;<br><span class="hljs-keyword">return</span> k;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (number &lt;= l) &#123;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四阶幻方</title>
    <link href="/ee5c0e48c3d1.html"/>
    <url>/ee5c0e48c3d1.html</url>
    
    <content type="html"><![CDATA[<p>把1~16的数字填入4×4的方格中，使得行、列以及两个对角线的和都相等，满足这样的特征时称为：四阶幻方。<br>四阶幻方可能有很多方案。如果固定左上角为1，请计算一共有多少种方案。<br>比如：<br>1 2 15 16<br>12 14 3 5<br>13 7 10 4<br>8 11 6 9<br>以及：<br>1 12 13 8<br>2 14 7 11<br>15 3 10 6<br>16 5 4 9<br>就可以算为两种不同的方案。<br>请提交左上角固定为1时的所有方案数字，不要填写任何多余内容或说明文字。</p><figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-built_in">num</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span> &#125;;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> su = <span class="hljs-number">0</span>;<br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-built_in">String</span>[] args) &#123;<br>sun(<span class="hljs-number">1</span>);<br>&#125;<br>private <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> sun(<span class="hljs-built_in">int</span> i) &#123;<br><span class="hljs-keyword">if</span> (sum() &amp;&amp; i == <span class="hljs-built_in">num</span>.length) &#123;<br>su++;<br>System.out.println(su);<br>&#125;<br><span class="hljs-built_in">int</span> tmp = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = i; j &lt; <span class="hljs-built_in">num</span>.length; j++) &#123;<br>tmp = <span class="hljs-built_in">num</span>[j];<br><span class="hljs-built_in">num</span>[j] = <span class="hljs-built_in">num</span>[i];<br><span class="hljs-built_in">num</span>[i] = tmp;<br>sun(i + <span class="hljs-number">1</span>);<br>tmp = <span class="hljs-built_in">num</span>[j];<br><span class="hljs-built_in">num</span>[j] = <span class="hljs-built_in">num</span>[i];<br><span class="hljs-built_in">num</span>[i] = tmp;<br>&#125;<br>&#125;<br>private <span class="hljs-keyword">static</span> boolean sum() &#123;<br><span class="hljs-built_in">int</span> tmp = <span class="hljs-built_in">num</span>[<span class="hljs-number">0</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">1</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">2</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">num</span>.length; i += <span class="hljs-number">4</span>) &#123;<br><span class="hljs-keyword">if</span> (tmp != <span class="hljs-built_in">num</span>[i] + <span class="hljs-built_in">num</span>[i + <span class="hljs-number">1</span>] + <span class="hljs-built_in">num</span>[i + <span class="hljs-number">2</span>] + <span class="hljs-built_in">num</span>[i + <span class="hljs-number">3</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (tmp != <span class="hljs-built_in">num</span>[i] + <span class="hljs-built_in">num</span>[i + <span class="hljs-number">4</span>] + <span class="hljs-built_in">num</span>[i + <span class="hljs-number">8</span>] + <span class="hljs-built_in">num</span>[i + <span class="hljs-number">12</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (tmp != <span class="hljs-built_in">num</span>[<span class="hljs-number">0</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">5</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">10</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">15</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span> (tmp != <span class="hljs-built_in">num</span>[<span class="hljs-number">3</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">6</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">9</span>] + <span class="hljs-built_in">num</span>[<span class="hljs-number">12</span>])<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>理论有解</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>胡同门牌号</title>
    <link href="/543613fef7da.html"/>
    <url>/543613fef7da.html</url>
    
    <content type="html"><![CDATA[<p>小明家住在一条胡同里。胡同里的门牌号都是连续的正整数，由于历史原因，最小的号码并不是从1开始排的。<br>有一天小明突然发现了有趣的事情：<br>如果除去小明家不算，胡同里的其它门牌号加起来，刚好是100！<br>并且，小明家的门牌号刚好等于胡同里其它住户的个数！<br>请你根据这些信息，推算小明家的门牌号是多少？<br>请提交该整数，不要填写任何多余的内容或说明性文字。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">100</span>; j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= j; k++) &#123;<br><span class="hljs-keyword">if</span> ((i + j) * (j - i + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> - k == <span class="hljs-number">100</span> &amp;&amp; k == j - i) &#123;<br>System.out.<span class="hljs-built_in">println</span>(i + <span class="hljs-string">&quot; &quot;</span> + j + <span class="hljs-string">&quot; &quot;</span> + k);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第39级台阶</title>
    <link href="/e8d6d5f114d9.html"/>
    <url>/e8d6d5f114d9.html</url>
    
    <content type="html"><![CDATA[<p>小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级！站在台阶前，他突然又想着一个问题：如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？</p><p>请你利用计算机的优势，帮助小明寻找答案。要求提交的是一个整数。</p><p>解：</p><p>阶乘》递归</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>System.out.<span class="hljs-keyword">println</span>(pace(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> pace(<span class="hljs-keyword">int</span> <span class="hljs-keyword">step</span>, <span class="hljs-keyword">int</span> frequency) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">step</span> &gt; <span class="hljs-number">39</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">step</span> == <span class="hljs-number">39</span>) &#123;<br><span class="hljs-keyword">if</span> (frequency % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">count</span>++;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">count</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>pace(<span class="hljs-keyword">step</span> + <span class="hljs-number">1</span>, frequency + <span class="hljs-number">1</span>);<br>pace(<span class="hljs-keyword">step</span> + <span class="hljs-number">2</span>, frequency + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">count</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>蓝桥杯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
