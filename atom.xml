<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zea</title>
  
  
  <link href="https://blog.48626.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.48626.xyz/"/>
  <updated>2024-12-03T09:08:51.739Z</updated>
  <id>https://blog.48626.xyz/</id>
  
  <author>
    <name>初。</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://blog.48626.xyz/dd81315ded00.html"/>
    <id>https://blog.48626.xyz/dd81315ded00.html</id>
    <published>2024-12-03T09:08:51.739Z</published>
    <updated>2024-12-03T09:08:51.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go学习笔记"><a href="#Go学习笔记" class="headerlink" title="Go学习笔记"></a>Go学习笔记</h1><h2 id="编译go-build"><a href="#编译go-build" class="headerlink" title="编译go build"></a>编译go build</h2><ol><li>编译当前目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build 或者 go build .</span><br></pre></td></tr></table></figure><ol start="2"><li>编译指定文件或目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译main文件，将会生成可执行文件</span></span><br><span class="line">go build ./mian.go</span><br><span class="line"><span class="comment"># 编译指定文件目录p1（当前文件夹下没有main.go），不会生成编译文件，仅进行编译检查</span></span><br><span class="line">go build ./p1</span><br></pre></td></tr></table></figure><ol start="3"><li>main包有多个文件的情况，指定文件编译main包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译时必须指定main包的所有文件</span></span><br><span class="line">go build ./main.go ./hello.go</span><br></pre></td></tr></table></figure><ol start="4"><li>编译时指定编译结果输出</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -o ./out/app ./main.go ./hello.go</span><br></pre></td></tr></table></figure><ol start="5"><li>条件编译</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build linux,386 darwin,!cgo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码只会在Linux 386或不使用cgo的Darwin系统上编译</span></span><br></pre></td></tr></table></figure><p>使用build tags编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -tags <span class="string">&quot;linux,386&quot;</span> main.go</span><br></pre></td></tr></table></figure><ol start="6"><li>编译时优化</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用优化和内联，用于调试</span></span><br><span class="line">go build -gcflags <span class="string">&quot;-N -l&quot;</span> main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译时去掉调试信息，减小二进制文件大小</span></span><br><span class="line">go build -ldflags <span class="string">&quot;-w -s&quot;</span> main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示编译时间</span></span><br><span class="line">go build -x main.go</span><br></pre></td></tr></table></figure><h3 id="运行-go-run"><a href="#运行-go-run" class="headerlink" title="运行 go run"></a>运行 go run</h3><ol><li>直接通过 go run 运行main包，即可运行应用程序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行应用程序时，指定main包所有文件</span></span><br><span class="line">go run main.go hello.go</span><br><span class="line"><span class="comment"># 运行应用程序时，指定main包所在目录</span></span><br><span class="line">go run .</span><br></pre></td></tr></table></figure><ol start="2"><li>使用go run执行包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行指定包</span></span><br><span class="line">go run github.com/your-username/your-repo</span><br></pre></td></tr></table></figure><ol start="3"><li>使用go run执行远程代码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run github.com/user/repo@latest</span><br></pre></td></tr></table></figure><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>交叉编译需要修改G005、GOARCH、CGO_ENABLED三个环境变量</p><p>GOOS:目标平台的提作系统(darwin、freebsd、linux、windows)</p><p>GOARCH:目标平台的体系架构32位还是64位(386、amd64、arm)</p><p>CGO_ENABLED:是否启用CGO，交叉编译不支持CG0所以要禁用它</p><p>Go支持交叉编译，可以在一个平台上编译其他平台的可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 go build -o app_linux main.go</span><br><span class="line">GOOS=windows GOARCH=amd64 go build -o app_windows.exe main.go</span><br></pre></td></tr></table></figure><h4 id="win编译liunx-与-mac可执行程序"><a href="#win编译liunx-与-mac可执行程序" class="headerlink" title="win编译liunx 与 mac可执行程序"></a>win编译liunx 与 mac可执行程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="variable">$Env</span>:CGO_ENABLED=0;<span class="variable">$Env</span>:GOARCH=<span class="string">&quot;amd64&quot;</span>;<span class="variable">$Env</span>:GOOS=<span class="string">&quot;linux&quot;</span></span><br><span class="line"><span class="comment"># 编译，并输出到app文件</span></span><br><span class="line">go build -o ./out/app .</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="variable">$Env</span>:CGO_ENABLED=0;<span class="variable">$Env</span>:GOARCH=<span class="string">&quot;amd64&quot;</span>;<span class="variable">$Env</span>:GOOS=<span class="string">&quot;darwin&quot;</span></span><br><span class="line"><span class="comment"># 编译，并输出到app文件</span></span><br><span class="line">go build -o ./out/app .</span><br></pre></td></tr></table></figure><h4 id="Linux编译Windows和macOS可执行程序"><a href="#Linux编译Windows和macOS可执行程序" class="headerlink" title="Linux编译Windows和macOS可执行程序"></a>Linux编译Windows和macOS可执行程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译Windows 64位可执行程序</span></span><br><span class="line">GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o app.exe main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译macOS 64位可执行程序</span></span><br><span class="line">GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o app main.go</span><br></pre></td></tr></table></figure><h4 id="macOS编译Windows和Linux可执行程序"><a href="#macOS编译Windows和Linux可执行程序" class="headerlink" title="macOS编译Windows和Linux可执行程序"></a>macOS编译Windows和Linux可执行程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译Windows 64位可执行程序</span></span><br><span class="line">GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o app.exe main.go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译Linux 64位可执行程序</span></span><br><span class="line">GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o app main.go</span><br></pre></td></tr></table></figure><h3 id="go-mod-依赖管理"><a href="#go-mod-依赖管理" class="headerlink" title="go mod 依赖管理"></a>go mod 依赖管理</h3><ol><li>讲模块下载到本地缓存，需要指定模块路径及版本号</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod download &lt;依赖路径&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化一个新的模块到当前目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init &lt;项目名称&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>依赖对齐，添加缺少的依赖，删除未使用的依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><ol start="4"><li>通过工具或脚本编辑go.mod</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">go mod edit</span><br><span class="line"><span class="comment"># 添加依赖</span></span><br><span class="line">go mod edit -require=<span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 替换路径，old[@version] 替换成 new[@version]</span></span><br><span class="line">go mod edit -replace=<span class="string">&quot;xxx=xxx&quot;</span></span><br><span class="line"><span class="comment"># 排除第三方依赖的某个版本</span></span><br><span class="line">go mod edit -exclude=<span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="comment"># 当前项目作为其他项目的依赖时，添加撤回版本用于排除有问题的版本</span></span><br><span class="line">go mod edit -retract=<span class="string">&quot;v1.0.0&quot;</span></span><br><span class="line"><span class="comment"># 删除撤回版本记录</span></span><br><span class="line">go mod edit -dropretract=<span class="string">&quot;v1.0.0&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>根据go.mod中的依赖项制作vendor副本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有了vendor副本，项目将不再依赖本地缓存</span></span><br><span class="line">go mod vendor</span><br><span class="line"><span class="comment"># 验证依赖是否正确</span></span><br><span class="line">go mod verify</span><br></pre></td></tr></table></figure><ol start="6"><li>返回对指定模块的依赖关系最短路径，解释为什么依赖指定包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod why &lt;依赖路径&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>打印模块依赖图</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod graph</span><br></pre></td></tr></table></figure><ol start="8"><li>列出当前模块的所有依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go list -m all</span><br></pre></td></tr></table></figure><h3 id="go-mod文件"><a href="#go-mod文件" class="headerlink" title="go.mod文件"></a>go.mod文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块名</span></span><br><span class="line">module gomod</span><br><span class="line"><span class="comment">// go sdk 版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前module（项目）依赖的包</span></span><br><span class="line">require (</span><br><span class="line"><span class="comment">// dependency latest</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排除第三方包</span></span><br><span class="line">exclude (</span><br><span class="line"><span class="comment">// dependency latest</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改依赖包的路径或版本</span></span><br><span class="line"><span class="comment">// 依赖包发生迁移</span></span><br><span class="line"><span class="comment">// 原始包无法访问</span></span><br><span class="line"><span class="comment">// 使用本地包替换原始包</span></span><br><span class="line">replace (</span><br><span class="line"><span class="comment">// source latest =&gt; target latest</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤回</span></span><br><span class="line"><span class="comment">// 当前项目作为其他项目的依赖，如果某个版本出现了问题则撤回该项目</span></span><br><span class="line">retract (</span><br><span class="line"> v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="go-install-get-clean"><a href="#go-install-get-clean" class="headerlink" title="go install&#x2F;get&#x2F;clean"></a>go install&#x2F;get&#x2F;clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># go install 安装可执行插件</span></span><br><span class="line">go install github.com/google/gops@latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># go get 获取模块信息并更新go.mod文件</span></span><br><span class="line"><span class="comment"># 若本地缓存没有该模块，则下载模块，若有则直接引用</span></span><br><span class="line"><span class="comment"># 获取指定模块及其依赖</span></span><br><span class="line">go get github.com/gin-gonic/gin@v1.9.0</span><br><span class="line"><span class="comment"># 更新指定模块的依赖</span></span><br><span class="line">go get -u github.com/gin-gonic/gin@latest  <span class="comment"># 更新到最新版本</span></span><br><span class="line"><span class="comment"># go get -d: 仅下载依赖，不安装。</span></span><br><span class="line"><span class="comment"># 下载依赖但不安装</span></span><br><span class="line">go get -d github.com/gin-gonic/gin</span><br><span class="line"><span class="comment"># go get -v: 显示详细的下载过程。</span></span><br><span class="line"><span class="comment"># 显示详细的下载过程</span></span><br><span class="line">go get -v github.com/gin-gonic/gin</span><br><span class="line"></span><br><span class="line"><span class="comment"># go clean </span></span><br><span class="line"><span class="comment"># 清理Go的临时文件和缓存。go clean可以帮助您释放磁盘空间，尤其是在进行频繁构建和测试时。</span></span><br><span class="line"><span class="comment"># 清理模块下载的缓存文件</span></span><br><span class="line">go clean -modcache</span><br><span class="line"><span class="comment"># 清理当前模块生成的所有临时文件</span></span><br><span class="line">go clean</span><br><span class="line"><span class="comment"># 清理特定的构建文件</span></span><br><span class="line">go clean -i  <span class="comment"># 清理安装的可执行文件</span></span><br></pre></td></tr></table></figure><h2 id="Go-语言结构与基础语法"><a href="#Go-语言结构与基础语法" class="headerlink" title="Go 语言结构与基础语法"></a>Go 语言结构与基础语法</h2><h3 id="语言结构"><a href="#语言结构" class="headerlink" title="语言结构"></a>语言结构</h3><ol><li><strong>包声明</strong>每个Go源文件必须以<code>package</code>声明开头，表明该文件属于哪个包。</li><li><strong>引入包</strong>使用<code>import</code>关键字引入其他包，可以通过<code>_</code>别名引入包但不调用。</li><li><strong>函数</strong>使用<code>func</code>关键字定义函数，支持多返回值和命名返回参数。</li><li><strong>init函数</strong>每个包可以有一个<code>init</code>函数，程序启动时会自动调用。</li><li><strong>变量</strong>使用<code>var</code>关键字声明变量，支持类型推导和简短声明。</li><li><strong>标识符</strong>标识符是变量、函数、包等的名称，必须以字母或下划线开头，后面可以跟字母、数字或下划线。</li><li><strong>行分隔符</strong>每条语句以分号结束，Go会自动插入分号。</li><li><strong>语句与表达式</strong>语句是执行的指令，表达式是计算得到值的代码。</li><li><strong>注释</strong>单行注释以<code>//</code>开头，多行注释用<code>/* ... */</code>。</li><li><strong>公有成员与私有成员</strong>首字母大写的标识符为公有成员，首字母小写的标识符为私有成员。</li><li><strong>关键字、保留字和预定义标志</strong>Go语言有一系列的关键字和保留字，不能用作标识符。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明包</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="comment">// 引用包时，下划线别名表示只引用不调用</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化函数，golang 每个包的引用会优先调用该函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数（main函数为整个程序的入口）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 语句或表达式</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">10</span></span><br><span class="line">    fmt.Println(fmt.Sprintf(<span class="string">&quot;打印参数i：%d&quot;</span> , i))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单行注释</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 首字符大写为公有成员，小写为私有成员</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 包名与包引用目录可以不一致（包名和文件夹名可以不同）</span></span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ol><li><strong>切片</strong>动态数组，支持扩展。</li><li><strong>map</strong>键值对集合，支持快速查找。</li><li><strong>channel</strong>用于在goroutine之间传递数据。</li><li><strong>interface</strong>定义方法集，允许不同类型实现相同的接口。</li><li><strong>func</strong>函数类型，可以作为参数或返回值。</li><li><strong>指针类型</strong>存储变量的内存地址，允许直接操作内存。</li></ol><h3 id="关键词和保留词"><a href="#关键词和保留词" class="headerlink" title="关键词和保留词"></a>关键词和保留词</h3><ol><li><strong>break</strong>: 跳出循环或switch语句。</li><li><strong>default</strong>: switch或select的默认选项。</li><li><strong>func</strong>: 定义函数。</li><li><strong>interface</strong>: 声明接口。</li><li><strong>select</strong>: 用于多路选择，监听channel。</li><li><strong>case</strong>: switch或select中的条件。</li><li><strong>defer</strong>: 延迟调用的关键词。</li><li><strong>go</strong>: 启动goroutine的关键词。</li><li><strong>map</strong>: 定义映射类型。</li><li><strong>struct</strong>: 定义结构体类型。</li><li><strong>chan</strong>: 定义通道类型。</li><li><strong>else</strong>: 条件表达式的否则部分。</li><li><strong>goto</strong>: 跳转到标签的位置。</li><li><strong>package</strong>: 声明包名。</li><li><strong>switch</strong>: 流程控制语句。</li><li><strong>const</strong>: 声明常量。</li><li><strong>fallthrough</strong>: 在switch语句中执行下一个case。</li><li><strong>if</strong>: 条件表达式。</li><li><strong>range</strong>: 遍历数组、切片、map等。</li><li><strong>type</strong>: 定义新类型。</li><li><strong>continue</strong>: 跳过当前循环的剩余部分。</li><li><strong>for</strong>: 循环语句。</li><li><strong>import</strong>: 包导入语句。</li><li><strong>return</strong>: 返回语句。</li><li><strong>var</strong>: 变量声明的关键词。</li></ol><h3 id="预定义表示"><a href="#预定义表示" class="headerlink" title="预定义表示"></a>预定义表示</h3><ol><li><strong>append</strong>: 向切片追加元素。</li><li><strong>cap</strong>: 获取数组、切片、通道的容量。</li><li><strong>close</strong>: 关闭通道。</li><li><strong>copy</strong>: 拷贝切片。</li><li><strong>imag</strong>: 返回复数的虚部。</li><li><strong>real</strong>: 返回复数的实部。</li><li><strong>panic</strong>: 抛出异常。</li><li><strong>recover</strong>: 恢复因panic而中断的goroutine。</li><li><strong>iota</strong>: 常量计数器。</li><li><strong>len</strong>: 获取长度。</li><li><strong>make</strong>: 初始化切片、map、channel。</li><li><strong>new</strong>: 创建类型的变量并分配内存。</li><li><strong>nil</strong>: 引用类型的零值。</li><li><strong>false, true</strong>: 布尔类型值。</li><li><strong>print, println</strong>: 打印消息。</li><li>bool,byte, </li><li>complex,complex64,complex128</li><li>float32,float64, </li><li>int,uint,int8,uint8,int16,uint16,int32,uint32,int64,uint64</li><li>string </li><li>uintptr</li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ol><li><p><strong>错误处理</strong>: Go使用多返回值的方式处理错误，通常返回一个<code>error</code>类型的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result, err := someFunction()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>并发编程</strong>: Go通过goroutines和channels实现并发，goroutines是轻量级线程，channels用于在goroutines之间传递数据。</p></li><li><p><strong>结构体和方法</strong>: 结构体可以定义方法，方法的接收者可以是值类型或指针类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> Greet() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, my name is&quot;</span>, p.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据类型与变量"><a href="#数据类型与变量" class="headerlink" title="数据类型与变量"></a>数据类型与变量</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><strong>基本类型</strong><ol><li>布尔类型: <code>bool</code></li><li>整型: <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>, <code>int</code>, <code>uint</code>, <code>uintptr</code></li><li>浮点型: <code>float32</code>, <code>float64</code></li><li>复数: <code>complex64</code>, <code>complex128</code></li><li>字符串: <code>string</code></li><li>字符: <code>rune</code> (等价于 <code>int32</code>)</li><li>字节: <code>byte</code> (等价于 <code>uint8</code>)</li></ol></li><li><strong>复合类型</strong><ol><li>数组: <code>[n]T</code></li><li>切片: <code>[]T</code></li><li>字典: <code>map[K]V</code></li><li>结构体: <code>struct</code></li><li>指针: <code>*T</code></li><li>函数: <code>func(T1, T2) (R1, R2)</code></li><li>通道: <code>chan T</code></li><li>接口: <code>interface&#123;&#125;</code></li><li>时间类型</li></ol></li></ol><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ol><li><strong>使用 <code>var</code> 关键字声明变量</strong><ol><li><code>var name type = expression</code></li><li><code>var name1, name2 type = expression1, expression2</code></li><li><code>var name1, name2 = expression1, expression2</code> (类型推断)</li></ol></li><li><strong>使用简短声明 <code>:=</code> 声明变量</strong><ol><li><code>name := expression</code></li><li>只能用于函数内部,不能用于全局变量</li></ol></li><li><strong>零值</strong><ol><li>数值类型: <code>0</code></li><li>布尔类型: <code>false</code></li><li>字符串: <code>&quot;&quot;</code></li><li>指针、通道、函数、接口、切片、字典、通道: <code>nil</code></li></ol></li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li><strong>显式类型转换</strong><ol><li><code>T(expression)</code></li><li>只能在两种类型之间有直接关系时使用</li></ol></li><li><strong>字符串和数值类型转换</strong><ol><li><code>strconv.Itoa(int)</code> </li><li>将整数转换为字符串</li><li><code>strconv.Atoi(string)</code> 将字符串转换为整数</li><li><code>strconv.FormatInt(int64, base)</code> 将整数转换为字符串</li><li><code>strconv.ParseInt(string, base, bitSize)</code> 将字符串转换为整数</li></ol></li><li><strong>字符串和字节&#x2F;rune切片转换</strong><ol><li><code>[]byte(string)</code> 将字符串转换为字节切片</li><li><code>[]rune(string)</code> 将字符串转换为rune切片</li><li><code>string([]byte)</code> 将字节切片转换为字符串</li><li><code>string([]rune)</code> 将rune切片转换为字符串</li></ol></li><li><strong>接口类型转换</strong><ol><li><code>value, ok := interface&#123;&#125;.(T)</code> 类型断言</li><li><code>value := interface&#123;&#125;.(T)</code> 类型断言,如果失败会panic</li></ol></li></ol><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ol><li><strong>指针声明</strong><ol><li><code>var p *T</code></li><li><code>p := &amp;v</code> 取变量v的地址</li></ol></li><li><strong>指针运算</strong><ol><li><code>*p</code> 解引用,获取指针指向的值</li><li><code>p++</code> 递增指针,指向下一个元素</li></ol></li><li><strong><code>unsafe.Pointer</code></strong><ol><li>通用指针类型,可以转换为任意指针类型</li><li>不能进行指针运算</li></ol></li><li><strong><code>uintptr</code></strong><ol><li>可以进行指针运算的整数类型</li><li>可以与<code>unsafe.Pointer</code>相互转换</li></ol></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> _case</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量==========================================================</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">VarDeclareCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 通过 var 关键词声明类型</span></span><br><span class="line">    <span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">    <span class="comment">// 通过var关键词声明变量，并赋值</span></span><br><span class="line">    <span class="keyword">var</span> j <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">    <span class="keyword">var</span> f <span class="type">float32</span> = <span class="number">100.123</span></span><br><span class="line">    <span class="keyword">var</span> x,y,z <span class="type">int</span> = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">    <span class="comment">// 通过:= 以推断的方式定义变量并赋值，此方式只能用于局部变量的定义</span></span><br><span class="line">    b:= <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    arr1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> arr2 [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">    arr2[<span class="number">2</span>] = <span class="number">4</span></span><br><span class="line">    arr2[<span class="number">3</span>] = <span class="number">5</span></span><br><span class="line">    <span class="comment">// ...打印，过编</span></span><br><span class="line">    fmt.Println(i,j,f,x,y,z,b,arr,arr1,arr2)</span><br><span class="line">    <span class="comment">//指针类型，用于表示变量地址的类型</span></span><br><span class="line">    <span class="keyword">var</span> intPtr *<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> i1 = <span class="number">100</span></span><br><span class="line">    f1(i1)</span><br><span class="line">    <span class="keyword">var</span> i2 = <span class="number">100</span></span><br><span class="line">    f1(&amp;i2)</span><br><span class="line">    fmt.Println(intPtr,i1,i2)</span><br><span class="line">    <span class="keyword">var</span> floatPtr *<span class="type">float64</span></span><br><span class="line">    fmt.Println(floatPtr)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 接口类型</span></span><br><span class="line">    <span class="keyword">var</span> inter <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    fmt.Println(inter)</span><br><span class="line">    inter = i1</span><br><span class="line">    fmt.Println(inter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(i <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(i *<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    *i = *i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量和枚举==========================================================</span></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">type</span> Gender <span class="type">uint</span></span><br><span class="line"></span><br><span class="line">cast (</span><br><span class="line">FEMALE Gender = <span class="literal">iota</span></span><br><span class="line">    MALE</span><br><span class="line">    THIRD</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cast (</span><br><span class="line">B = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    KB</span><br><span class="line">    MB</span><br><span class="line">    GB <span class="comment">// 如果不想引用GB 用 _ 替代，保持顺序</span></span><br><span class="line">    TB</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量和枚举</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConstAndEnumCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span>(</span><br><span class="line">    A = <span class="number">10</span></span><br><span class="line">    B = <span class="number">20</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(A,B)</span><br><span class="line">    <span class="keyword">var</span> gander Gender = MALE</span><br><span class="line">    fmt.Println(gander)</span><br><span class="line">    size := MB</span><br><span class="line">    fmt.Println(size)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体==========================================================</span></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StructCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    u := user&#123;</span><br><span class="line">        Name: <span class="string">&quot;nick&quot;</span>,</span><br><span class="line">        Age: <span class="number">18</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    f3(u)</span><br><span class="line">    fmt.Println(u)</span><br><span class="line">    f4(&amp;u)</span><br><span class="line">    fmt.Println(u)</span><br><span class="line">    <span class="comment">// 指针类型</span></span><br><span class="line">    u1 := &amp;user&#123;</span><br><span class="line">        Name: <span class="string">&quot;nick&quot;</span>,</span><br><span class="line">        Age: <span class="number">18</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 指针类型</span></span><br><span class="line">    u2 := <span class="built_in">new</span>(user)</span><br><span class="line">    u2.Name = <span class="string">&quot;nick&quot;</span></span><br><span class="line">    u2.Age = <span class="number">18</span></span><br><span class="line">    fmt.Println(u2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 值类型可以不做初始化，指针类型必须要做初始化否则会空指针异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">(u user)</span></span>&#123;</span><br><span class="line">    u.Age = <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">(u *user)</span></span>&#123;</span><br><span class="line">    u.Age = <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new和make==========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 通过new函数，可以创建任意类型，并返回指针</span></span><br><span class="line">    mpPtr := <span class="built_in">new</span>(<span class="keyword">map</span>[<span class="type">string</span>]*user)</span><br><span class="line">    <span class="keyword">if</span> *mpPtr == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (*mpPtr)[&quot;A&quot;] = &amp;user&#123;&#125;</span></span><br><span class="line">    slicePtr := <span class="built_in">new</span>([]user)</span><br><span class="line">    <span class="keyword">if</span> *slicePtr == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    *slicePtr = <span class="built_in">append</span>(*slicePtr,user&#123;Name: <span class="string">&quot;nick&quot;</span>&#125;)</span><br><span class="line">    fmt.Println(mpPtr,slicePtr)</span><br><span class="line">    </span><br><span class="line">    strPtr := <span class="built_in">new</span>(<span class="type">string</span>)</span><br><span class="line">    fmt.Println(strPtr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make 仅用于 切片、集合、通道的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化切片，别设置长度和容量</span></span><br><span class="line">    slice := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">    slice[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">    <span class="comment">// 初始化集合，并设置集合的初始大小</span></span><br><span class="line">    mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>,<span class="number">10</span>)</span><br><span class="line">    mp[<span class="string">&quot;A&quot;</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">    <span class="comment">// 初始化通道，设置通道的读写方向和缓存大小</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>,<span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 只写</span></span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span>&lt;- <span class="type">int</span>,<span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 只读</span></span><br><span class="line">    ch1 := <span class="built_in">make</span>(&lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    fmt.Println(slice,mp,ch,ch1,ch2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SliceAndMapCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义切片</span></span><br><span class="line">    <span class="keyword">var</span> slice []<span class="type">int</span></span><br><span class="line">    slice = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">    slice1 := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>)</span><br><span class="line">    slice1[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">    fmt.Println(slice,slice1)</span><br><span class="line">    <span class="comment">// 切片的截取</span></span><br><span class="line">    slice2 := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(slice2),<span class="built_in">cap</span>(slice2))</span><br><span class="line">    slice2[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    slice2[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    slice2[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    slice2[<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line">    slice2[<span class="number">4</span>] = <span class="number">4</span></span><br><span class="line">    slice3 := slice2[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(slice3),<span class="built_in">cap</span>(slice3),slice3)</span><br><span class="line">    slice4 := slice2[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(slice4),<span class="built_in">cap</span>(slice4),slice4)</span><br><span class="line">    slice5 := slice2[<span class="number">1</span>:<span class="number">8</span>]</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(slice5),<span class="built_in">cap</span>(slice5),slice5)</span><br><span class="line">    slice6 := slice2[<span class="number">1</span>:<span class="number">10</span>]</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(slice6),<span class="built_in">cap</span>(slice6),slice6)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 切片的附加</span></span><br><span class="line">    slice6 = <span class="built_in">append</span>(slice3,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(slice6),<span class="built_in">cap</span>(slice6),slice6)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 集合，无序</span></span><br><span class="line">    mp := <span class="built_in">make</span>(mapp[<span class="type">string</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">    mp[<span class="string">&quot;A&quot;</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">    mp[<span class="string">&quot;B&quot;</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">    mp[<span class="string">&quot;C&quot;</span>] = <span class="string">&quot;c&quot;</span></span><br><span class="line">    mp[<span class="string">&quot;D&quot;</span>] = <span class="string">&quot;d&quot;</span></span><br><span class="line">    fmt.Println(mp)</span><br><span class="line">    <span class="comment">// 无序</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> mp&#123;</span><br><span class="line">        fmt.Println(k,v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除集合元素</span></span><br><span class="line">    <span class="built_in">delete</span>(mp,<span class="string">&quot;B&quot;</span>)</span><br><span class="line">    fmt.Println(mp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换类型与时间类型==========================================================</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 同一类数据转换 数字和数字、字符串和字符和字节</span></span><br><span class="line">    <span class="comment">// 不同类型的数据转换</span></span><br><span class="line">    <span class="comment">// 接口类型转其他类型</span></span><br><span class="line">    <span class="comment">// 数字类型的转换</span></span><br><span class="line">    <span class="keyword">var</span> num1 <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">    fmt.Println(<span class="type">int64</span>(num1))</span><br><span class="line">    <span class="keyword">var</span> num2 <span class="type">int64</span> = <span class="number">100</span></span><br><span class="line">    fmt.Println(<span class="type">int</span>(num2))</span><br><span class="line">    <span class="comment">// 字符串与数字类型转换</span></span><br><span class="line">    <span class="keyword">var</span> num3 = <span class="number">100</span></span><br><span class="line">    fmt.Println(strconv.Itoa(num3) + <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&quot;100&quot;</span></span><br><span class="line">    fmt.Println(strconv.Atoi(str1))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> num4 <span class="type">int64</span> = <span class="number">1010</span></span><br><span class="line">    fmt.Println(strconv.FormatInt(num4,<span class="number">10</span>))</span><br><span class="line">    fmt.Println(strconv.FormatInt(num4,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">&quot;1010&quot;</span></span><br><span class="line">    fmt.Println(strconv.ParseInt(str2,<span class="number">10</span>,<span class="number">64</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串与[]byte 转换</span></span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">&quot;今天天气好&quot;</span></span><br><span class="line">    bytes1 := []<span class="type">byte</span>(str3)</span><br><span class="line">    fmt.Println([]<span class="type">byte</span>(str3))</span><br><span class="line">    fmt.Println(bytes1)</span><br><span class="line">    fmt.<span class="built_in">println</span>(<span class="type">string</span>(bytes1))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串与rune转换</span></span><br><span class="line">    <span class="comment">// rune 为int32类型</span></span><br><span class="line">    <span class="comment">// 将字符串转换为rune切片，实际上rune切片中存储了字符串的Unicode码表</span></span><br><span class="line">    <span class="keyword">var</span> rune1 = []<span class="type">rune</span>(str3)</span><br><span class="line">    fmt.Println(rune1)</span><br><span class="line">    fmt.Println(<span class="type">string</span>(rune1))</span><br><span class="line">    fmt.Println(<span class="type">string</span>(rune1[<span class="number">3</span>]))</span><br><span class="line">    fmt.Println([]<span class="type">int32</span>(str3))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 接口类型转具体类型</span></span><br><span class="line">    <span class="keyword">var</span> inf <span class="keyword">interface</span>&#123;&#125; = <span class="number">100</span></span><br><span class="line">    <span class="keyword">var</span> infStruct interfase&#123;&#125; = user&#123;Name:<span class="string">&quot;nick&quot;</span>&#125;</span><br><span class="line">    <span class="comment">// . 断言</span></span><br><span class="line">    i, ok := inf.(<span class="type">int</span>)</span><br><span class="line">    fmt.Println(i,ok)</span><br><span class="line">    u, ok := infStruct.(user)</span><br><span class="line">    fmt.Println(u,ok)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 时间类型转字符串</span></span><br><span class="line">    <span class="comment">// 2006-01-02 15:04:05Z07:00 固定格式 Z07:00 为时区</span></span><br><span class="line">    <span class="keyword">var</span> t time.Time</span><br><span class="line">    t = time.Now()</span><br><span class="line">    timeStr := t.Format(<span class="string">&quot;2006-01-02 15:04:05Z07:00&quot;</span>);</span><br><span class="line">    fmt.Println(timeStr)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串转时间</span></span><br><span class="line">    t2,_ := time.Parse(<span class="string">&quot;2006-01-02 15:04:05Z07:00&quot;</span>, timeStr)</span><br><span class="line">    fmt.Println(t2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// uintptr </span></span><br><span class="line">    u1 := user&#123;&#125;</span><br><span class="line">    <span class="comment">// unsafe.Pointer 通用指针类型 不能用于计算</span></span><br><span class="line">    uPtr := unsafe.Pointer(&amp;u1)</span><br><span class="line">    namePtr := unsafe.Pointer(<span class="type">uintptr</span>(uPtr) + unsafe.Offsetof(u1.Name))</span><br><span class="line">    *(*<span class="type">string</span>)(namePtr) = <span class="string">&quot;nick&quot;</span></span><br><span class="line">    fmt.Println(u1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量作用域与函数"><a href="#变量作用域与函数" class="headerlink" title="变量作用域与函数"></a>变量作用域与函数</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ol><li><strong>局部变量</strong>在函数内部声明的变量只在该函数内有效。局部变量在函数调用结束后被销毁。</li><li><strong>全局变量</strong>在包级别声明的变量可以在包的任何地方访问。全局变量的命名约定：首字母大写为公有变量，首字母小写为私有变量。</li><li><strong>作用域规则</strong>变量的作用域从声明开始，到其所在代码块结束。如果局部变量与全局变量同名，局部变量会隐藏全局变量。</li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li><p><strong>函数定义</strong></p><p>使用<code>func</code>关键字定义函数，可以有多个参数和返回值。返回值可以命名，命名返回值在函数体内可以直接赋值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumCase</span><span class="params">(a, b <span class="type">int</span>)</span></span> (sum <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt;= <span class="number">0</span> &amp;&amp; b &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        err = errors.New(<span class="string">&quot;两数相加不能同时小于0&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum = a + b</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>值传递与引用传递</strong></p><p>Go语言使用值传递，即函数参数的值在调用时被复制。如果需要在函数中修改参数的值，可以传递指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReferenceCase</span><span class="params">(a <span class="type">int</span>, b *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    a += <span class="number">1</span>   <span class="comment">// 修改的是局部变量a</span></span><br><span class="line">    *b += <span class="number">1</span>  <span class="comment">// 修改的是b指向的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法</strong></p><p>方法是与类型关联的函数，可以通过接收者来定义。接收者可以是值类型或指针类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> SetAge(age <span class="type">int</span>) &#123;</span><br><span class="line">    u.Age = age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>返回多个值</strong></p><p>Go语言允许函数返回多个值，常用于返回结果和错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumCase2</span><span class="params">(a, b <span class="type">int</span>)</span></span> (user *User, sum <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    user = &amp;User&#123;Name: <span class="string">&quot;nick&quot;</span>, Age: <span class="number">18</span>&#125; <span class="comment">// 需要先初始化user</span></span><br><span class="line">    <span class="keyword">if</span> a &lt;= <span class="number">0</span> &amp;&amp; b &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        err = errors.New(<span class="string">&quot;两数相加不能同时小于0&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum = a + b</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>匿名函数</strong></p><p>Go支持匿名函数，可以在定义时立即调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gofunc() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li><li><p><strong>闭包</strong></p><p>闭包是一个函数值，它引用了其外部作用域中的变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">closureExample</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>延迟调用</strong></p><p>使用<code>defer</code>关键字可以延迟函数的执行，直到外层函数返回时执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeferExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Deferred call&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Normal call&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> _case</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参</span></span><br><span class="line"><span class="comment">// 局部变量</span></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可以有多个形参和多个返回值，返回值也可以和形参一样拥有参数名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumCase</span><span class="params">(a,b <span class="type">int</span>)</span></span> (sum <span class="type">int</span>, err <span class="type">error</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt;= <span class="number">0</span> &amp;&amp; b &lt;= <span class="number">0</span>&#123;</span><br><span class="line">        err = errors.New(<span class="string">&quot;两数相加不能同时小于0&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum = a + b</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name String</span><br><span class="line">    Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumCase2</span><span class="params">(a, b <span class="type">int</span>)</span></span> (user *User, sum <span class="type">int</span>, err <span class="type">error</span>)&#123;</span><br><span class="line">    <span class="comment">// user 为 nil 会出现异常</span></span><br><span class="line">    user.Name = <span class="string">&quot;nick&quot;</span></span><br><span class="line">    user.Age = <span class="number">18</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> a &lt;= <span class="number">0</span> &amp;&amp; b &lt;= <span class="number">0</span>&#123;</span><br><span class="line">        err = errors.New(<span class="string">&quot;两数相加不能同时小于0&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sum = a + b</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值传递与引用传递</span></span><br><span class="line"><span class="comment">// _case.ReferenceCase(a , &amp;b)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReferenceCase</span><span class="params">(a <span class="type">int</span>, b *<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    *b += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量 小写为私有全局 大写为公有全局</span></span><br><span class="line"><span class="keyword">var</span> g <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> G <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量作用域</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScopeCase</span><span class="params">(a, b <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    c := <span class="number">100</span></span><br><span class="line">    g = a + b + c</span><br><span class="line">    G = g</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUser</span><span class="params">(name <span class="type">string</span>, age <span class="type">int</span>)</span></span> *User &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;User&#123;Name: name, Age: age&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户的名字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> GetName() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户的年龄</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> GetAge() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> u.Age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改用户的年龄</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> SetAge(age <span class="type">int</span>) &#123;</span><br><span class="line">    u.Age = age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符与优先级"><a href="#运算符与优先级" class="headerlink" title="运算符与优先级"></a>运算符与优先级</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><p>除了您已经列出的基本算术运算符，还有一些需要注意的点：</p><ul><li>整数除法会舍去小数部分</li><li><code>++</code> 和 <code>--</code> 是语句，不是表达式，不能用在赋值语句中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArithmeticExtraCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 整数除法</span></span><br><span class="line">    fmt.Println(<span class="number">5</span> / <span class="number">2</span>)  <span class="comment">// 输出: 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浮点数除法</span></span><br><span class="line">    fmt.Println(<span class="number">5.0</span> / <span class="number">2.0</span>)  <span class="comment">// 输出: 2.5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ++ 和 -- 的使用</span></span><br><span class="line">    x := <span class="number">5</span></span><br><span class="line">    x++</span><br><span class="line">    fmt.Println(x)  <span class="comment">// 输出: 6</span></span><br><span class="line">    <span class="comment">// 以下代码会编译错误</span></span><br><span class="line">    <span class="comment">// y := x++</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2. 关系运算符"></a>2. 关系运算符</h3><p>Go语言中的关系运算符可以用于比较不同类型的值，但必须是可比较的类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RelationExtraCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 比较不同类型</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int64</span> = <span class="number">5</span></span><br><span class="line">    <span class="comment">// fmt.Println(a == b)  // 编译错误：不同类型不能直接比较</span></span><br><span class="line">    fmt.Println(a == <span class="type">int</span>(b))  <span class="comment">// 正确：先进行类型转换</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较浮点数</span></span><br><span class="line">    fmt.Println(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>)  <span class="comment">// 输出: false，因为浮点数精度问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h3><p>Go语言的逻辑运算符支持短路求值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LogicExtraCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 短路求值</span></span><br><span class="line">    a := <span class="literal">false</span></span><br><span class="line">    b := <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> a &amp;&amp; someFunction() &#123;</span><br><span class="line">        <span class="comment">// someFunction 不会被调用，因为 a 已经是 false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> b || someFunction() &#123;</span><br><span class="line">        <span class="comment">// someFunction 不会被调用，因为 b 已经是 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunction</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;someFunction called&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4. 位运算符"></a>4. 位运算符</h3><p>Go语言的位运算符中，<code>&amp;^</code> 是按位清零运算符，它的行为有些特殊。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BitExtraCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">0</span>b1111</span><br><span class="line">    b := <span class="number">0</span>b1010</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%04b\n&quot;</span>, a &amp;^ b)  <span class="comment">// 输出: 0101</span></span><br><span class="line">    <span class="comment">// a &amp;^ b 等价于 a &amp; (^b)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-赋值运算符"><a href="#5-赋值运算符" class="headerlink" title="5. 赋值运算符"></a>5. 赋值运算符</h3><p>Go语言支持多重赋值，这在交换变量值时特别有用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AssignmentExtraCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a, b := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    fmt.Println(a, b)  <span class="comment">// 输出: 1 2</span></span><br><span class="line">    a, b = b, a</span><br><span class="line">    fmt.Println(a, b)  <span class="comment">// 输出: 2 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略某些返回值</span></span><br><span class="line">    _, err := someFunction()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-运算符优先级"><a href="#6-运算符优先级" class="headerlink" title="6. 运算符优先级"></a>6. 运算符优先级</h3><p>除了您列出的优先级，还有一些需要注意的点：</p><ul><li>括号 <code>()</code> 可以用来改变运算顺序</li><li>函数调用、数组索引、切片操作的优先级高于其他运算符</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PriorityCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="number">1</span> + <span class="number">2</span>*<span class="number">3</span>  <span class="comment">// 7</span></span><br><span class="line">    b := (<span class="number">1</span> + <span class="number">2</span>) * <span class="number">3</span>  <span class="comment">// 9</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line"></span><br><span class="line">    arr := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    fmt.Println(arr[<span class="number">2</span>+<span class="number">2</span>])  <span class="comment">// 输出: 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-类型断言和类型转换"><a href="#7-类型断言和类型转换" class="headerlink" title="7. 类型断言和类型转换"></a>7. 类型断言和类型转换</h3><p>虽然不是严格意义上的运算符，但类型断言和类型转换在Go中也很重要：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeAssertionCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">    s, ok := i.(<span class="type">string</span>)</span><br><span class="line">    fmt.Println(s, ok)  <span class="comment">// 输出: hello true</span></span><br><span class="line"></span><br><span class="line">    f, ok := i.(<span class="type">float64</span>)</span><br><span class="line">    fmt.Println(f, ok)  <span class="comment">// 输出: 0 false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换</span></span><br><span class="line">    <span class="keyword">var</span> x <span class="type">int</span> = <span class="number">65</span></span><br><span class="line">    <span class="keyword">var</span> y <span class="type">float64</span> = <span class="type">float64</span>(x)</span><br><span class="line">    <span class="keyword">var</span> z <span class="type">string</span> = <span class="type">string</span>(x)</span><br><span class="line">    fmt.Println(y, z)  <span class="comment">// 输出: 65 A</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> _case</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算数运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArithmeticCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := <span class="number">21</span></span><br><span class="line">    b := <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">    c = a + b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a + b 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c = a - b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a - b 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c = a * b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a * b 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c = a / b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a / b 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c = a % b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a %% b 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    a++</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a++ 的值为 %d \n&quot;</span>, a)</span><br><span class="line">    a--</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a-- 的值为 %d \n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RelationCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := <span class="number">21</span></span><br><span class="line">    b := <span class="number">10</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a == b&quot;</span>,a == b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;a &gt; b&quot;</span>,a &gt; b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;a &lt; b&quot;</span>,a &lt; b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;a &gt;= b&quot;</span>,a &gt;= b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;a &lt;= b&quot;</span>,a &lt;= b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;a != b&quot;</span>,a != b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LogicCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := <span class="literal">true</span></span><br><span class="line">    b := <span class="literal">false</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a &amp;&amp; b&quot;</span>,a &amp;&amp; b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;a || b&quot;</span>,a || b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;!(a &amp;&amp; b)&quot;</span>,!(a &amp;&amp; b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BitCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a unit8 = <span class="number">60</span></span><br><span class="line">    <span class="keyword">var</span> b unit8 = <span class="number">13</span></span><br><span class="line">    <span class="keyword">var</span> c unit8 = <span class="number">0</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,a)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = a &amp; b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = a | b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = a ^ b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = a &lt;&lt; <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = a &gt;&gt; <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = ^a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = a &amp;^ b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">    c = a &amp; ^b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AssignmentCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := <span class="number">21</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">    c = a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;c = a 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c += a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;c += a 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c -= a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;c -= a 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c *= a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;c *= a 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c /= a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;c /= a 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    c %= a</span><br><span class="line">    fmt.Printf(<span class="string">&quot;c %= a 的值为 %d \n&quot;</span>, c)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> b <span class="type">uint8</span> = <span class="number">60</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b 的值为 %d,二进制表示：%08b\n&quot;</span>, b,b)</span><br><span class="line">    b &lt;&lt;= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b &lt;&lt;= 2 的值为 %d,二进制表示：%08b\n&quot;</span>, b,b)</span><br><span class="line">    b &gt;&gt;= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b &gt;&gt;= 2 的值为 %d,二进制表示：%08b\n&quot;</span>, b,b)</span><br><span class="line">    b &amp;= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b &amp;= 2 的值为 %d,二进制表示：%08b\n&quot;</span>, b,b)</span><br><span class="line">    b ^= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b ^= 2 的值为 %d,二进制表示：%08b\n&quot;</span>, b,b)</span><br><span class="line">    b |= <span class="number">2</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;b |= 2 的值为 %d,二进制表示：%08b\n&quot;</span>, b,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符优先级</span></span><br><span class="line"><span class="comment">// 1. 一元运算符优先级最高，例如：++ -- ! ^</span></span><br><span class="line"><span class="comment">// 2. 二元运算符优先级从高到低</span></span><br><span class="line"><span class="comment">// */%&lt;&lt;&gt;&gt;&amp;&amp;^</span></span><br><span class="line"><span class="comment">// +-|^</span></span><br><span class="line"><span class="comment">// ==!=&lt;&lt;=&gt;&gt;=</span></span><br><span class="line"><span class="comment">// &amp;&amp;</span></span><br><span class="line"><span class="comment">// ||</span></span><br></pre></td></tr></table></figure><h2 id="Golang-流程控制"><a href="#Golang-流程控制" class="headerlink" title="Golang 流程控制"></a>Golang 流程控制</h2><h3 id="1-if-语句的简短语法"><a href="#1-if-语句的简短语法" class="headerlink" title="1. if 语句的简短语法"></a>1. if 语句的简短语法</h3><p>Go允许在if语句中执行一个简单的语句，然后再进行条件判断。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ifShortStatement</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x := computeValue(); x &gt; <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;x is greater than 10&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;x is less than or equal to 10&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// x 的作用域仅限于if-else块内</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">computeValue</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-switch-语句的特殊用法"><a href="#2-switch-语句的特殊用法" class="headerlink" title="2. switch 语句的特殊用法"></a>2. switch 语句的特殊用法</h3><p>Go的switch语句比其他语言更灵活。可以使用表达式，也可以省略表达式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switchExtraCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 省略表达式的switch，等同于switch true</span></span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> time.Now().Hour() &lt; <span class="number">12</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Good morning!&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> time.Now().Hour() &lt; <span class="number">17</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Good afternoon!&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Good evening!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多条件case</span></span><br><span class="line">    <span class="keyword">switch</span> num := <span class="number">15</span>; &#123;</span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">50</span> &amp;&amp; num &gt; <span class="number">10</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Number is between 10 and 50&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">100</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;Number is less than 100&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-for-循环的变体"><a href="#3-for-循环的变体" class="headerlink" title="3. for 循环的变体"></a>3. for 循环的变体</h3><p>Go只有for循环，但它可以模拟其他语言的while和do-while循环。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forVariants</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 无限循环</span></span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Infinite loop&quot;</span>)</span><br><span class="line">        count++</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似while的循环</span></span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n &lt; <span class="number">5</span> &#123;</span><br><span class="line">        fmt.Println(n)</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历通道</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">    ch &lt;- <span class="number">1</span></span><br><span class="line">    ch &lt;- <span class="number">2</span></span><br><span class="line">    ch &lt;- <span class="number">3</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Channel value:&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-defer-语句"><a href="#4-defer-语句" class="headerlink" title="4. defer 语句"></a>4. defer 语句</h3><p>defer语句用于延迟函数的执行，直到周围的函数返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;This will be printed last&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;This will be printed first&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;This will be printed second to last&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;This will be printed second&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-panic-和-recover"><a href="#5-panic-和-recover" class="headerlink" title="5. panic 和 recover"></a>5. panic 和 recover</h3><p>panic用于抛出运行时错误，recover用于捕获panic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panicAndRecover</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Recovered from panic:&quot;</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;Something went wrong!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-select-语句"><a href="#6-select-语句" class="headerlink" title="6. select 语句"></a>6. select 语句</h3><p>select用于多路复用，主要用于通道操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">        ch1 &lt;- <span class="string">&quot;one&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">        ch2 &lt;- <span class="string">&quot;two&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;-ch1:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Received&quot;</span>, msg1)</span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;-ch2:</span><br><span class="line">            fmt.Println(<span class="string">&quot;Received&quot;</span>, msg2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> _case</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FlowControlCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ifElseCase(<span class="number">0</span>)</span><br><span class="line">    ifElseCase(<span class="number">1</span>)</span><br><span class="line">    ifElseCase(<span class="number">2</span>)</span><br><span class="line">    forCase()</span><br><span class="line">    switchCase(<span class="string">&quot;A&quot;</span>,<span class="number">1</span>)</span><br><span class="line">    switchCase(<span class="string">&quot;C&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    gotoCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ifElseCase</span><span class="params">(a <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;if&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> a == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;else if&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;else&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">5</span>&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;for i&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> b &#123;</span><br><span class="line">         fmt.Println(<span class="string">&quot;for b&quot;</span>, i)</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">10</span>&#123;</span><br><span class="line">            b = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    list := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> index,data := <span class="keyword">range</span> list&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;index,data := range list&quot;</span>, index , data)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mp := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;A&quot;</span>:<span class="string">&quot;a&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;C&quot;</span>: <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> key,value := <span class="keyword">range</span> mp&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;key,value := range mp&quot;</span>, key , value)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    str := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    <span class="keyword">for</span> index,char := <span class="keyword">range</span> str&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;index,char := range str&quot;</span>, index , <span class="type">string</span>(char))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> j <span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;for&quot;</span>, j)</span><br><span class="line">        j++</span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">lab1:</span><br><span class="line">    <span class="keyword">for</span> i: = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++&#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;for i for j&quot;</span>, i , j)</span><br><span class="line">            <span class="keyword">break</span> lab1 </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switchCase</span><span class="params">(alpha <span class="type">string</span>, in <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> alpha&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">        <span class="comment">// 只穿透一次</span></span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;E&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;F&quot;</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> in.(<span class="keyword">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;string&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;int&quot;</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gotoCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line">lab1:</span><br><span class="line">    fmt.Println(<span class="string">&quot;goto lab1&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="number">1</span> := <span class="number">0</span>; i &lt;<span class="number">10</span>; i++ &#123;</span><br><span class="line">        a += i</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span> &#123;</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">goto</span> lab1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Golang-泛型编程"><a href="#Golang-泛型编程" class="headerlink" title="Golang 泛型编程"></a>Golang 泛型编程</h2><h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><ol><li>泛型即开发过程中编写适用于所有类型的模板，只有在具体使用的时候才能确定其真正的类型</li></ol><h3 id="泛型的作用与应用场景"><a href="#泛型的作用与应用场景" class="headerlink" title="泛型的作用与应用场景"></a>泛型的作用与应用场景</h3><ol><li>增加代码的复用，从同类型的复用到不同类型的代码复用</li><li>应用于不同类型间代码复用的场景，即不同类型需要写相同的处理逻辑时，最适合用泛型</li></ol><h3 id="泛型的利弊"><a href="#泛型的利弊" class="headerlink" title="泛型的利弊"></a>泛型的利弊</h3><ol><li>提高了代码复用率，提高了编程效率</li><li>不同类型间代码复用，使得代码风格更加优雅</li><li>增加了编译器的负担，降低了编译效率</li></ol><h3 id="golang的泛型怎么使用"><a href="#golang的泛型怎么使用" class="headerlink" title="golang的泛型怎么使用"></a>golang的泛型怎么使用</h3><ol><li>泛型函数</li><li>泛型类型</li><li>泛型接口</li><li>泛型结构体</li><li>泛型receiver</li></ol><h3 id="泛型限制"><a href="#泛型限制" class="headerlink" title="泛型限制"></a>泛型限制</h3><ol><li>匿名结构体与匿名函数不支持泛型</li><li>不支持类型断言</li><li>不支持泛型方法，只能通过receiver来实现方法的泛型处理</li><li>~后的类型必须为基础类型，不能为接口类型</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> _case</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMaxNumInt</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMaxNumFloat</span><span class="params">(a, b <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当传入 *int *被识别成乘法时需要使用interface括起来</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMaxNum</span>[<span class="title">T</span> <span class="title">interface</span></span>&#123; <span class="type">int</span> | <span class="type">float64</span> &#125;](a, b T) T &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CusNumT <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 支持的类型 ~ 包括当前类型及衍生类型</span></span><br><span class="line">    <span class="comment">// | 表示取并集</span></span><br><span class="line">    <span class="comment">// 多行取交集</span></span><br><span class="line">    <span class="type">uint8</span> | <span class="type">int32</span> | <span class="type">float64</span> | ~<span class="type">int64</span></span><br><span class="line">    <span class="type">int32</span> | <span class="type">float64</span> | ~<span class="type">int64</span> | <span class="type">uint16</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyInt64 为int64的衍生类型，是具有基础类型int64的新类型，与int64是不同类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt64 <span class="type">int64</span></span><br><span class="line"><span class="comment">// MyInt32 为int32 的别名，与int32是同一类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt32 = <span class="type">int32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMaxCusNum</span>[<span class="title">T</span> <span class="title">CusNumT</span>]<span class="params">(a, b T)</span></span> T &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBuiltInComparable</span>[<span class="title">T</span> <span class="title">comparable</span>]<span class="params">(a, b T)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line">    <span class="comment">// comparable 类型，只支持 == != 两个操作</span></span><br><span class="line">    <span class="keyword">if</span> a == b&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBuiltInAny</span>[<span class="title">T</span> <span class="title">any</span>] <span class="params">(a T)</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;内置 any 泛型类型的约束&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SimpleCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a, b = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> c, d <span class="type">float64</span> = <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;不使用泛型，数字比较：&quot;</span>,getMaxNumInt(a, b))</span><br><span class="line">    fmt.Println(<span class="string">&quot;不使用泛型，数字比较：&quot;</span>,getMaxNumFloat(a, b))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由编译器推断输入的类型</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;使用泛型，数字比较：&quot;</span>,getMaxNum(a, b))</span><br><span class="line">    <span class="comment">//显示指定传入的类型</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;使用泛型，数字比较：&quot;</span>,getMaxNum[<span class="type">float64</span>](a, b))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a1, b1 <span class="type">int32</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> c1, d1 MyInt32 = <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;自定义泛型，数字比较：&quot;</span>,getMaxCusNum(a1, b1))</span><br><span class="line">    fmt.Println(<span class="string">&quot;自定义泛型，数字比较：&quot;</span>,getMaxCusNum(c1, d1))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> c2, d2 <span class="type">float64</span> = <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;自定义泛型，数字比较：&quot;</span>,getMaxCusNum(c2, d2))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> e, f <span class="type">int64</span> = <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">    <span class="keyword">var</span> g, h MyInt64 = <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;自定义泛型，数字比较：&quot;</span>,getMaxCusNum(e, f))</span><br><span class="line">    fmt.Println(<span class="string">&quot;自定义泛型，数字比较：&quot;</span>,getMaxCusNum(g, h))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a2, b2 = <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;efg&quot;</span></span><br><span class="line">    <span class="keyword">var</span> a3, b3 <span class="type">int32</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;内置 comparable 泛型类型约束：&quot;</span>,getBuiltInComparable(a2, b2))</span><br><span class="line">    fmt.Println(<span class="string">&quot;内置 comparable 泛型类型约束：&quot;</span>,getBuiltInComparable(a3, b3))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a4 = <span class="string">&quot;abc&quot;</span></span><br><span class="line">    printBuiltInAny(a4)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID <span class="type">int64</span></span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age <span class="type">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> address <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID <span class="type">int</span></span><br><span class="line">    Province <span class="type">string</span></span><br><span class="line">    City <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 集合转列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapToList</span>[<span class="title">k</span> <span class="title">comparable</span>, <span class="title">T</span> <span class="title">any</span>]<span class="params">(mp <span class="keyword">map</span>[k]T)</span></span> []T &#123;</span><br><span class="line">    list := <span class="built_in">make</span>([]T, <span class="built_in">len</span>(mp))</span><br><span class="line">    <span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> _,data := <span class="keyword">range</span> mp&#123;</span><br><span class="line">        list[i] = data</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPrintln</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(ch <span class="keyword">chan</span> T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> data := <span class="keyword">range</span> ch&#123;</span><br><span class="line">        fmt.Println(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TTypeCase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userMp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int64</span>]user, <span class="number">0</span>)</span><br><span class="line">    userMap[<span class="number">1</span>] = user&#123;ID: <span class="number">1</span>,Name: <span class="string">&quot;nick&quot;</span>, Age: <span class="number">18</span>&#125;</span><br><span class="line">    userMap[<span class="number">2</span>] = user&#123;ID: <span class="number">2</span>,Name: <span class="string">&quot;king&quot;</span>, Age: <span class="number">19</span>&#125;</span><br><span class="line">    userList := mapToList[<span class="type">int64</span>,user](userMp)</span><br><span class="line">    </span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> user)</span><br><span class="line">    <span class="keyword">go</span> myPrintln(ch)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _, u := <span class="keyword">range</span> userList &#123;</span><br><span class="line">        ch &lt;- u</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Go学习笔记&quot;&gt;&lt;a href=&quot;#Go学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Go学习笔记&quot;&gt;&lt;/a&gt;Go学习笔记&lt;/h1&gt;&lt;h2 id=&quot;编译go-build&quot;&gt;&lt;a href=&quot;#编译go-build&quot; class=&quot;headerlink&quot; title=&quot;编译go build&quot;&gt;&lt;/a&gt;编译go build&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;编译当前目录&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker.ui管理工具安装</title>
    <link href="https://blog.48626.xyz/f00ecc3316fa.html"/>
    <id>https://blog.48626.xyz/f00ecc3316fa.html</id>
    <published>2024-11-07T07:15:08.000Z</published>
    <updated>2024-11-07T07:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、docker-ui"><a href="#一、docker-ui" class="headerlink" title="一、docker.ui"></a>一、docker.ui</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>   一个用于<a href="https://cloud.tencent.com/product/tke?from_column=20065&from=20065">docker</a><a href="https://cloud.tencent.com/product/tke?from_column=20065&from=20065">容器</a>和docker集群的可视化管理工具，您可以浏览和维护docker单节点或集群节点worker和Manager。 </p><img src="/f00ecc3316fa/086d79d03417c933c7387658a2fb8989.png" class="" alt="在这里插入图片描述"><p>在这里插入图片描述</p><h4 id="2、docker-ui安装"><a href="#2、docker-ui安装" class="headerlink" title="2、docker.ui安装"></a>2、docker.ui安装</h4><p>  安装命令如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name docker.<span class="property">ui</span> \</span><br><span class="line">-p <span class="number">8999</span>:<span class="number">8999</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /<span class="keyword">var</span>/run/docker.<span class="property">sock</span>:<span class="regexp">/var/</span>run/docker.<span class="property">sock</span> \</span><br><span class="line">-d joinsunsoft/docker.<span class="property">ui</span></span><br></pre></td></tr></table></figure><p>复制</p><p><strong>参数说明：</strong></p><ul><li>docker run：启动container</li><li>–name：容器命名</li><li>–restart&#x3D;always：自启动</li><li>–privileged&#x3D;true：权限</li><li>-p：映射容器的端口到主机上的端口</li><li>-v：将容器的目录映射到本地计算机上目录中</li><li>-e：参数</li><li>-d：在后台运行容器</li></ul><h4 id="3、启动效果"><a href="#3、启动效果" class="headerlink" title="3、启动效果"></a>3、启动效果</h4><p>你可以访问：<a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://localhost:8999./&source=article&objectId=2292016">http://localhost:8999</a> 默认用户名密码：<strong>ginghan</strong>&#x2F;<strong>123456</strong> </p><img src="/f00ecc3316fa/23c8cf09b782ff37d9a5aadff3fab5e8.png" class="" alt="在这里插入图片描述"><p>在这里插入图片描述</p><img src="/f00ecc3316fa/76aff32d7aadd8d497a5b3614c72b135.png" class="" alt="在这里插入图片描述"><p>在这里插入图片描述</p><img src="/f00ecc3316fa/image-20240408233037491.png" class="" alt="image-20240408233037491">]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、docker-ui&quot;&gt;&lt;a href=&quot;#一、docker-ui&quot; class=&quot;headerlink&quot; title=&quot;一、docker.ui&quot;&gt;&lt;/a&gt;一、docker.ui&lt;/h3&gt;&lt;h4 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;&gt;&lt;/a&gt;1、简介&lt;/h4&gt;&lt;p&gt;   一个用于&lt;a href=&quot;https://cloud.tencent.com/product/tke?from_column=20065&amp;from=20065&quot;&gt;docker&lt;/a&gt;&lt;a href=&quot;https://cloud.tencent.com/product/tke?from_column=20065&amp;from=20065&quot;&gt;容器&lt;/a&gt;和docker集群的可视化管理工具，您可以浏览和维护docker单节点或集群节点worker和Manager。 &lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://blog.48626.xyz/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.48626.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>开启Docker2375</title>
    <link href="https://blog.48626.xyz/4c5cf7f848af.html"/>
    <id>https://blog.48626.xyz/4c5cf7f848af.html</id>
    <published>2024-11-07T07:10:44.000Z</published>
    <updated>2024-11-07T07:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用cmd的ssh进入控制台（管理员模式）"><a href="#使用cmd的ssh进入控制台（管理员模式）" class="headerlink" title="使用cmd的ssh进入控制台（管理员模式）"></a>使用cmd的ssh进入控制台（管理员模式）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/packages/ContainerManager/etc</span><br><span class="line">vim dockerd.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用标准json不要在最后对象添加&#x27;,&#x27;会无法启动</span></span><br><span class="line">&#123;<span class="string">&quot;data-root&quot;</span>:<span class="string">&quot;/var/packages/ContainerManager/var/docker&quot;</span>,<span class="string">&quot;hosts&quot;</span>:[<span class="string">&quot;unix:///var/run/docker.sock&quot;</span>,<span class="string">&quot;tcp://0.0.0.0:2375&quot;</span>],<span class="string">&quot;log-driver&quot;</span>:<span class="string">&quot;db&quot;</span>,<span class="string">&quot;registry-mirrors&quot;</span>:[],<span class="string">&quot;storage-driver&quot;</span>:<span class="string">&quot;btrfs&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加的数据为</span></span><br><span class="line"><span class="comment"># &quot;hosts&quot;:[&quot;unix:///var/run/docker.sock&quot;,&quot;tcp://0.0.0.0:2375&quot;]</span></span><br><span class="line"><span class="comment"># 请求地址为http://192.168.3.19:2375/version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加TLS</span></span><br><span class="line"><span class="comment"># &quot;hosts&quot;: [&quot;unix:///var/run/docker.sock&quot;, &quot;tcp://0.0.0.0:2375&quot;],</span></span><br><span class="line"><span class="comment">#  &quot;tls&quot; : true,</span></span><br><span class="line"><span class="comment">#  &quot;tlscacert&quot;: &quot;/volume1/docker/certs/ca.pem&quot;,</span></span><br><span class="line"><span class="comment">#  &quot;tlscert&quot;: &quot;/volume1/docker/certs/cert.pem&quot;,</span></span><br><span class="line"><span class="comment">#  &quot;tlskey&quot;: &quot;/volume1/docker/certs/key.pem&quot;,</span></span><br><span class="line"><span class="comment">#  &quot;tlsverify&quot;: true,</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TLS生成"><a href="#TLS生成" class="headerlink" title="TLS生成"></a>TLS生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CA_KEY=<span class="variable">$&#123;CA_KEY-&quot;ca-key.pem&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> CA_CERT=<span class="variable">$&#123;CA_CERT-&quot;ca.pem&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> CA_SUBJECT=<span class="variable">$&#123;CA_SUBJECT:-&quot;test-ca&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> CA_EXPIRE=<span class="variable">$&#123;CA_EXPIRE:-&quot;3650&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SSL_CONFIG=<span class="variable">$&#123;SSL_CONFIG:-&quot;openssl.cnf&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> SSL_KEY=<span class="variable">$&#123;SSL_KEY:-&quot;key.pem&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> SSL_CSR=<span class="variable">$&#123;SSL_CSR:-&quot;key.csr&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> SSL_CERT=<span class="variable">$&#123;SSL_CERT:-&quot;cert.pem&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> SSL_SIZE=<span class="variable">$&#123;SSL_SIZE:-&quot;4096&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> SSL_EXPIRE=<span class="variable">$&#123;SSL_EXPIRE:-&quot;3650&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SSL_SUBJECT=<span class="variable">$&#123;SSL_SUBJECT:-&quot;example.com&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> SSL_DNS=<span class="variable">$&#123;SSL_DNS&#125;</span></span><br><span class="line"><span class="built_in">export</span> SSL_IP=<span class="variable">$&#123;SSL_IP&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Print IP v4 addresses, select only the interface and address, exclude certain interfaces, remove everything except the IP address, replace new line characters \n with comma (,), remove comma from end of string if exists</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name for docker daemon file</span></span><br><span class="line"><span class="built_in">export</span> DAEMON=<span class="variable">$&#123;DAEMON:-&quot;daemon.json&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> K8S_NAME=<span class="variable">$&#123;K8S_NAME:-&quot;omgwtfssl&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> K8S_NAMESPACE=<span class="variable">$&#123;K8S_NAMESPACE:-&quot;default&quot;&#125;</span></span><br><span class="line"><span class="built_in">export</span> K8S_SAVE_CA_KEY=<span class="variable">$&#123;K8S_SAVE_CA_KEY&#125;</span></span><br><span class="line"><span class="built_in">export</span> K8S_SAVE_CA_CRT=<span class="variable">$&#123;K8S_SAVE_CA_CRT&#125;</span></span><br><span class="line"><span class="built_in">export</span> K8S_SHOW_SECRET=<span class="variable">$&#123;K8S_SHOW_SECRET&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OUTPUT=<span class="variable">$&#123;OUTPUT:-&quot;yaml&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Generating new config file <span class="variable">$&#123;SSL_CONFIG&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># needed for k8s cert-manager compatibility</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">[ v3_ca ]</span></span><br><span class="line"><span class="string">basicConstraints = critical,CA:TRUE</span></span><br><span class="line"><span class="string">subjectKeyIdentifier = hash</span></span><br><span class="line"><span class="string">authorityKeyIdentifier = keyid:always,issuer:always</span></span><br><span class="line"><span class="string">&quot;</span> &gt;&gt; /etc/ssl/openssl.cnf</span><br><span class="line"></span><br><span class="line">[[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;--&gt; Certificate Authority&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -e ./<span class="variable">$&#123;CA_KEY&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Using existing CA Key <span class="variable">$&#123;CA_KEY&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Generating new CA key <span class="variable">$&#123;CA_KEY&#125;</span>&quot;</span></span><br><span class="line">    openssl genrsa -out <span class="variable">$&#123;CA_KEY&#125;</span> <span class="variable">$&#123;SSL_SIZE&#125;</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -e ./<span class="variable">$&#123;CA_CERT&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Using existing CA Certificate <span class="variable">$&#123;CA_CERT&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Generating new CA Certificate <span class="variable">$&#123;CA_CERT&#125;</span>&quot;</span></span><br><span class="line">    openssl req -x509 -new -nodes -key <span class="variable">$&#123;CA_KEY&#125;</span> -days <span class="variable">$&#123;CA_EXPIRE&#125;</span> -out <span class="variable">$&#123;CA_CERT&#125;</span> -extensions v3_ca -subj <span class="string">&quot;/CN=<span class="variable">$&#123;CA_SUBJECT&#125;</span>&quot;</span> &gt; /dev/null  || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;SSL_CONFIG&#125;</span> &lt;&lt;<span class="string">EOM</span></span><br><span class="line"><span class="string">[ v3_ca ]</span></span><br><span class="line"><span class="string">subjectKeyIdentifier = hash</span></span><br><span class="line"><span class="string">authorityKeyIdentifier = keyid:always,issuer:always</span></span><br><span class="line"><span class="string">basicConstraints = CA:true</span></span><br><span class="line"><span class="string">[req]</span></span><br><span class="line"><span class="string">x509_extensions = v3_ca</span></span><br><span class="line"><span class="string">req_extensions = v3_req</span></span><br><span class="line"><span class="string">distinguished_name = req_distinguished_name</span></span><br><span class="line"><span class="string">[req_distinguished_name]</span></span><br><span class="line"><span class="string">[ v3_ca ]</span></span><br><span class="line"><span class="string">basicConstraints = critical,CA:TRUE</span></span><br><span class="line"><span class="string">subjectKeyIdentifier = hash</span></span><br><span class="line"><span class="string">authorityKeyIdentifier = keyid:always,issuer:always</span></span><br><span class="line"><span class="string">[ v3_req ]</span></span><br><span class="line"><span class="string">basicConstraints = CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = clientAuth, serverAuth</span></span><br><span class="line"><span class="string">EOM</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ips=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="variable">$&#123;SSL_DNS&#125;</span> || -n <span class="variable">$&#123;SSL_IP&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cat</span> &gt;&gt; <span class="variable">$&#123;SSL_CONFIG&#125;</span> &lt;&lt;<span class="string">EOM</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">EOM</span></span><br><span class="line"></span><br><span class="line">IFS=<span class="string">&quot;,&quot;</span></span><br><span class="line">dns=(<span class="variable">$&#123;SSL_DNS&#125;</span>)</span><br><span class="line">dns+=(<span class="variable">$&#123;SSL_SUBJECT&#125;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;!dns[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> DNS.$((i+<span class="number">1</span>)) = <span class="variable">$&#123;dns[$i]&#125;</span> &gt;&gt; <span class="variable">$&#123;SSL_CONFIG&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="variable">$&#123;SSL_IP&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    ip=(<span class="variable">$&#123;SSL_IP&#125;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;!ip[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">echo</span> IP.$((i+<span class="number">1</span>)) = <span class="variable">$&#123;ip[$i]&#125;</span> &gt;&gt; <span class="variable">$&#123;SSL_CONFIG&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;--&gt; Certificate Authority&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -e ./<span class="variable">$&#123;CA_KEY&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Using existing CA Key <span class="variable">$&#123;CA_KEY&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Generating new CA key <span class="variable">$&#123;CA_KEY&#125;</span>&quot;</span></span><br><span class="line">    openssl genrsa -out <span class="variable">$&#123;CA_KEY&#125;</span> <span class="variable">$&#123;SSL_SIZE&#125;</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -e ./<span class="variable">$&#123;CA_CERT&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Using existing CA Certificate <span class="variable">$&#123;CA_CERT&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    [[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Generating new CA Certificate <span class="variable">$&#123;CA_CERT&#125;</span>&quot;</span></span><br><span class="line">    openssl req -x509 -new -nodes -key <span class="variable">$&#123;CA_KEY&#125;</span> -days <span class="variable">$&#123;CA_EXPIRE&#125;</span> -out <span class="variable">$&#123;CA_CERT&#125;</span> -subj <span class="string">&quot;/CN=<span class="variable">$&#123;CA_SUBJECT&#125;</span>&quot;</span> -config <span class="variable">$&#123;SSL_CONFIG&#125;</span> &gt; /dev/null  || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Generating new SSL KEY <span class="variable">$&#123;SSL_KEY&#125;</span>&quot;</span></span><br><span class="line">openssl genrsa -out <span class="variable">$&#123;SSL_KEY&#125;</span> <span class="variable">$&#123;SSL_SIZE&#125;</span> &gt; /dev/null || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line">[[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Generating new SSL CSR <span class="variable">$&#123;SSL_CSR&#125;</span>&quot;</span></span><br><span class="line">openssl req -new -key <span class="variable">$&#123;SSL_KEY&#125;</span> -out <span class="variable">$&#123;SSL_CSR&#125;</span> -subj <span class="string">&quot;/CN=<span class="variable">$&#123;SSL_SUBJECT&#125;</span>&quot;</span> -config <span class="variable">$&#123;SSL_CONFIG&#125;</span> &gt; /dev/null || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line">[[ -z <span class="variable">$SILENT</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;====&gt; Generating new SSL CERT <span class="variable">$&#123;SSL_CERT&#125;</span>&quot;</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> <span class="variable">$&#123;SSL_CSR&#125;</span> -CA <span class="variable">$&#123;CA_CERT&#125;</span> -CAkey <span class="variable">$&#123;CA_KEY&#125;</span> -CAcreateserial -out <span class="variable">$&#123;SSL_CERT&#125;</span> \</span><br><span class="line">    -days <span class="variable">$&#123;SSL_EXPIRE&#125;</span> -extensions v3_req -extfile <span class="variable">$&#123;SSL_CONFIG&#125;</span> &gt; /dev/null || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cleanup unnecessary files</span></span><br><span class="line"><span class="comment"># rm -v key.csr openssl.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># permissions to protect the keys</span></span><br><span class="line"><span class="built_in">chmod</span> -v 0400 ca-key.pem key.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># create daemon file</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    \&quot;hosts\&quot;: [\&quot;unix:///var/run/docker.sock\&quot;, \&quot;tcp://0.0.0.0:2375\&quot;],</span></span><br><span class="line"><span class="string">    \&quot;tls\&quot;: true,</span></span><br><span class="line"><span class="string">    \&quot;tlscacert\&quot;: \&quot;<span class="subst">$(pwd)</span>/<span class="variable">$&#123;CA_CERT&#125;</span>\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;tlscert\&quot;: \&quot;<span class="subst">$(pwd)</span>/<span class="variable">$&#123;SSL_CERT&#125;</span>\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;tlskey\&quot;: \&quot;<span class="subst">$(pwd)</span>/<span class="variable">$&#123;SSL_KEY&#125;</span>\&quot;,</span></span><br><span class="line"><span class="string">    \&quot;tlsverify\&quot;: true</span></span><br><span class="line"><span class="string">&#125;    </span></span><br><span class="line"><span class="string">&quot;</span> &gt; <span class="variable">$&#123;DAEMON&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="variable">$SILENT</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====&gt; Complete&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;keys can be found in volume mapped to <span class="subst">$(pwd)</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用cmd的ssh进入控制台（管理员模式）&quot;&gt;&lt;a href=&quot;#使用cmd的ssh进入控制台（管理员模式）&quot; class=&quot;headerlink&quot; title=&quot;使用cmd的ssh进入控制台（管理员模式）&quot;&gt;&lt;/a&gt;使用cmd的ssh进入控制台（管理员模式）&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /var/packages/ContainerManager/etc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim dockerd.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用标准json不要在最后对象添加&amp;#x27;,&amp;#x27;会无法启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;data-root&amp;quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;/var/packages/ContainerManager/var/docker&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;hosts&amp;quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&amp;quot;unix:///var/run/docker.sock&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;tcp://0.0.0.0:2375&amp;quot;&lt;/span&gt;],&lt;span class=&quot;string&quot;&gt;&amp;quot;log-driver&amp;quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;db&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;registry-mirrors&amp;quot;&lt;/span&gt;:[],&lt;span class=&quot;string&quot;&gt;&amp;quot;storage-driver&amp;quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;quot;btrfs&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 添加的数据为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &amp;quot;hosts&amp;quot;:[&amp;quot;unix:///var/run/docker.sock&amp;quot;,&amp;quot;tcp://0.0.0.0:2375&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 请求地址为http://192.168.3.19:2375/version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 添加TLS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &amp;quot;hosts&amp;quot;: [&amp;quot;unix:///var/run/docker.sock&amp;quot;, &amp;quot;tcp://0.0.0.0:2375&amp;quot;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  &amp;quot;tls&amp;quot; : true,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  &amp;quot;tlscacert&amp;quot;: &amp;quot;/volume1/docker/certs/ca.pem&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  &amp;quot;tlscert&amp;quot;: &amp;quot;/volume1/docker/certs/cert.pem&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  &amp;quot;tlskey&amp;quot;: &amp;quot;/volume1/docker/certs/key.pem&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  &amp;quot;tlsverify&amp;quot;: true,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;TLS生成&quot;&gt;&lt;a href=&quot;#TLS生成&quot; class=&quot;headerlink&quot; title=&quot;TLS生成&quot;&gt;&lt;/a&gt;TLS生成&lt;/h3&gt;</summary>
    
    
    
    <category term="docker" scheme="https://blog.48626.xyz/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.48626.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>旧电脑安装NAS</title>
    <link href="https://blog.48626.xyz/6634aaa29ec2.html"/>
    <id>https://blog.48626.xyz/6634aaa29ec2.html</id>
    <published>2024-11-07T07:02:19.000Z</published>
    <updated>2024-11-07T07:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><h3 id="旧电脑硬盘数据备份，刷NAS将清空硬盘"><a href="#旧电脑硬盘数据备份，刷NAS将清空硬盘" class="headerlink" title="旧电脑硬盘数据备份，刷NAS将清空硬盘"></a>旧电脑硬盘数据备份，刷NAS将清空硬盘</h3><h3 id="U盘烧录软件下载与安装：https-etcher-balena-io"><a href="#U盘烧录软件下载与安装：https-etcher-balena-io" class="headerlink" title="U盘烧录软件下载与安装：https://etcher.balena.io"></a>U盘烧录软件下载与安装：<a href="https://etcher.balena.io/">https://etcher.balena.io</a></h3><img src="/6634aaa29ec2/image-20231127175805320.png" class="" alt="image-20231127175805320"><h3 id="引导文件下载解压：https-github-com-wjz304-arpl-i18n-releases"><a href="#引导文件下载解压：https-github-com-wjz304-arpl-i18n-releases" class="headerlink" title="引导文件下载解压：https://github.com/wjz304/arpl-i18n/releases"></a>引导文件下载解压：<a href="https://github.com/wjz304/arpl-i18n/releases">https://github.com/wjz304/arpl-i18n/releases</a></h3><img src="/6634aaa29ec2/image-20231127175837167.png" class="" alt="image-20231127175837167"><h3 id="将引导文件烧录至U盘"><a href="#将引导文件烧录至U盘" class="headerlink" title="将引导文件烧录至U盘"></a>将引导文件烧录至U盘</h3><img src="/6634aaa29ec2/image-20231127175935990.png" class="" alt="image-20231127175935990"><img src="/6634aaa29ec2/image-20231127180208341.png" class="" alt="image-20231127180208341"><h3 id="旧电脑连接键盘、鼠标、网线"><a href="#旧电脑连接键盘、鼠标、网线" class="headerlink" title="旧电脑连接键盘、鼠标、网线"></a>旧电脑连接键盘、鼠标、网线</h3><h3 id="调整旧电脑BIOS启动顺序为U盘优先"><a href="#调整旧电脑BIOS启动顺序为U盘优先" class="headerlink" title="调整旧电脑BIOS启动顺序为U盘优先"></a>调整旧电脑BIOS启动顺序为U盘优先</h3><h2 id="NAS系统安装与设置："><a href="#NAS系统安装与设置：" class="headerlink" title="NAS系统安装与设置："></a>NAS系统安装与设置：</h2><h3 id="旧电脑插入引导U盘后启动"><a href="#旧电脑插入引导U盘后启动" class="headerlink" title="旧电脑插入引导U盘后启动"></a>旧电脑插入引导U盘后启动</h3><p>可能会出现没有IP的情况这时候需要直接使用安装环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./menu.sh</span><br></pre></td></tr></table></figure><blockquote><p>TODO WIFI连接的方式没有找到，暂时直接使用网线</p></blockquote><img src="/6634aaa29ec2/image-20231127205427275.png" class="" alt="image-20231127205427275"><h3 id="路由器后台查看电脑IP地址"><a href="#路由器后台查看电脑IP地址" class="headerlink" title="路由器后台查看电脑IP地址"></a>路由器后台查看电脑IP地址</h3><img src="/6634aaa29ec2/image-20231127205932355.png" class="" alt="image-20231127205932355"><h3 id="编译引导："><a href="#编译引导：" class="headerlink" title="编译引导："></a>编译引导：</h3><img src="/6634aaa29ec2/image-20231127210007219.png" class="" alt="image-20231127210007219"><h4 id="旧电脑IP地址-7681"><a href="#旧电脑IP地址-7681" class="headerlink" title="旧电脑IP地址:7681"></a>旧电脑IP地址:7681</h4><h4 id="型号：建议选择DS918"><a href="#型号：建议选择DS918" class="headerlink" title="型号：建议选择DS918+"></a>型号：建议选择DS918+</h4><img src="/6634aaa29ec2/image-20231127210018233.png" class="" alt="image-20231127210018233"><h4 id="版本：选择7-2"><a href="#版本：选择7-2" class="headerlink" title="版本：选择7.2"></a>版本：选择7.2</h4><img src="/6634aaa29ec2/image-20231127210030367.png" class="" alt="image-20231127210030367"><h4 id="再次到路由器后台查看电脑IP地址"><a href="#再次到路由器后台查看电脑IP地址" class="headerlink" title="再次到路由器后台查看电脑IP地址"></a>再次到路由器后台查看电脑IP地址</h4><img src="/6634aaa29ec2/image-20231127210057939.png" class="" alt="image-20231127210057939"><h4 id="NAS系统安装：旧电脑IP地址-5000"><a href="#NAS系统安装：旧电脑IP地址-5000" class="headerlink" title="NAS系统安装：旧电脑IP地址:5000"></a>NAS系统安装：旧电脑IP地址:5000</h4><img src="/6634aaa29ec2/image-20231127210132894.png" class="" alt="image-20231127210132894"><h4 id="NAS系统初始设置"><a href="#NAS系统初始设置" class="headerlink" title="NAS系统初始设置"></a>NAS系统初始设置</h4><img src="/6634aaa29ec2/image-20231127210259476.png" class="" alt="image-20231127210259476"><img src="/6634aaa29ec2/image-20231127210307577.png" class="" alt="image-20231127210307577"><img src="/6634aaa29ec2/image-20231127210318565.png" class="" alt="image-20231127210318565"><img src="/6634aaa29ec2/image-20231127210333189.png" class="" alt="image-20231127210333189"><img src="/6634aaa29ec2/image-20231127210351339.png" class="" alt="image-20231127210351339"><img src="/6634aaa29ec2/image-20231127210400435.png" class="" alt="image-20231127210400435"><img src="/6634aaa29ec2/image-20231127210414704.png" class="" alt="image-20231127210414704"><h4 id="创建存储池和存储空间"><a href="#创建存储池和存储空间" class="headerlink" title="创建存储池和存储空间"></a>创建存储池和存储空间</h4><img src="/6634aaa29ec2/image-20231127210425951.png" class="" alt="image-20231127210425951"><img src="/6634aaa29ec2/image-20231127210435772.png" class="" alt="image-20231127210435772"><img src="/6634aaa29ec2/image-20231127210449480.png" class="" alt="image-20231127210449480"><img src="/6634aaa29ec2/image-20231127210513542.png" class="" alt="image-20231127210513542"><img src="/6634aaa29ec2/image-20231127210550993.png" class="" alt="image-20231127210550993"><img src="/6634aaa29ec2/image-20231127210612789.png" class="" alt="image-20231127210600610"><img src="/6634aaa29ec2/image-20231127210622303.png" class="" alt="image-20231127210622303"><img src="/6634aaa29ec2/image-20231127210936190.png" class="" alt="image-20231127210936190"><h4 id="创建共享文件夹：NAS-控制面板-共享文件夹"><a href="#创建共享文件夹：NAS-控制面板-共享文件夹" class="headerlink" title="创建共享文件夹：NAS-&gt;控制面板-&gt;共享文件夹"></a>创建共享文件夹：NAS-&gt;控制面板-&gt;共享文件夹</h4><img src="/6634aaa29ec2/image-20231127211002989.png" class="" alt="image-20231127211002989"><img src="/6634aaa29ec2/image-20231127211014317.png" class="" alt="image-20231127211014317"><img src="/6634aaa29ec2/image-20231127211023151.png" class="" alt="image-20231127211023151"><img src="/6634aaa29ec2/image-20231127211058563.png" class="" alt="image-20231127211058563"><img src="/6634aaa29ec2/image-20231127211113919.png" class="" alt="image-20231127211113919"><img src="/6634aaa29ec2/image-20231127211146807.png" class="" alt="image-20231127211146807"><img src="/6634aaa29ec2/image-20231127211157689.png" class="" alt="image-20231127211157689"><img src="/6634aaa29ec2/image-20231127212304211.png" class="" alt="image-20231127212304211"><h4 id="修改NAS-IP地址"><a href="#修改NAS-IP地址" class="headerlink" title="修改NAS IP地址"></a>修改NAS IP地址</h4><img src="/6634aaa29ec2/image-20231127211243406.png" class="" alt="image-20231127211243406"><img src="/6634aaa29ec2/image-20231127211903503.png" class="" alt="image-20231127211903503"><img src="/6634aaa29ec2/image-20231127212041229.png" class="" alt="image-20231127212041229"><h4 id="局域网访问共享文件夹测试"><a href="#局域网访问共享文件夹测试" class="headerlink" title="局域网访问共享文件夹测试"></a>局域网访问共享文件夹测试</h4><img src="/6634aaa29ec2/image-20231127212150083.png" class="" alt="image-20231127212150083"><img src="/6634aaa29ec2/image-20231127212156001.png" class="" alt="image-20231127212156001"><img src="/6634aaa29ec2/image-20231127212319672.png" class="" alt="image-20231127212319672">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;准备工作：&quot;&gt;&lt;a href=&quot;#准备工作：&quot; class=&quot;headerlink&quot; title=&quot;准备工作：&quot;&gt;&lt;/a&gt;准备工作：&lt;/h2&gt;&lt;h3 id=&quot;旧电脑硬盘数据备份，刷NAS将清空硬盘&quot;&gt;&lt;a href=&quot;#旧电脑硬盘数据备份，刷NAS将清空硬盘&quot; class=&quot;headerlink&quot; title=&quot;旧电脑硬盘数据备份，刷NAS将清空硬盘&quot;&gt;&lt;/a&gt;旧电脑硬盘数据备份，刷NAS将清空硬盘&lt;/h3&gt;&lt;h3 id=&quot;U盘烧录软件下载与安装：https-etcher-balena-io&quot;&gt;&lt;a href=&quot;#U盘烧录软件下载与安装：https-etcher-balena-io&quot; class=&quot;headerlink&quot; title=&quot;U盘烧录软件下载与安装：https://etcher.balena.io&quot;&gt;&lt;/a&gt;U盘烧录软件下载与安装：&lt;a href=&quot;https://etcher.balena.io/&quot;&gt;https://etcher.balena.io&lt;/a&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="nas" scheme="https://blog.48626.xyz/categories/nas/"/>
    
    
    <category term="nas" scheme="https://blog.48626.xyz/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>多次链接错误被阻止</title>
    <link href="https://blog.48626.xyz/4e0b2bc90707.html"/>
    <id>https://blog.48626.xyz/4e0b2bc90707.html</id>
    <published>2024-11-07T03:33:12.000Z</published>
    <updated>2024-11-07T03:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[HY000][1129] null, message from server: &quot;Host &#x27;172.17.0.1&#x27; is blocked because of many connection errors; unblock with &#x27;mysqladmin flush-hosts&#x27;&quot;</span><br></pre></td></tr></table></figure><h2 id="解决描述"><a href="#解决描述" class="headerlink" title="解决描述"></a>解决描述</h2><p>错误信息 <code>[HY000][1129] null, message from server: &quot;Host &#39;172.17.0.1&#39; is blocked because of many connection errors; unblock with &#39;mysqladmin flush-hosts&#39;&quot;</code> 表示 MySQL 服务器已阻止主机 <code>172.17.0.1</code> 进行更多连接。这种情况通常发生在短时间内有太多连接尝试失败时，服务器将其视为潜在的安全风险或配置错误的客户端。</p><p>要解决这个问题，可以按照错误信息中给出的建议执行 <code>mysqladmin flush-hosts</code> 命令。该命令会清除被阻止的主机列表，允许受影响的主机再次尝试连接。具体操作如下</p><ol><li><p>访问服务器终端：登录运行 MySQL 服务器的服务器。</p></li><li><p>运行 <code>mysqladmin flush-hosts</code> 命令：您需要在终端中执行该命令。如果你在特定用户下运行 MySQL 或需要特定权限，请确保在命令中包含这些权限。该命令的常见形式是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p flush-hosts</span><br></pre></td></tr></table></figure><p>运行后，系统可能会提示您输入 MySQL 根密码。</p></li></ol><p> 请注意</p><ul><li>如果不使用 <code>root</code> 用户连接 MySQL，请将 <code>root</code> 替换为适当的用户名。</li><li>如果 <code>mysqladmin</code> 不在系统的 <code>PATH</code> 中，您可能需要指定 <code>mysqladmin</code> 的路径。</li><li>如果您的 MySQL 服务器设置了额外的安全措施或具有自定义配置，解决问题的步骤可能会有所不同。</li></ul><p>此外，还必须调查为什么会出现多次连接尝试失败的情况。这可能是由于使用了不正确的凭证、应用程序配置错误或网络问题。解决根本原因将有助于防止问题再次发生。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;错误信息&quot;&gt;&lt;a href=&quot;#错误信息&quot; class=&quot;headerlink&quot; title=&quot;错误信息&quot;&gt;&lt;/a&gt;错误信息&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[HY000][1129] null, message from server: &amp;quot;Host &amp;#x27;172.17.0.1&amp;#x27; is blocked because of many connection errors; unblock with &amp;#x27;mysqladmin flush-hosts&amp;#x27;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;解决描述&quot;&gt;&lt;a href=&quot;#解决描述&quot; class=&quot;headerlink&quot; title=&quot;解决描述&quot;&gt;&lt;/a&gt;解决描述&lt;/h2&gt;</summary>
    
    
    
    <category term="mysql" scheme="https://blog.48626.xyz/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://blog.48626.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Gradle</title>
    <link href="https://blog.48626.xyz/2f95dd0d983d.html"/>
    <id>https://blog.48626.xyz/2f95dd0d983d.html</id>
    <published>2024-10-28T08:06:06.000Z</published>
    <updated>2024-10-28T08:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gradle-入门"><a href="#Gradle-入门" class="headerlink" title="Gradle 入门"></a>Gradle 入门</h2><h3 id="Gradle-简介"><a href="#Gradle-简介" class="headerlink" title="Gradle 简介"></a>Gradle 简介</h3><p>Gradle 是一款Google 推出的<strong>基于 JVM、</strong>通用灵活的<strong>项目构建工具，</strong>支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用<strong>简洁的</strong>、<strong>支持多种语言</strong>(例如：java、groovy 等)的 <strong>build 脚本文件</strong>。</p><img src="/2f95dd0d983d/image-20241028160947472.png" class="" alt="image-20241028160947472"><p>官网地址： <a href="https://gradle.org/">https://gradle.org/</a></p><p>学习Gradle 的原因：</p><ol><li>目前已经有相当一部分公司在逐渐使用Gradle作为项目构建工具了。</li><li>作为Java开发程序员，如果想下载Spring、SpringBoot等Spring家族的源码，基本上基于Gradle构建的。</li></ol><p><strong>总之，虽然目前市面上常见的项目构建工具有Ant、Maven、Gradle，主流还是Maven，但是未来趋势Gradle。</strong></p><h3 id="常见的项目构建工具"><a href="#常见的项目构建工具" class="headerlink" title="常见的项目构建工具"></a>常见的项目构建工具</h3><p>Ant： 2000 年 Apache 推出的纯Java 编写构建工具，通过 xml[build.xml]文件管理项目优点：使用灵活，速度快(快于 gradle 和 maven)。</p><p>缺点：Ant 没有强加任何编码约定的项目目录结构，开发人员需编写繁杂XML 文件构建指令，对开发人员是一个挑战。</p><p>Maven： 2004 年Apache 组织推出的再次使用xml 文件[pom.xml]管理项目的构建工具。</p><p>优点： 遵循一套约定大于配置的项目目录结构，使用统一的GAV 坐标进行依赖管理，<strong>侧重于包管理</strong>。缺点：项目构建过程僵化，配置文件编写不够灵活、不方便自定义组件，构建速度慢于 gradle。</p><p>Gradle： 2012 年Google 推出的基于Groovy 语言的全新项目构建工具，集合了Ant 和 Maven 各自的优势。</p><p>优点：集 Ant 脚本的灵活性+Maven 约定大于配置的项目目录优势，支持多种远程仓库和插件<strong>，侧重于大项目构建</strong>。缺点：学习成本高、资料少、脚本灵活、版本兼容性差等。</p><img src="/2f95dd0d983d/image-20241028161146438.png" class="" alt="image-20241028161146438"><p><strong>Whatever：无论哪种项目构建工具，都有自身的优势和劣势，所以选择一款最适合自己的就是最好的。</strong></p><h3 id="Gradle-安装"><a href="#Gradle-安装" class="headerlink" title="Gradle 安装"></a>Gradle 安装</h3><h4 id="Gradle-安装说明"><a href="#Gradle-安装说明" class="headerlink" title="Gradle 安装说明"></a>Gradle 安装说明</h4><blockquote><p>Gradle官网：<a href="https://gradle.org/">https://gradle.org/</a></p><p>Gradle官方下载安装教程页面：<a href="https://gradle.org/install/">https://gradle.org/install/</a></p><p>Gradle官方用户手册：<a href="https://docs.gradle.org/current/userguide/userguide.html">https://docs.gradle.org/current/userguide/userguide.html</a></p></blockquote><p>SpringBoot 官方文档明确指出，目前SpringBoot 的 Gradle 插件需要gradle6.8 版本及以上，所以我们这里选择 7.x 版本。</p><img src="/2f95dd0d983d/image-20241028161306370.png" class="" alt="image-20241028161306370"><p>其中SpringBoot 与Gradle 存在版本兼容问题，Gradle 与Idea 也存在兼容问题，所以考虑到 java 程序员会使用SpringBoot，所以要选择 6.8 版本及高于 6.8 版本的Gradle，那么相应的idea 版本也要升级，不能太老哦。</p><p><strong>具体参考文档：</strong><a href="https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started">https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#getting-started</a></p><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>要求Jdk 为 1.8 或者 1.8 版本以上。</p><h4 id="下载并解压到指定目录"><a href="#下载并解压到指定目录" class="headerlink" title="下载并解压到指定目录"></a>下载并解压到指定目录</h4><img src="/2f95dd0d983d/image-20241028161339729.png" class="" alt="image-20241028161339729"><p><strong>解压到指定目录：</strong> D:\software\gradle-7.4.1</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><blockquote><p>在win10及更高版本中，一般按下<code>win+s</code>搜索<code>环境变量</code>即可快速找到设置</p><img src="/2f95dd0d983d/image-20241028161409485.png" class="" alt="image-20241028161409485"></blockquote><img src="/2f95dd0d983d/image-20241028161420962.png" class="" alt="image-20241028161420962"><img src="/2f95dd0d983d/image-20241028161430974.png" class="" alt="image-20241028161430974"><p><strong>特别注意<strong><strong>：这里我们接着再配置一个</strong></strong>GRADLE_USER_HOME</strong> <strong>环境变量：</strong></p><p><strong>GRADLE_USER_HOME 相当于配置Gradle 本地仓库位置和 Gradle Wrapper 缓存目录。</strong></p><blockquote><p>Gradle本地仓库可以和Maven本地仓库目录一致</p></blockquote><h4 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h4><p><strong>gradle -v 或者 gradle –version： 通过gradle -v或者 gradle –version检测是否安装成功</strong></p><p>Gradle 7.4安装成功的提示文本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yooyi&gt;gradle -v</span><br><span class="line"></span><br><span class="line">Welcome to Gradle 7.4!</span><br><span class="line"></span><br><span class="line">Here are the highlights of this release:</span><br><span class="line">- Aggregated <span class="built_in">test</span> and JaCoCo reports</span><br><span class="line">- Marking additional <span class="built_in">test</span> <span class="built_in">source</span> directories as tests <span class="keyword">in</span> IntelliJ</span><br><span class="line">- Support <span class="keyword">for</span> Adoptium JDKs <span class="keyword">in</span> Java toolchains</span><br><span class="line"></span><br><span class="line">For more details see https://docs.gradle.org/7.4/release-notes.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 7.4</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2022-02-08 09:58:38 UTC</span><br><span class="line">Revision:     f0d9291c04b90b59445041eaa75b2ee744162586</span><br><span class="line"></span><br><span class="line">Kotlin:       1.5.31</span><br><span class="line">Groovy:       3.0.9</span><br><span class="line">Ant:          Apache Ant(TM) version 1.10.11 compiled on July 10 2021</span><br><span class="line">JVM:          1.8.0_202 (Oracle Corporation 25.202-b08)</span><br><span class="line">OS:           Windows 10 10.0 amd64</span><br></pre></td></tr></table></figure><h3 id="Gradle-项目目录结构"><a href="#Gradle-项目目录结构" class="headerlink" title="Gradle 项目目录结构"></a>Gradle 项目目录结构</h3><p>Gradle 项目<strong>默认目录结构和Maven 项目的目录结构一致</strong>，都是基于<strong>约定大于配置</strong>【Convention Over Configuration】。其完整项目目录结构如下所示：</p><img src="/2f95dd0d983d/image-20241028161538093.png" class="" alt="image-20241028161538093"><blockquote><p><strong>Tips</strong>：</p><ol><li>只有war工程才有webapp目录，对于普通的jar工程并没有webapp目录</li><li>gradlew与gradlew.bat执行的指定wrapper版本中的gradle指令，不是本地安装的gradle指令哦。</li></ol></blockquote><h3 id="Gradle-创建第一个项目"><a href="#Gradle-创建第一个项目" class="headerlink" title="Gradle 创建第一个项目"></a>Gradle 创建第一个项目</h3><p><strong>借助于 spring 脚手架创建gradle 第一个项目</strong>：<a href="https://start.spring.io/">https://start.spring.io/</a></p><img src="/2f95dd0d983d/image-20241028161616843.png" class="" alt="image-20241028161616843"><p>查看生成的gradle 项目目录结构如下所示：</p><img src="/2f95dd0d983d/image-20241028161634270.png" class="" alt="image-20241028161634270"><p>与上图对比会发现：总体的目录结构与上图说明的是一致的。</p><h3 id="Gradle-中的常用指令"><a href="#Gradle-中的常用指令" class="headerlink" title="Gradle 中的常用指令"></a>Gradle 中的常用指令</h3><p>Gradle 常用命令说明：</p><img src="/2f95dd0d983d/image-20241028161654489.png" class="" alt="image-20241028161654489"><p><strong>需要注意的是：gradle 的指令要在含有build.gradle 的目录执行。</strong></p><h3 id="修改maven-下载源"><a href="#修改maven-下载源" class="headerlink" title="修改maven 下载源"></a>修改maven 下载源</h3><p>Gradle 自带的Maven 源地址是国外的，该Maven 源在国内的访问速度是很慢的，除非使用了特别的手段。一般情况下，我们建议使用国内的第三方开放的Maven 源或企业内部自建Maven 源。</p><p><strong>认识init.d 文件夹</strong></p><p>我们可以在gradle 的init.d 目录下创建以.gradle 结尾的文件，.gradle 文件可以实现在build 开始之前执行，所以你可以在</p><p>这个文件配置一些你想预先加载的操作。</p><p><strong>在init.d 文件夹创建init.gradle 文件</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        maven &#123; name <span class="string">&quot;Alibaba&quot;</span> ; url <span class="string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125; </span><br><span class="line">        maven &#123; name <span class="string">&quot;Bstek&quot;</span> ; url <span class="string">&quot;https://nexus.bsdn.org/content/groups/public/&quot;</span> &#125; </span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    buildscript &#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            maven &#123; name <span class="string">&quot;Alibaba&quot;</span> ; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125; </span><br><span class="line">            maven &#123; name <span class="string">&quot;Bstek&quot;</span> ; url <span class="string">&#x27;https://nexus.bsdn.org/content/groups/public/&#x27;</span> &#125; </span><br><span class="line">            maven &#123; name <span class="string">&quot;M2&quot;</span> ; url <span class="string">&#x27;https://plugins.gradle.org/m2/&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓展 1</strong>：启用init.gradle 文件的方法有：</p><p>1在命令行指定文件，例如：gradle –init-script yourdir&#x2F;init.gradle -q taskName。你可以多次输入此命令来指定多个init文件2.把init.gradle文件放到 USER_HOME&#x2F;.gradle&#x2F; 目录下</p><ol><li>把以.gradle结尾的文件放到 USER_HOME&#x2F;.gradle&#x2F;init.d&#x2F; 目录下</li><li>把以.gradle结尾的文件放到 GRADLE_HOME&#x2F;init.d&#x2F; 目录下</li></ol><p>如果存在上面的4种方式的2种以上，gradle会按上面的1-4序号依次执行这些文件，如果给定目录下存在多个init脚本，会按拼音a-z顺序执行这些脚本，每个init脚本都存在一个对应的gradle实例，你在这个文件中调用的所有方法和属性，都会委托给这个gradle实例，每个init脚本都实现了Script接口。</p><p><strong>拓展</strong> 2：仓库地址说明</p><p>mavenLocal()： 指定使用maven本地仓库，而本地仓库在配置maven时settings文件指定的仓库位置。如E:&#x2F;repository，gradle 查找jar包顺序如下：USER_HOME&#x2F;.m2&#x2F;settings.xml &gt;&gt; M2_HOME&#x2F;conf&#x2F;settings.xml &gt;&gt; USER_HOME&#x2F;.m2&#x2F;repository</p><p>maven { url 地址}：指定maven仓库，一般用私有仓库地址或其它的第三方库【比如阿里镜像仓库地址】。</p><p>mavenCentral()：这是Maven的中央仓库，无需配置，直接声明就可以使用。</p><p>jcenter()：JCenter中央仓库，实际也是是用的maven搭建的，但相比Maven仓库更友好，通过CDN分发，并且支持https访问，在新版本中已经废弃了，替换为了mavenCentral()。</p><p>总之， gradle可以通过指定仓库地址为本地maven仓库地址和远程仓库地址相结合的方式，避免每次都会去远程仓库下载依赖库。</p><p>这种方式也有一定的问题，如果本地maven仓库有这个依赖，就会从直接加载本地依赖，如果本地仓库没有该依赖，那么还是会从远程下载。</p><p>但是下载的jar不是存储在本地maven仓库中，而是放在自己的缓存目录中，默认在USER_HOME&#x2F;.gradle&#x2F;caches目录，当然如果我们配置过GRADLE_USER_HOME环境变量，则会放在GRADLE_USER_HOME&#x2F;caches目录，那么可不可以将gradle caches指向maven repository。我们说这是不行的，caches下载文件不是按照maven仓库中存放的方式。</p><p><strong>拓展</strong> 3：阿里云仓库地址请参考：<a href="https://developer.aliyun.com/mvn/guide">https://developer.aliyun.com/mvn/guide</a></p><img src="/2f95dd0d983d/image-20241028162044267.png" class="" alt="image-20241028162044267"><p>在gradle 中的使用说明：</p><img src="/2f95dd0d983d/image-20241028162056882.png" class="" alt="image-20241028162056882"><h3 id="Wrapper-包装器"><a href="#Wrapper-包装器" class="headerlink" title="Wrapper 包装器"></a>Wrapper 包装器</h3><p>Gradle Wrapper 实际上就是对 Gradle 的一层包装，用于解决实际开发中可能会遇到的不同的项目需要不同版本的 Gradle</p><p>问题。例如：把自己的代码共享给其他人使用，可能出现如下情况：</p><ol><li>对方电脑没有安装 gradle</li><li>对方电脑安装过 gradle，但是版本太旧了</li></ol><p>这时候，我们就可以考虑使用 Gradle Wrapper 了。这也是官方建议使用 Gradle Wrapper 的原因。实际上有了 Gradle Wrapper 之后，我们本地是可以不配置 Gradle 的,下载Gradle 项目后，使用 gradle 项目自带的wrapper 操作也是可以的。</p><p>那如何使用Gradle Wrapper 呢？</p><p>项目中的gradlew、gradlew.cmd脚本用的就是wrapper中规定的gradle版本。参见源码</p><p>而我们上面提到的gradle指令用的是本地gradle,所以gradle指令和gradlew指令所使用的gradle版本<strong>有可能是不一样的</strong>。</p><p>gradlew、gradlew.cmd的使用方式与gradle使用方式完全一致，只不过把gradle指令换成了gradlew指令。</p><p>当然,我们也可在终端执行 gradlew 指令时，指定指定一些参数,来控制 Wrapper 的生成，比如依赖的版本等，如下：</p><img src="/2f95dd0d983d/image-20241028162145385.png" class="" alt="image-20241028162145385"><p>具体操作如下所示 ：</p><p>gradle wrapper –gradle-version&#x3D;4.4：升级wrapper版本号,只是修改gradle.properties中wrapper版本，未实际下载</p><p>gradle wrapper –gradle-version 5.2.1 –distribution-type all ：关联源码用</p><h4 id="GradleWrapper-的执行流程："><a href="#GradleWrapper-的执行流程：" class="headerlink" title="GradleWrapper 的执行流程："></a>GradleWrapper 的执行流程：</h4><ol><li>当我们第一次执行 .&#x2F;gradlew build 命令的时候，gradlew 会读取 gradle-wrapper.properties 文件的配置信息</li><li>准确的将指定版本的 gradle 下载并解压到指定的位置(GRADLE_USER_HOME目录下的wrapper&#x2F;dists目录中)</li><li>并构建本地缓存(GRADLE_USER_HOME目录下的caches目录中),下载再使用相同版本的gradle就不用下载了4.之后执行的 .&#x2F;gradlew 所有命令都是使用指定的 gradle 版本。<strong>如下图所示</strong>：</li></ol><img src="/2f95dd0d983d/image-20241028162200905.png" class="" alt="image-20241028162200905"><p>gradle-wrapper.properties 文件解读：</p><img src="/2f95dd0d983d/image-20241028162212556.png" class="" alt="image-20241028162212556"><blockquote><p>注意：前面提到的 <strong>GRALE_USER_HOME 环境变量</strong>用于这里的Gradle Wrapper 下载的特定版本的gradle 存储目录。如果我们<strong>没有配置过GRALE_USER_HOME 环境变量,默认在当前用户家目录下的.gradle 文件夹中。</strong></p></blockquote><p>那什么时候选择使用 gradle wrapper、什么时候选择使用本地gradle?</p><p>下载别人的项目或者使用操作以前自己写的不同版本的gradle项目时：用Gradle wrapper,也即：gradlew</p><p>什么时候使用本地gradle?新建一个项目时： 使用gradle指令即可。</p><h2 id="Gradle-与-Idea-整合"><a href="#Gradle-与-Idea-整合" class="headerlink" title="Gradle 与 Idea 整合"></a>Gradle 与 Idea 整合</h2><h3 id="Groovy-简介"><a href="#Groovy-简介" class="headerlink" title="Groovy 简介"></a>Groovy 简介</h3><p>在某种程度上，Groovy 可以被视为Java 的一种脚本化改良版,Groovy 也是运行在 JVM 上，它可以很好地与 Java 代码及其相关库进行交互操作。它是一种成熟的面向对象编程语言，既可以面向对象编程，又可以用作纯粹的脚本语言。大多数有效的 Java 代码也可以转换为有效的 Groovy 代码，Groovy 和 Java 语言的主要区别是：完成同样的任务所需的Groovy 代码比 Java 代码更少。其特点为：</p><ul><li>功能强大，例如提供了动态类型转换、<strong>闭包</strong>和元编程（metaprogramming）支持</li><li>支持函数式编程，不需要main 函数</li><li>默认导入常用的包</li><li>类不支持 default 作用域,且默认作用域为public。</li><li>Groovy 中基本类型也是对象，可以直接调用对象的方法。</li><li>支持DSL（Domain Specific Languages 领域特定语言）和其它简洁的语法，让代码变得易于阅读和维护。</li><li>Groovy 是基于Java 语言的，所以完全兼容Java 语法,所以对于java 程序员学习成本较低。详细了解请参考：<a href="http://www.groovy-lang.org/documentation.html">http://www.groovy-lang.org/documentation.html</a></li></ul><img src="/2f95dd0d983d/image-20241028162325568.png" class="" alt="image-20241028162325568"><h3 id="Groovy-安装-非必须"><a href="#Groovy-安装-非必须" class="headerlink" title="Groovy 安装[非必须]"></a>Groovy 安装[非必须]</h3><p>下载地址： <a href="https://groovy.apache.org/download.html">https://groovy.apache.org/download.html</a></p><p>解压配置环境变量：</p><img src="/2f95dd0d983d/image-20241028162539783.png" class="" alt="image-20241028162539783"><h3 id="创建-Groovy-项目"><a href="#创建-Groovy-项目" class="headerlink" title="创建 Groovy 项目"></a>创建 Groovy 项目</h3><img src="/2f95dd0d983d/image-20241028162623698.png" class="" alt="image-20241028162623698"><h3 id="Groovy-基本语法"><a href="#Groovy-基本语法" class="headerlink" title="Groovy 基本语法"></a>Groovy 基本语法</h3><img src="/2f95dd0d983d/image-20241028162643015.png" class="" alt="image-20241028162643015"><p>类型转换：当需要时,类型之间会自动发生类型转换： 字符串（String）、基本类型(如int) 和类型的包装类 (如Integer)</p><p>类说明：如果在一个groovy 文件中没有任何类定义，它将被当做 script 来处理，也就意味着这个文件将被透明的转换为一个 Script 类型的类，这个自动转换得到的类将使用原始的 groovy 文件名作为类的名字。groovy 文件的内容被打包进run 方法，另外在新产生的类中被加入一个main 方法以进行外部执行该脚本。</p><h4 id="案例-1：基本注意点"><a href="#案例-1：基本注意点" class="headerlink" title="案例 1：基本注意点"></a>案例 1：基本注意点</h4><img src="/2f95dd0d983d/image-20241028162731964.png" class="" alt="image-20241028162731964"><p>提示：方法调用时,在不含有歧义的地方可以省略方法调用时的括号。这类似于使用${变量名}时，括号在不引起歧义的地方可以省略是一样的：如</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> num1=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">def</span> num2= <span class="number">2</span>;</span><br><span class="line">println <span class="string">&quot;$num1 + $num2 = $&#123;num1+num2&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="案例-2：引号说明"><a href="#案例-2：引号说明" class="headerlink" title="案例 2：引号说明"></a>案例 2：引号说明</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> num1=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">def</span> num2=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">def</span> str1=<span class="string">&quot;1d&quot;</span>; <span class="comment">//双引号</span></span><br><span class="line"><span class="keyword">def</span> str2=<span class="string">&#x27;dsd&#x27;</span>; <span class="comment">//单引号</span></span><br><span class="line"><span class="comment">//双引号运算能力,单引号用于常量字符串,三引号相当于模板字符串，可以支持换行</span></span><br><span class="line">println <span class="string">&quot;$num1 + $num2 = $&#123;num1 + num2&#125;&quot;</span></span><br><span class="line"><span class="comment">//基本数据类型也可以作为对象使用,可以调用对象的方法</span></span><br><span class="line">println(num1.getClass().toString()) </span><br><span class="line">println(str1.getClass().toString()) </span><br><span class="line">println(str2.getClass().toString())</span><br></pre></td></tr></table></figure><h4 id="案例-3：三个语句结构"><a href="#案例-3：三个语句结构" class="headerlink" title="案例 3：三个语句结构"></a>案例 3：三个语句结构</h4><p>Groovy 支持顺序结构从上向下依次解析、分支结构(if..else、if..else if ..else..、switch..case、for、while、do..while)</p><p>具体参考官网：<a href="http://www.groovy-lang.org/semantics.html">http://www.groovy-lang.org/semantics.html#_conditional_structures</a></p><h4 id="案例-4：类型及权限修饰符"><a href="#案例-4：类型及权限修饰符" class="headerlink" title="案例 4：类型及权限修饰符"></a>案例 4：类型及权限修饰符</h4><p>Groovy 中的类型有：</p><ol><li>原生数据类型及包装类</li></ol><img src="/2f95dd0d983d/image-20241028162904219.png" class="" alt="image-20241028162904219"><ol start="2"><li><p>类、内部类、抽象类、接口</p></li><li><p>注解</p></li><li><p>Trait： 可以看成是带有方法实现的接口</p></li></ol><p><strong>权限修饰符</strong>： public、protected、private</p><p>拓展：Groovy 类与 Java 类之间的主要区别是：</p><ol><li>没有可见性修饰符的类或方法自动是公共的(可以使用一个特殊的注释来实现包的私有可见性)。</li><li>没有可见性修饰符的字段将自动转换为属性，不需要显式的 getter 和 setter 方法。</li><li>如果属性声明为 final，则不会生成 setter。</li><li>一个源文件可能包含一个或多个类(但是如果一个文件不包含类定义的代码，则将其视为脚本)。脚本只是具有一些特殊约定的类,它们的名称与源文件相同(所以不要在脚本中包含与脚本源文件名相同的类定义)。</li></ol><p><strong>提 示 ：</strong> 有 关 Groovy 中 各 种 各 样 的 数 据 类 型 和 权 限 修 饰 符 及 Goovy 与 Java 区 别 请 参 考 ：</p><p><a href="http://www.groovy-lang.org/objectorientation.html">http://www.groovy-lang.org/objectorientation.html#_modifiers_on_a_property</a></p><h4 id="案例-5：集合操作"><a href="#案例-5：集合操作" class="headerlink" title="案例 5：集合操作"></a>案例 5：集合操作</h4><p>Groovy 支持List、Map 集合操作，并且拓展了 Java 中的API,具体参考如下方法：</p><p><code>List</code>：</p><ul><li><code>add()</code>：添加某个元素plus()：添加某个list 集合</li><li><code>remove()</code>：删除指定下标的元素removeElement()：删除某个指定的元素removeAll()： 移除某个集合中的元素</li><li><code>pop()</code>：弹出list 集合中最后一个元素putAt()：修改指定下标的元素</li><li><code>each()</code>：遍历</li><li><code>size()</code>： 获取list 列表中元素的个数</li><li><code>contains()</code>： 判断列表中是否包含指定的值，则返回 true</li></ul><p><code>Map</code>：</p><ul><li><code>put()</code>：向map 中添加元素</li><li><code>remove()</code>：根据某个键做移除，或者移除某个键值对</li><li><code>+、-</code>：支持 map 集合的加减操作</li><li><code>each()</code>：遍历map 集合</li></ul><p>请参考官网：<a href="http://www.groovy-lang.org/syntax.html">http://www.groovy-lang.org/syntax.html#_number_type_suffixes</a></p><p><strong>提示</strong>：可以把不同的基本类型添加到同一集合中。</p><h4 id="案例-6：类导入"><a href="#案例-6：类导入" class="headerlink" title="案例 6：类导入"></a>案例 6：类导入</h4><p>Groovy 遵循 Java 允许 import 语句解析类引用的概念。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.xml.MarkupBuilder </span><br><span class="line"><span class="keyword">def</span> xml = <span class="keyword">new</span> MarkupBuilder() </span><br><span class="line"><span class="keyword">assert</span> xml != <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>Groovy 语言默认提供的导入</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.* </span><br><span class="line"><span class="keyword">import</span> java.util.* </span><br><span class="line"><span class="keyword">import</span> java.io.* </span><br><span class="line"><span class="keyword">import</span> java.net.* </span><br><span class="line"><span class="keyword">import</span> groovy.lang.* </span><br><span class="line"><span class="keyword">import</span> groovy.util.*</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal</span><br></pre></td></tr></table></figure><p>这样做是因为这些包中的类最常用。通过导入这些样板代码减少了。</p><p>参考官网地址：<a href="http://www.groovy-lang.org/structure.html#_imports">http://www.groovy-lang.org/structure.html#_imports</a></p><h4 id="案例-7：异常处理"><a href="#案例-7：异常处理" class="headerlink" title="案例 7：异常处理"></a>案例 7：异常处理</h4><p>Groovy 中的异常处理和 java 中的异常处理是一样的。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> z </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">def</span> i = <span class="number">7</span>, j = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">def</span> k = i / j </span><br><span class="line">        <span class="keyword">assert</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        z = <span class="string">&#x27;reached here&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> ( e ) &#123;</span><br><span class="line">    <span class="keyword">assert</span> e <span class="keyword">in</span> ArithmeticException </span><br><span class="line">    <span class="keyword">assert</span> z == <span class="string">&#x27;reached here&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考官网地址： <a href="http://www.groovy-lang.org/semantics.html#_try_catch_finally">http://www.groovy-lang.org/semantics.html#_try_catch_finally</a></p><h4 id="案例-8：闭包"><a href="#案例-8：闭包" class="headerlink" title="案例 8：闭包"></a>案例 8：闭包</h4><p>闭包：Groovy 中的闭包是一个开放的、匿名的代码块，它可以接受参数、也可以有返回值。闭包可以引用其周围作用域中声明的变量。</p><p>语法：<code>&#123; [closureParameters -&gt; ] statements &#125;</code></p><p>其中<code>[ closureParameters-&gt; ]</code>是一个可选的逗号分隔的参数列表,参数后面是  Groovy 语句。参数类似于方法参数列表， 这些参数可以是类型化的,也可以是非类型化的。当指定参数列表时，需要使用<code>-&gt;</code> 字符，用于将参数与闭包体分离。</p><p>参考：<a href="http://www.groovy-lang.org/closures.html">http://www.groovy-lang.org/closures.html</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//闭包体完成变量自增操作</span></span><br><span class="line">&#123; item++ &#125;</span><br><span class="line"><span class="comment">//闭包使用 空参数列表 明确规定这是无参的</span></span><br><span class="line">&#123; -&gt; item++ &#125;</span><br><span class="line"><span class="comment">//闭包中有一个默认的参数[it]，写不写无所谓</span></span><br><span class="line">&#123; println it &#125;</span><br><span class="line">&#123; it -&gt; println it &#125;</span><br><span class="line"><span class="comment">//如果不想使用默认的闭包参数it,那需要显示自定义参数的名称</span></span><br><span class="line">&#123; name -&gt; println name &#125;</span><br><span class="line"><span class="comment">//闭包也可以接受多个参数</span></span><br><span class="line">&#123; String x, <span class="type">int</span> y -&gt;</span><br><span class="line">    println <span class="string">&quot;hey $&#123;x&#125; the value is $&#123;y&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//闭包参数也可是一个对象</span></span><br><span class="line">&#123; reader -&gt;</span><br><span class="line">    <span class="keyword">def</span> line = reader.readLine() </span><br><span class="line">    line.trim()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包调用方式： 闭包是 <code>groovy.lang.Closure</code> 的实例。它可以像任何其他变量一样分配给一个变量或字段。</p><p>闭包对象(参数)</p><p>闭包对象.call(参数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def isOdd = &#123; int i -&gt; i%2 != 0 &#125; </span><br><span class="line">assert isOdd(3) == true</span><br><span class="line">assert isOdd.call(2) == false</span><br><span class="line"></span><br><span class="line">def isEven = &#123; it%2 == 0 &#125; </span><br><span class="line">assert isEven(3) == false </span><br><span class="line">assert isEven.call(2) == true</span><br></pre></td></tr></table></figure><p>特殊说明： 可以把闭包当作一个对象，作为参数传递给方法使用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参闭包</span></span><br><span class="line"><span class="keyword">def</span> run(Closure closure)&#123; </span><br><span class="line">    println(<span class="string">&quot;run start...&quot;</span>)</span><br><span class="line">    closure() println(<span class="string">&quot;run end...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run &#123;</span><br><span class="line">    println <span class="string">&quot;running......&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参闭包</span></span><br><span class="line"><span class="keyword">def</span> caculate(Closure closure)&#123;</span><br><span class="line">    <span class="keyword">def</span> num1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">def</span> num2=<span class="number">3</span>; </span><br><span class="line">    println(<span class="string">&quot;caculate start...&quot;</span>)</span><br><span class="line">    closure(num1,num2) </span><br><span class="line">    println(<span class="string">&quot;caculate end...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">caculate &#123;x,y -&gt; println <span class="string">&quot;计算结果为：$x+$y=$&#123;x+y&#125;&quot;</span>&#125; <span class="comment">//在build.gradle文件中我们见到的很多都是闭包格式的。</span></span><br></pre></td></tr></table></figure><h3 id="在-idea-中创建普通java-工程"><a href="#在-idea-中创建普通java-工程" class="headerlink" title="在 idea 中创建普通java 工程"></a>在 idea 中创建普通java 工程</h3><p>具体整合：</p><p>第一步：创建由Gradle 管理的项目</p><img src="/2f95dd0d983d/image-20241028163517667.png" class="" alt="image-20241028163517667"><p>第二步：修改当前项目使用本地安装的gradle：可以加快下载项目依赖jar 包的速度【配置了私服地址】。</p><img src="/2f95dd0d983d/image-20241028163529330.png" class="" alt="image-20241028163529330"><p><strong>特别提示 1：</strong>使得在Terminal 中执行以gradlew 开头命令和操作图形化的IDEA 使用Gradle 版本<strong>不一定是同一个版本</strong>哦。</p><p>1.Terminal中以gradlew开头指令用的是Wrapper规定的gradle版本,wrapper中规定版本默认和idea插件中规定的版本一致。</p><p>2.而图形化的IDEA使用Gradle是本地安装的哦。</p><p><strong>特别提示 2：</strong>目前只能是在创建项目时重新设置本地gradle,创建新项目需要重新去改。</p><img src="/2f95dd0d983d/image-20241028163541672.png" class="" alt="image-20241028163541672"><p><strong>特别提示3：</strong>当 我 们 在 gradle.build 文 件 添 加 依 赖 之 后 ， 这 些 依 赖 会 在 下 载 到<code>GRADLE_USER_HOME/caches/modules-2/files-2.1</code> 目录下面,所以这里的 <code>GRADLE_USER_HOME</code> 相当于 Gradle 的本地仓库,当然也可以如下方式找到jar 包位置。</p><blockquote><ul><li>此处可以设置Gradle user home，如需更改idea新项目的设置可以通过<code>文件</code>——<code>新项目的设置更改</code></li></ul><img src="/2f95dd0d983d/image-20241028163608443.png" class="" alt="image-20241028163608443"><ul><li>调整使用的Gradle位置，可以加速Gradle构建</li></ul><img src="/2f95dd0d983d/image-20241028163622586.png" class="" alt="image-20241028163622586"></blockquote><h3 id="在-idea-中创建-web-工程"><a href="#在-idea-中创建-web-工程" class="headerlink" title="在 idea 中创建 web 工程"></a>在 idea 中创建 web 工程</h3><p>在idea 新版本的创建项目中,无法自己选择创建项目是普通 java 工程还是 web 工程了【IDEA 旧版本是可以的】，所以我们如果想创建 web 工程，只需要自己在 <code>src/main/</code>目录下添加<code>webapp/WEB-INF/web.xml</code> 及页面即可。</p><p>代码演示：参考视频+资料</p><p>接下来在我们对gradle 的其它知识点讲解之前我们先提一下在gradle 文件中需要用到的Groovy 语法。</p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><p>当我们将一个 java 项目打成war 包之后，就需要部署到服务器运行，这里有两种方式：</p><ul><li>我们将项目打成 war 包，部署到<strong>本地tomcat</strong> 运行：演示</li><li>使用 <strong>Gretty 插件</strong>中<strong>内置服务器</strong>方式部署项目：  演示</li></ul><h4 id="Gretty-部署项目"><a href="#Gretty-部署项目" class="headerlink" title="Gretty 部署项目"></a>Gretty 部署项目</h4><p>Gretty 是一个功能丰富的 gradle 插件，用于在嵌入的 servlet 容器上运行 web 应用程序,让项目开发和部署更加简单。目前Gretty 插件已经作为 gradle 的核心库使用了,Gretty 其核心功能为：</p><ol><li>底层支持 jetty,tomcat 等Servlet 容器</li><li>支持项目热部署、HTTPS、调试</li></ol><p>Gretty 官网地址：<a href="http://akhikhl.github.io/gretty-doc/index.html">http://akhikhl.github.io/gretty-doc/index.html</a></p><h4 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h4><p>第一步：引入 Gretty 插件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;war&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;org.gretty&#x27;</span> version <span class="string">&#x27;2.2.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：指定maven 仓库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">//指定jcenter仓库，一定要放在前面</span></span><br><span class="line">    jcenter() </span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：针对Gretty 插件的设置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gretty &#123;</span><br><span class="line">    httpPort = <span class="number">8888</span></span><br><span class="line">    contextPath = <span class="string">&quot;/web&quot;</span></span><br><span class="line">    debugPort = <span class="number">5005</span><span class="comment">// default </span></span><br><span class="line">    debugSuspend = <span class="literal">true</span> <span class="comment">// default </span></span><br><span class="line">    httpsEnabled = <span class="literal">true</span></span><br><span class="line">    managedClassReload=<span class="literal">true</span> <span class="comment">// 修改了类之后重新加载</span></span><br><span class="line">    <span class="comment">//servletContainer = &#x27;tomcat8&#x27; //如果不指定默认的servlet容器，支持tomcat7/8，默认是使用的是Jetty服务器</span></span><br><span class="line">    httpsPort = <span class="number">4431</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：执行Gretty 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle appRun</span><br></pre></td></tr></table></figure><p>如 果 大 家 想 进 一 步 了 解 的 属 性 配 置 , 比 如 Gretty 热 部 署 等 设 置 ， 欢 迎 参 考 其 官 方 文 档</p><p><a href="http://akhikhl.github.io/gretty-doc/Gretty-configuration.html%E3%80%82">http://akhikhl.github.io/gretty-doc/Gretty-configuration.html。</a></p><h3 id="Gradle-对测试支持"><a href="#Gradle-对测试支持" class="headerlink" title="Gradle 对测试支持"></a>Gradle 对测试支持</h3><p>测试任务自动检测并执行测试源集中的所有单元测试。测试执行完成后会生成一个报告。支持JUnit 和 TestNG 测试。</p><h4 id="默认测试目录及标准输出"><a href="#默认测试目录及标准输出" class="headerlink" title="默认测试目录及标准输出"></a>默认测试目录及标准输出</h4><img src="/2f95dd0d983d/image-20241101152255221.png" class="" alt="image-20241101152255221"><h4 id="Junit-使用"><a href="#Junit-使用" class="headerlink" title="Junit 使用"></a>Junit 使用</h4><p>Gradle 对于Junit4.x 支持</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span> ,<span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">    useJUnit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gradle 对于Junit5.x 版本支持</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&#x27;</span> </span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：无论是 Junt4.x 版本还是Junit5.x 版本，我们只需在 build.gradle 目录下执行gradle test 指令，gradle 就会帮我们执行所有的加了@Test 注解的测试，并生成测试报告。</p><blockquote><p><strong>提示：</strong></p><p>测试报告在项目<code>build-reports</code>目录下，浏览器打开index.html即可查看</p><img src="/2f95dd0d983d/image-20241101152348846.png" class="" alt="image-20241101152348846"><img src="/2f95dd0d983d/image-20241101152358028.png" class="" alt="image-20241101152358028"></blockquote><h4 id="包含和排除特定测试"><a href="#包含和排除特定测试" class="headerlink" title="包含和排除特定测试"></a>包含和排除特定测试</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test &#123;</span><br><span class="line">    enabled <span class="literal">true</span> </span><br><span class="line">    useJUnit() </span><br><span class="line">    include <span class="string">&#x27;com/**&#x27;</span></span><br><span class="line">    exclude <span class="string">&#x27;com/abc/**&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gradle 在junit 中的批量测试,可以设置包含或者排除某些特定测试。</p><h2 id="Gradle-进阶说明"><a href="#Gradle-进阶说明" class="headerlink" title="Gradle 进阶说明"></a>Gradle 进阶说明</h2><p>为了让大家快速的入门gradle，本章将从整体构建脚本的角度介绍：</p><ul><li>什么是 setting 文件,它有什么作用;</li><li>说明什么是build 文件,它又有什么作用</li><li>我们可以创建多少个 build</li><li>project 和task,他们有什么作用;又是什么关系,如何配置</li><li>项目的生命周期</li><li>项目发布</li><li>使用Gradle 创建SpringBoot 项目等</li></ul><h3 id="项目的生命周期"><a href="#项目的生命周期" class="headerlink" title="项目的生命周期"></a>项目的生命周期</h3><p>Gradle 项目的生命周期分为三大阶段： Initialization -&gt; Configuration -&gt; Execution. 每个阶段都有自己的职责,具体如下图所示：</p><img src="/2f95dd0d983d/image-20241101152520407.png" class="" alt="image-20241101152520407"><ul><li><p><strong>Initialization 阶段</strong>主要目的是初始化构建, 它又分为两个子过程,一个是执行 Init Script,另一个是执行 Setting Script。</p></li><li><p>init.gradle 文件会在每个项目 build 之前被调用，用于做一些初始化的操作，它主要有如下作用：</p><ul><li><p>配置内部的仓库信息（如公司的 maven  仓库信息）； </p></li><li><p>配置一些全局属性；</p></li><li><p>配置用户名及密码信息（如公司仓库的用户名和密码信息）。</p></li></ul></li><li><p>Setting Script 则更重要, 它初始化了一次构建所参与的所有模块。</p></li><li><p><strong>Configuration 阶段</strong>：这个阶段开始加载项目中所有模块的 Build Script。所谓 “加载” 就是执行 build.gradle 中的语句, 根据脚本代码创建对应的 task, 最终根据所有 task 生成由 <strong>Task 组成的有向无环图</strong>(Directed Acyclic Graphs)，如下：</p></li></ul><img src="/2f95dd0d983d/image-20241101152538460.png" class="" alt="image-20241101152538460"><p>从而构成如下<strong>有向无环树</strong>：</p><img src="/2f95dd0d983d/image-20241101152551001.png" class="" alt="image-20241101152551001"><ul><li><strong>Execution 阶段</strong>：这个阶段会根据上个阶段构建好的有向无环图，按着顺序执行 Task【Action 动作】。</li></ul><h3 id="settings-文件"><a href="#settings-文件" class="headerlink" title="settings 文件"></a>settings 文件</h3><p>首先对 settings 文件的几点说明：</p><ol><li><p>作用：主要是在项目初始化阶段确定一下引入哪些工程需要加入到项目构建中,为构建项目工程树做准备。</p></li><li><p>工程树：gradle 中有工程树的概念，类似于 maven 中的project 与module。</p><img src="/2f95dd0d983d/image-20241101152641744.png" class="" alt="image-20241101152641744"></li><li><p>内容：里面主要定义了当前 gradle 项目及子 project 的项目名称</p></li><li><p>位置：必须放在根工程目录下。</p></li><li><p>名字：为<code>settings.gradle</code> 文件，不能发生变化</p></li><li><p>对应实例：与 org.gradle.api.initialization.Settings 实例是一一对应的关系。每个项目只有一个settings 文件。</p></li><li><p>关注：作为开发者我们只需要关注该文件中的include 方法即可。使用相对路径【 :  】引入子工程。</p></li><li><p>一个子工程只有在setting 文件中配置了才会被 gradle 识别,这样在构建的时候才会被包含进去。案例如下所示：</p></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根工程项目名</span></span><br><span class="line">rootProject.name = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"><span class="comment">//包含的子工程名称</span></span><br><span class="line">include <span class="string">&#x27;subject01&#x27;</span> </span><br><span class="line">include <span class="string">&#x27;subject02&#x27;</span> </span><br><span class="line">include <span class="string">&#x27;subject03&#x27;</span></span><br><span class="line"><span class="comment">//包含的子工程下的子工程名称</span></span><br><span class="line">include <span class="string">&#x27;subject01:subproject011&#x27;</span> </span><br><span class="line">include <span class="string">&#x27;subject01:subproject012&#x27;</span></span><br></pre></td></tr></table></figure><p>项目名称中 <strong>“:” 代表项目的分隔符</strong>, 类似路径中的 “&#x2F;“. 如果<strong>以 “:” 开头则表示相对于 root project</strong> 。然后 Gradle 会为每个带有 build.gradle 脚本文件的工程构建一个与之对应的 Project 对象。</p><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>项目实质上是 Task 对象的集合。一个 Task 表示一个逻辑上较为独立的执行过程，比如编译Java 源代码，拷贝文件， 打包Jar 文件，甚至可以是执行一个系统命令。另外，一个 Task 可以读取和设置Project 的Property 以完成特定的操作。</p><h4 id="任务入门"><a href="#任务入门" class="headerlink" title="任务入门"></a>任务入门</h4><p>可参考官方文档：<a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html">https://docs.gradle.org/current/userguide/tutorial_using_tasks.html </a></p><p>让我们来先看一个例子:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task A &#123;</span><br><span class="line">    println <span class="string">&quot;root taskA&quot;</span> </span><br><span class="line">    doFirst()&#123;</span><br><span class="line">        println <span class="string">&quot;root taskA doFirst&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast()&#123;</span><br><span class="line">        println <span class="string">&quot;root taskA doLast&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在文件所在的目录执行命令： gradle A。</p><p><strong>提示 1：</strong> task 的配置段是在配置阶段完成</p><p><strong>提示 2：</strong> task 的doFirst、doLast 方法是执行阶段完成，并且doFirst 在doLast 执行之前执行。</p><p><strong>提示 3：</strong>区分任务的配置段和任务的行为,任务的配置段在配置阶段执行,任务的行为在执行阶段执行</p><h4 id="任务的行为"><a href="#任务的行为" class="headerlink" title="任务的行为"></a>任务的行为</h4><p>案例如下：doFirst、doLast 两个方法可以在任务内部定义，也可以在任务外部定义</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> map=<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"><span class="comment">//action属性可以设置为闭包，设置task自身的行为</span></span><br><span class="line">map.put(<span class="string">&quot;action&quot;</span>,&#123;println <span class="string">&quot;taskD..&quot;</span>&#125;)</span><br><span class="line">task(map,<span class="string">&quot;a&quot;</span>)&#123;</span><br><span class="line">    description   <span class="string">&#x27;taskA description&#x27;</span></span><br><span class="line">    group <span class="string">&quot;atguigu&quot;</span></span><br><span class="line">    <span class="comment">//在task内部定义doFirst、doLast行为</span></span><br><span class="line">    doFirst &#123;</span><br><span class="line">        <span class="keyword">def</span> name = <span class="string">&#x27;doFirst..&#x27;</span> </span><br><span class="line">        println name</span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">def</span> name = <span class="string">&#x27;doLast..&#x27;</span> </span><br><span class="line">        println name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在task外部定义doFirst、doLast行为</span></span><br><span class="line">a.doFirst &#123;</span><br><span class="line">    println it.description</span><br><span class="line">&#125;</span><br><span class="line">a.doLast &#123;</span><br><span class="line">    println it.group</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：gradle a , 输出如下所示：</p><img src="/2f95dd0d983d/image-20241101152925186.png" class="" alt="image-20241101152925186"><p><strong>底层原理分析</strong>：无论是定义任务自身的 action，还是添加的doLast、doFirst 方法，其实底层都被放入到一个Action 的List 中了，最初这个 action List 是空的，当我们设置了 action【任务自身的行为】,它先将action 添加到列表中，此时列表中只有一个action,后续执行doFirst 的时候doFirst 在action 前面添加，执行 doLast 的时候doLast 在action 后面添加。</p><p>doFirst 永远添加在actions List 的第一位，保证添加的Action 在现有的 action List 元素的最前面；doLast 永远都是在action List 末尾添加，保证其添加的Action 在现有的action List 元素的最后面。</p><p>一个往前面添加,一个往后面添加，最后这个action List 就按顺序形成了doFirst、doSelf、doLast 三部分的 Actions,就达到 doFirst、doSelf、doLast 三部分的 Actions 顺序执行的目的。</p><p><strong>提示 1：</strong>其中&lt;&lt;代表doLast,在gradle5.x 版本之后就废弃,不能使用了,如下所示： </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task hello &lt;&lt; &#123;</span><br><span class="line">    println <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任务的依赖方式"><a href="#任务的依赖方式" class="headerlink" title="任务的依赖方式"></a>任务的依赖方式</h4><p>Task 之间的依赖关系可以在以下几部分设置：</p><ol><li>参数依赖</li><li>内部依赖</li><li>外部依赖</li></ol><h5 id="方式一：参数方式依赖"><a href="#方式一：参数方式依赖" class="headerlink" title="方式一：参数方式依赖"></a>方式一：参数方式依赖</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">task A &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;TaskA..&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task <span class="string">&#x27;B&#x27;</span> &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;TaskB..&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数方式依赖: dependsOn后面用冒号</span></span><br><span class="line">task <span class="string">&#x27;C&#x27;</span>(<span class="attr">dependsOn:</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;TaskC..&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="方式二：内部依赖"><a href="#方式二：内部依赖" class="headerlink" title="方式二：内部依赖"></a>方式二：内部依赖</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数方式依赖</span></span><br><span class="line">task <span class="string">&#x27;C&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">//内部依赖：dependsOn后面用 = 号</span></span><br><span class="line">    dependsOn= [A,B] </span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;TaskC..&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试： gradle C</p><h5 id="方式三：外部依赖"><a href="#方式三：外部依赖" class="headerlink" title="方式三：外部依赖"></a>方式三：外部依赖</h5><p>&#x2F;&#x2F;外部依赖：可变参数,引号可加可不加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C.dependsOn(B,<span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当然：task 也支持跨项目依赖</p><p>在subproject01 工程的 build.gradle 文件中定义：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task A &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;TaskA..&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在subproject02 工程的 build.gradle 文件中定义：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task B&#123;</span><br><span class="line">    dependsOn(<span class="string">&quot;:subproject01:A&quot;</span>) <span class="comment">//依赖根工程下的subject01中的任务A ：跨项目依赖。</span></span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;TaskB..&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：gradle B ,控制台显示如下</p><img src="/2f95dd0d983d/image-20241101153217804.png" class="" alt="image-20241101153217804"><p>拓展 1：当一个 Task 依赖多个Task 的时候，被依赖的Task 之间如果没有依赖关系，那么它们的执行顺序是随机的,并无影响。</p><p>拓展 2：重复依赖的任务只会执行一次,比如：</p><p>A-&gt;B、C </p><p>B-&gt;C</p><p>任务A 依赖任务 B 和任务 C、任务 B 依赖C 任务。执行任务A 的时候，显然任务C 被重复依赖了，C 只会执行一次。</p><h4 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h4><p>任务执行语法：gradle [taskName…] [–option-name…]。</p><table><thead><tr><th>分类</th><th>解释</th></tr></thead><tbody><tr><td><strong>常见的任务（*）</strong></td><td><code>gradle build</code>： 构建项目：编译、测试、打包等操作<code>gradle run</code> ：运行一个服务,需要application 插件支持，并且指定了主启动类才能运行<code>gradle clean</code>： 请求当前项目的 build 目录<code>gradle init</code> ： 初始化 gradle 项目使用<code>gradle wrapper</code>：生成wrapper 文件夹的。gradle wrapper 升级wrapper 版本号：<code>gradle wrapper --gradle-version=4.4``gradle wrapper --gradle-version 5.2.1 --distribution-type all</code> ：关联源码用</td></tr><tr><td><strong>项目报告相关任务</strong></td><td><code>gradle projects</code> ： 列出所选项目及子项目列表，以层次结构的形式显示<code>gradle tasks</code>： 列出所选项目【当前 project,不包含父、子】的已分配给任务组的那些任务。<code>gradle tasks --all</code> ：列出所选项目的所有任务。<code>gradle tasks --group=&quot;build setup&quot;</code>：列出所选项目中指定分组中的任务。<code>gradle help --task someTask</code> ：显示某个任务的详细信息<code>gradle dependencies</code> ：查看整个项目的依赖信息，以依赖树的方式显示<code>gradle properties</code> 列出所选项目的属性列表</td></tr><tr><td>调试相关选项</td><td>-h,–help： 查看帮助信息-v, –version：打印 Gradle、 Groovy、 Ant、 JVM 和操作系统版本信息。-S, –full-stacktrace：打印出所有异常的完整(非常详细)堆栈跟踪信息。-s,–stacktrace： 打印出用户异常的堆栈跟踪(例如编译错误)。-Dorg.gradle.daemon.debug&#x3D;true： 调试 Gradle  守护进程。-Dorg.gradle.debug&#x3D;true：调试 Gradle 客户端(非 daemon)进程。-Dorg.gradle.debug.port&#x3D;(port number)：指定启用调试时要侦听的端口号。默认值为 5005。</td></tr><tr><td>性能选项：【<strong>备注</strong>： 在gradle.properties 中指定这些选项中的许多选项，因此不需要命令行标志】</td><td>–build-cache, –no-build-cache： 尝试重用先前版本的输出。默认关闭(off)。–max-workers： 设置 Gradle 可以使用的woker 数。默认值是处理器数。-parallel, –no-parallel： 并行执行项目。有关此选项的限制，请参阅并行项目执行。默认设置为关闭(off)</td></tr><tr><td>守护进程选项</td><td>–daemon, –no-daemon：  使用 Gradle 守护进程运行构建。默认是on–foreground：在前台进程中启动 Gradle  守护进程。-Dorg.gradle.daemon.idletimeout&#x3D;(number of milliseconds)：Gradle Daemon 将在这个空闲时间的毫秒数之后停止自己。默认值为 10800000(3 小时)。</td></tr><tr><td>日志选项</td><td>-Dorg.gradle.logging.level&#x3D;(quiet,warn,lifecycle,info,debug)：通过 Gradle 属性设置日志记录级别。-q, –quiet： 只能记录错误信息-w, –warn： 设置日志级别为 warn-i, –info： 将日志级别设置为 info-d, –debug：登录调试模式(包括正常的堆栈跟踪)</td></tr><tr><td><strong>其它(*)</strong></td><td>-x：-x 等价于： –exclude-task ： 常见gradle -x test clean build–rerun-tasks： 强制执行任务，忽略up-to-date ,常见gradle build –rerun-tasks–continue： 忽略前面失败的任务,继续执行,而不是在遇到第一个失败时立即停止执行。每个遇到的故障都将在构建结束时报告，常见：gradle build –continue。gradle init –type pom ：将maven 项目转换为gradle 项目(根目录执行)gradle [taskName] ：执行自定义任务</td></tr><tr><td>…</td><td></td></tr></tbody></table><p>更 详 细 请 参 考 官 方 文 档 ： <a href="https://docs.gradle.org/current/userguide/command_line_interface.html">https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_executing_tasks</a></p><p>拓展：gradle  任务名是缩写：  任务名支持驼峰式命名风格的任务名缩写，如：connectTask  简写为：cT,执行任务 gradle cT。</p><p>拓展：前面提到的Gradle 指令本质：一个个的task[任务], Gradle 中所有操作都是基于任务完成的。</p><img src="/2f95dd0d983d/image-20241101153348137.png" class="" alt="image-20241101153348137"><p><strong>拓展 2</strong>：gradle 默认各指令之间相互的依赖关系：</p><p>相关解释：</p><img src="/2f95dd0d983d/image-20241101153404152.png" class="" alt="image-20241101153404152"><h5 id="任务定义方式"><a href="#任务定义方式" class="headerlink" title="任务定义方式"></a>任务定义方式</h5><p>任务定义方式，总体分为两大类：一种是通过 Project 中的task()方法,另一种是通过tasks 对象的 create 或者register 方法。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">task(<span class="string">&#x27;A&#x27;</span>,&#123;<span class="comment">//任务名称,闭包都作为参数println &quot;taskA...&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">task(<span class="string">&#x27;B&#x27;</span>)&#123;<span class="comment">//闭包作为最后一个参数可以直接从括号中拿出来println &quot;taskB...&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">task C&#123;<span class="comment">//groovy语法支持省略方法括号:上面三种本质是一种println &quot;taskC...&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> map=<span class="keyword">new</span> HashMap&lt;String,Object&gt;(); </span><br><span class="line">map.put(<span class="string">&quot;action&quot;</span>,&#123;println <span class="string">&quot;taskD..&quot;</span>&#125;) <span class="comment">//action属性可以设置为闭包task(map,&quot;D&quot;);</span></span><br><span class="line">tasks.create(<span class="string">&#x27;E&#x27;</span>)&#123;<span class="comment">//使用tasks的create方法println &quot;taskE..&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">tasks.register(<span class="string">&#x27;f&#x27;</span>)&#123; <span class="comment">//注：register执行的是延迟创建。也即只有当task被需要使用的时候才会被创建。</span></span><br><span class="line">    println <span class="string">&quot;taskF&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然：我们也可以在定义任务的同时指定任务的属性，具体属性有：</p><img src="/2f95dd0d983d/image-20241111112522642.png" class="" alt="image-20241111112522642"><p><strong>在定义任务时也可以给任务分配属性</strong>：定义任务的时候可以直接指定任务属性，也可以给已有的任务动态分配属性：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①.F是任务名，前面通过具名参数给map的属性赋值,以参数方式指定任务的属性信息</span></span><br><span class="line">task(<span class="attr">group:</span> <span class="string">&quot;atguigu&quot;</span>,<span class="attr">description:</span> <span class="string">&quot;this is task B&quot;</span>,<span class="string">&quot;F&quot;</span>)</span><br><span class="line"><span class="comment">//②.H是任务名，定义任务的同时，在内部直接指定属性信息</span></span><br><span class="line">task(<span class="string">&quot;H&quot;</span>) &#123;</span><br><span class="line">    group(<span class="string">&quot;atguigu&quot;</span>) description(<span class="string">&quot;this is the task H&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//③.Y是任务名，给已有的任务 在外部直接指定属性信息</span></span><br><span class="line">task <span class="string">&quot;y&quot;</span>&#123;&#125;</span><br><span class="line">y.group=<span class="string">&quot;atguigu&quot;</span></span><br><span class="line">clean.group(<span class="string">&quot;atguigu&quot;</span>) <span class="comment">//案例：给已有的clean任务重新指定组信息</span></span><br></pre></td></tr></table></figure><p>可以在 idea 中看到： 上面自定义的那几个任务和 gradle 自带的 clean 任务已经跑到：atguigu 组了。</p><img src="/2f95dd0d983d/image-20241111112634363.png" class="" alt="image-20241111112634363"><h5 id="任务类型"><a href="#任务类型" class="headerlink" title="任务类型"></a>任务类型</h5><p>前面我们定义的task 都是DefaultTask 类型的,如果要完成某些具体的操作完全需要我们自己去编写gradle 脚本，势必有些麻烦，那有没有一些现成的任务类型可以使用呢？有的，Gradle 官网给出了一些现成的任务类型帮助我们快速完成想要的任务，我们只需要在创建任务的时候，指定当前任务的类型即可，然后即可使用这种类型中的属性和API 方法了。</p><table><thead><tr><th>常见任务类型</th><th>该类型任务的作用</th></tr></thead><tbody><tr><td>Delete</td><td>删除文件或目录</td></tr><tr><td>Copy</td><td>将文件复制到目标目录中。此任务还可以在复制时重命名和筛选文件。</td></tr><tr><td>CreateStartScripts</td><td>创建启动脚本</td></tr><tr><td>Exec</td><td>执行命令行进程</td></tr><tr><td>GenerateMavenPom</td><td>生成 Maven 模块描述符(POM)文件。</td></tr><tr><td>GradleBuild</td><td>执行 Gradle 构建</td></tr><tr><td>Jar</td><td>组装 JAR 归档文件</td></tr><tr><td>JavaCompile</td><td>编译 Java 源文件</td></tr><tr><td>Javadoc</td><td>为 Java 类 生 成 HTML API 文 档</td></tr><tr><td>PublishToMavenRepository</td><td>将 MavenPublication  发布到 mavenartifactrepostal。</td></tr><tr><td>Tar</td><td>组装 TAR 存档文件</td></tr><tr><td>Test</td><td>执行 JUnit (3.8.x、4.x 或 5.x)或 TestNG 测试。</td></tr><tr><td>Upload</td><td>将 Configuration 的构件上传到一组存储库。</td></tr><tr><td>War</td><td>组装 WAR 档案。</td></tr><tr><td>Zip</td><td>组装 ZIP 归档文件。默认是压缩 ZIP 的内容。</td></tr></tbody></table><p><strong>提示 1</strong>：如果想看更详细的gradle 自带Task 类型，请参考官方文档： <a href="https://docs.gradle.org/current/dsl/index.html">https://docs.gradle.org/current/dsl/index.html</a></p><img src="/2f95dd0d983d/image-20241111112728206.png" class="" alt="image-20241111112728206"><p><strong>提示 2</strong>：  官方文档在给出这些任务类型的时候，同时给出了案例代码，可以点进去上述官网地址中的某个类型中观看</p><p>具体使用例如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tasks.register(<span class="string">&#x27;myClean&#x27;</span>, Delete) &#123; </span><br><span class="line">    delete buildDir</span><br><span class="line">&#125;</span><br><span class="line">在命令行执行 gradle myClean 发现就可以将当前project 的 build 目录删除当然除了gradle 自带的 task 类型,我们也可以自定义task 类型，如下所示： 拓展 <span class="number">4</span>:自定义 Task 类型</span><br><span class="line"><span class="keyword">def</span> myTask=task MyDefinitionTask (<span class="attr">type:</span> CustomTask) myTask.doFirst()&#123;</span><br><span class="line">    println <span class="string">&quot;task 执行之前 执行的 doFirst方法&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">myTask.doLast()&#123;</span><br><span class="line">    println <span class="string">&quot;task 执行之后 执行的 doLast方法&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTask</span> <span class="keyword">extends</span> <span class="title class_">DefaultTask</span> &#123;</span><br><span class="line">    <span class="comment">//@TaskAction表示Task本身要执行的方法@TaskAction</span></span><br><span class="line">    <span class="keyword">def</span> doSelf()&#123;</span><br><span class="line">    println <span class="string">&quot;Task 自身 在执行的in doSelf&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：gradle MyDefinitionTask</p><img src="/2f95dd0d983d/image-20241111112902113.png" class="" alt="image-20241111112902113"><h5 id="任务的执行顺序"><a href="#任务的执行顺序" class="headerlink" title="任务的执行顺序"></a>任务的执行顺序</h5><p>在 Gradle 中,有三种方式可以指定 Task 执行顺序：</p><p>1、dependsOn 强依赖方式</p><p>2、通过 Task 输入输出</p><p>3、通过 API 指定执行顺序</p><p>详细请参考官网：<a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html">https://docs.gradle.org/current/dsl/org.gradle.api.Task.html</a></p><h5 id="动态分配任务"><a href="#动态分配任务" class="headerlink" title="动态分配任务"></a>动态分配任务</h5><p>gradle 的强大功能不仅仅用于定义任务的功能。例如，可以使用它在循环中注册同一类型的多个任务</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">times &#123; counter -&gt; tasks.register(<span class="string">&quot;task$counter&quot;</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;I&#x27;m task number $counter&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦注册了任务,就可以通过 API 访问它们。例如，您可以使用它在运行时动态地向任务添加依赖项。Ant 不允许这样的事情发生。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">times &#123; counter -&gt; tasks.register(<span class="string">&quot;task$counter&quot;</span>) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;I&#x27;m task number $counter&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.named(<span class="string">&#x27;task0&#x27;</span>) &#123; dependsOn(<span class="string">&#x27;task2&#x27;</span>, <span class="string">&#x27;task3&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure><p>构建 4 个任务,但是任务 0 必须依赖于任务 2 和 3,那么代表任务 2 和 3 需要在任务 0 之前优先加载。具体测试如下：</p><img src="/2f95dd0d983d/image-20241111115452066.png" class="" alt="image-20241111115452066"><h5 id="任务的关闭与开启"><a href="#任务的关闭与开启" class="headerlink" title="任务的关闭与开启"></a>任务的关闭与开启</h5><p>每个任务都有一个 enabled 默认为的标志 true。将其设置为 false 阻止执行任何任务动作。禁用的任务将标记为“跳过”。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task disableMe &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;This task is Executing...&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    enabled(<span class="literal">true</span>)<span class="comment">//直接设置任务开启，默认值为true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//disableMe.enabled = false //设置关闭任务</span></span><br></pre></td></tr></table></figure><h5 id="任务的超时"><a href="#任务的超时" class="headerlink" title="任务的超时"></a>任务的超时</h5><p>每个任务都有一个 timeout 可用于限制其执行时间的属性。当任务达到超时时，其任务执行线程将被中断。该任务将被标记为失败。终结器任务仍将运行。如果 –continue 使用，其他任务可以在此之后继续运行。不响应中断的任务无法超时。Gradle 的所有内置任务均会及时响应超时</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task a() &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">        println <span class="string">&quot;当前任务a执行了&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    timeout = Duration.ofMillis(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">task b() &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;当前任务b执行了&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台使用<strong>： gradle a b</strong> 测试会发现执行a 的时候,由于a 执行超时，抛出异常，所以没有继续往下执行【b 也没执行】。然后在控制台使用： **gradle a b –continue,**测试会发现a 虽然执行失败，但是 b 还是执行了。</p><h5 id="任务的查找"><a href="#任务的查找" class="headerlink" title="任务的查找"></a>任务的查找</h5><p>常用的任务查找方法有：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">task atguigu &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;让天下没有难学的技术：尚硅谷&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据任务名查找</span></span><br><span class="line">tasks.findByName(<span class="string">&quot;atguigu&quot;</span>).doFirst(&#123;println <span class="string">&quot;尚硅谷校区1：北京&quot;</span>&#125;)</span><br><span class="line">tasks.getByName(<span class="string">&quot;atguigu&quot;</span>).doFirst(&#123;println <span class="string">&quot;尚硅谷校区2：深圳&quot;</span>&#125;)</span><br><span class="line"><span class="comment">//根据任务路径查找【相对路径】</span></span><br><span class="line">tasks.findByPath(<span class="string">&quot;:atguigu&quot;</span>).doFirst(&#123;println <span class="string">&quot;尚硅谷校区3：上海&quot;</span>&#125;) </span><br><span class="line">tasks.getByPath(<span class="string">&quot;:atguigu&quot;</span>).doFirst(&#123;println <span class="string">&quot;尚硅谷校区4：武汉&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>执行task： gradle atguigu，输出结果如下所示：</p><p>尚硅谷校区4：武汉….</p><p>尚硅谷校区3：上海….</p><p>尚硅谷校区2：深圳….</p><p>尚硅谷校区1：北京….</p><p>让天下没有难学的技术：尚硅谷</p><h5 id="任务的规则"><a href="#任务的规则" class="headerlink" title="任务的规则"></a>任务的规则</h5><p>当我们执行、依赖一个不存在的任务时，Gradle 会执行失败,报错误信息。那我们能否对其进行改进,当执行一个不存在的任务时，不是报错而是打印提示信息呢？</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;hello 尚硅谷的粉丝们&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.addRule(<span class="string">&quot;对该规则的一个描述，便于调试、查看等&quot;</span>)&#123; </span><br><span class="line">    String taskName -&gt; task(taskName) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&quot;该$&#123;taskName&#125;任务不存在，请查证后再执行&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试： 使用 gradle abc hello 进行测试,此时当 abc 任务不存在时，也不会报异常【不中断执行】而是提示自定义的规则信息，继续执行 hello 任务。此外，它还可以根据不同的规则动态创建需要的任务等情况。</p><h5 id="任务的-onlyIf-断言"><a href="#任务的-onlyIf-断言" class="headerlink" title="任务的 onlyIf 断言"></a>任务的 onlyIf 断言</h5><p>断言就是一个条件表达式。Task 有一个 onlyIf 方法。它接受一个闭包作为参数，如果该闭包返回 true 则该任务执行， 否则跳过。这有很多用途，比如控制程序哪些情况下打什么包，什么时候执行单元测试，什么情况下执行单元测试的时候不执行网络测试等。具体案例如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;hello 尚硅谷的粉丝们&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello.onlyIf &#123; !project.hasProperty(<span class="string">&#x27;fensi&#x27;</span>) &#125;</span><br></pre></td></tr></table></figure><p>测试：通过-P 为Project 添加fensi 属性</p><p><code>gradle hello -P fensi</code></p><h5 id="默认任务"><a href="#默认任务" class="headerlink" title="默认任务"></a>默认任务</h5><p>Gradle 允许您定义一个或多个在没有指定其他任务时执行的默认任务。代码如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">defaultTasks <span class="string">&#x27;myClean&#x27;</span>, <span class="string">&#x27;myRun&#x27;</span> tasks.register(<span class="string">&#x27;myClean&#x27;</span>)&#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">    println <span class="string">&#x27;Default Cleaning!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.register(<span class="string">&#x27;myRun&#x27;</span>) &#123; </span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Default Running!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.register(<span class="string">&#x27;other&#x27;</span>) &#123; </span><br><span class="line">    doLast &#123;</span><br><span class="line">    println <span class="string">&quot;I&#x27;m not a default task!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试及结果如下：</p><p><code>gradle -q Default Cleaning!</code></p><p>Default Running!</p><h3 id="Gradle-中的文件操作"><a href="#Gradle-中的文件操作" class="headerlink" title="Gradle 中的文件操作"></a>Gradle 中的文件操作</h3><p>几种常见的文件操作方式：</p><ul><li>本地文件</li><li>文件集合</li><li>文件树</li><li>文件拷贝</li><li>归档文件</li></ul><p>各种文件操作类型的详细介绍如下所示：</p><h4 id="本地文件"><a href="#本地文件" class="headerlink" title="本地文件"></a>本地文件</h4><p>使用 <code>Project.file(java.lang.Object)</code>方法，通过指定文件的相对路径或绝对路径来对文件的操作,其中相对路径为相对当前project[根project 或者子project]的目录。其实使用 <code>Project.file(java.lang.Object)</code>方法创建的 File 对象就是 Java 中的 File 对象，我们可以使用它就像在 Java 中使用一样。示例代码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用相对路径</span></span><br><span class="line">File configFile = file(<span class="string">&#x27;src/conf.xml&#x27;</span>)</span><br><span class="line">configFile.createNewFile();</span><br><span class="line"><span class="comment">// 使用绝对路径</span></span><br><span class="line">configFile = file(<span class="string">&#x27;D:\\conf.xml&#x27;</span>)</span><br><span class="line">println(configFile.createNewFile())</span><br><span class="line"><span class="comment">// 使用一个文件对象</span></span><br><span class="line">configFile = <span class="keyword">new</span> File(<span class="string">&#x27;src/config.xml&#x27;</span>)</span><br><span class="line">println(configFile.exists())</span><br></pre></td></tr></table></figure><h4 id="文件集合"><a href="#文件集合" class="headerlink" title="文件集合"></a>文件集合</h4><p>文 件 集 合 就 是 一 组 文 件 的 列 表 , 在 Gradle 中 , 文 件 集 合 用 FileCollection 接 口 表 示 。 我 们 可 以 使 用</p><p><code>Project.files(java.lang.Object[])</code>方法来获得一个文件集合对象，如下代码创建一个 FileCollection  实例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> collection = files(<span class="string">&#x27;src/test1.txt&#x27;</span>,<span class="keyword">new</span> File(<span class="string">&#x27;src/test2.txt&#x27;</span>),[<span class="string">&#x27;src/test3.txt&#x27;</span>, <span class="string">&#x27;src/test4.txt&#x27;</span>]) </span><br><span class="line">collection.forEach()&#123;File it -&gt;</span><br><span class="line">    it.createNewFile() <span class="comment">//创建该文件</span></span><br><span class="line">    println it.name <span class="comment">//输出文件名</span></span><br><span class="line">&#125;</span><br><span class="line">Set set1 = collection.files <span class="comment">// 把文件集合转换为java中的Set类型</span></span><br><span class="line">Set set2 = collection <span class="keyword">as</span> Set</span><br><span class="line">List list = collection <span class="keyword">as</span> List<span class="comment">//  把文件集合转换为java中的List类型</span></span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> list) &#123; </span><br><span class="line">    println item.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> union = collection + files(<span class="string">&#x27;src/test5.txt&#x27;</span>) <span class="comment">// 添加或者删除一个集合</span></span><br><span class="line"><span class="keyword">def</span> minus = collection - files(<span class="string">&#x27;src/test3.txt&#x27;</span>) </span><br><span class="line">union.forEach()&#123;</span><br><span class="line">    File it -&gt; println it.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于文件集合我们可以遍历它；也可以把它转换成java 类型；同时还能使用+来添加一个集合，或使用-来删除集合。</p><h4 id="文件树"><a href="#文件树" class="headerlink" title="文件树"></a>文件树</h4><p><strong>文件树是有层级结构的文件集合</strong>,一个文件树它可以代表一个目录结构或一 ZIP 压缩包中的内容结构。文件树是从文件集合继承过来的,<strong>所以文件树具有文件集合所有的功能</strong>。我们可以使用 Project.fileTree(java.util.Map)方法来创建文件树对象， 还可以使用过虑条件来包含或排除相关文件。示例代码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tree = fileTree(<span class="string">&#x27;src/main&#x27;</span>).include(<span class="string">&#x27;**/*.java&#x27;</span>)<span class="comment">// 第一种方式:使用路径创建文件树对象，同时指定包含的文件</span></span><br><span class="line"><span class="comment">//第二种方式:通过闭包创建文件树:</span></span><br><span class="line">tree = fileTree(<span class="string">&#x27;src/main&#x27;</span>) &#123;</span><br><span class="line">    include <span class="string">&#x27;**/*.java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">tree = fileTree(<span class="attr">dir:</span> <span class="string">&#x27;src/main&#x27;</span>, <span class="attr">include:</span> <span class="string">&#x27;**/*.java&#x27;</span>) <span class="comment">//第三种方式:通过路径和闭包创建文件树：具名参数给map传值tree = fileTree(dir: &#x27;src/main&#x27;, includes: [&#x27;**/*.java&#x27;, &#x27;**/*.xml&#x27;, &#x27;**/*.txt&#x27;], exclude: &#x27;**/*test*/**&#x27;)</span></span><br><span class="line">tree.each &#123;File file -&gt; <span class="comment">// 遍历文件树的所有文件</span></span><br><span class="line">    println file println file.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h4><p>我们可以使用 Copy 任务来拷贝文件，通过它可以过虑指定拷贝内容，还能对文件进行重命名操作等。Copy 任务必须指定一组需要拷贝的文件和拷贝到的目录，这里使用<code>CopySpec.from(java.lang.Object[])</code>方法指定原文件；使用<code>CopySpec.into(java.lang.Object)</code>方法指定目标目录。示例代码如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task copyTask(<span class="attr">type:</span> Copy) &#123; </span><br><span class="line">    from <span class="string">&#x27;src/main/resources&#x27;</span> into <span class="string">&#x27;build/config&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>from()</code>方法接受的参数和文件集合时files()一样。当参数为一个目录时，该目录下所有的文件都会被拷贝到指定目录下（目录自身不会被拷贝）；当参数为一个文件时，该文件会被拷贝到指定目录；如果参数指定的文件不存在，就会被忽略； 当参数为一个 Zip 压缩文件，该压缩文件的内容会被拷贝到指定目录。</p><p><code>into()</code>方法接受的参数与本地文件时 file()一样。 示例代码如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">task copyTask(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    <span class="comment">// 拷贝src/main/webapp目录下所有的文件</span></span><br><span class="line">    from <span class="string">&#x27;src/main/webapp&#x27;</span></span><br><span class="line">    <span class="comment">// 拷贝单独的一个文件</span></span><br><span class="line">    from <span class="string">&#x27;src/staging/index.html&#x27;</span></span><br><span class="line">    <span class="comment">// 从Zip压缩文件中拷贝内容</span></span><br><span class="line">    from zipTree(<span class="string">&#x27;src/main/assets.zip&#x27;</span>)</span><br><span class="line">    <span class="comment">// 拷贝到的目标目录</span></span><br><span class="line">    into <span class="string">&#x27;build/explodedWar&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在拷贝文件的时候还可以添加过虑条件来指定包含或排除的文件，示例如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">task copyTaskWithPatterns(<span class="attr">type:</span> Copy) &#123; </span><br><span class="line">    from <span class="string">&#x27;src/main/webapp&#x27;</span></span><br><span class="line">    into <span class="string">&#x27;build/explodedWar&#x27;</span> include <span class="string">&#x27;**/*.html&#x27;</span> include <span class="string">&#x27;**/*.jsp&#x27;</span></span><br><span class="line">    exclude &#123; </span><br><span class="line">        details -&gt; details.file.name.endsWith(<span class="string">&#x27;.html&#x27;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">在拷贝文件的时候还可以对文件进行重命名操作，示例如下：</span><br><span class="line">task rename(<span class="attr">type:</span> Copy) &#123; </span><br><span class="line">    from <span class="string">&#x27;src/main/webapp&#x27;</span> into <span class="string">&#x27;build/explodedWar&#x27;</span></span><br><span class="line">    <span class="comment">// 使用一个闭包方式重命名文件</span></span><br><span class="line">    rename &#123; </span><br><span class="line">        String fileName -&gt; fileName.replace(<span class="string">&#x27;-staging-&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中我们都是使用Copy 任务来完成拷贝功能的，那么有没有另外一种方式呢？答案是肯定的，那就是</p><p><code>Project.copy(org.gradle.api.Action)</code>方法。下面示例展示了 copy()方法的使用方式：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task copyMethod &#123; </span><br><span class="line">    doLast &#123;</span><br><span class="line">        copy &#123;</span><br><span class="line">        from <span class="string">&#x27;src/main/webapp&#x27;</span> into <span class="string">&#x27;build/explodedWar&#x27;</span> include <span class="string">&#x27;**/*.html&#x27;</span> include <span class="string">&#x27;**/*.jsp&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用project 对象的copy 方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">copy &#123;</span><br><span class="line">    <span class="comment">//相对路径或者绝对路径</span></span><br><span class="line">    from file(<span class="string">&#x27;src/main/resources/ddd.txt&#x27;</span>) <span class="comment">//file也可以换成new File()</span></span><br><span class="line">    into <span class="variable language_">this</span>.buildDir.absolutePath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>gradle build</code> 指令即可。去 build 目录的本地磁盘查看，就能看到。</p><h4 id="归档文件"><a href="#归档文件" class="headerlink" title="归档文件"></a>归档文件</h4><p>通常一个项目会有很多的 Jar 包，我们希望把项目打包成一个 WAR，ZIP 或 TAR 包进行发布，这时我们就可以使用</p><p>Zip，Tar，Jar，War 和Ear 任务来实现，不过它们的用法都一样，所以在这里我只介绍Zip 任务的示例。首先，创建一个 Zip 压缩文件,并指定压缩文件名称，如下代码所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span> version=<span class="number">1.0</span></span><br><span class="line">task myZip(<span class="attr">type:</span> Zip) &#123; </span><br><span class="line">    from <span class="string">&#x27;src/main‘</span></span><br><span class="line"><span class="string">    into ‘build’ //保存到build目录中</span></span><br><span class="line"><span class="string">    baseName = &#x27;</span>myGame<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">println myZip.archiveName</span></span><br></pre></td></tr></table></figure><p>执行命令gradle -q myZip，输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; gradle -q myZip myGame-1.0.zip</span><br></pre></td></tr></table></figure><p>最后，我们可以使用 <code>Project.zipTree(java.lang.Object)</code>和 <code>Project.tarTree(java.lang.Object)</code>方法来创建访问 Zip 压缩包的文件树对象，示例代码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用zipTree</span></span><br><span class="line">FileTree zip = zipTree(<span class="string">&#x27;someFile.zip&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用tarTree</span></span><br><span class="line">FileTree tar = tarTree(<span class="string">&#x27;someFile.tar&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在这里，我们介绍了 Gradle 对本地文件、文件集合、文件树、文件拷贝和归档文件的操作方式。更详细的请参考官方文档：<a href="https://docs.gradle.org/current/userguide/working_with_files.html">https://docs.gradle.org/current/userguide/working_with_files.html</a></p><h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><h4 id="依赖的方式"><a href="#依赖的方式" class="headerlink" title="依赖的方式"></a>依赖的方式</h4><p>Gradle 中的依赖分别为直接依赖，项目依赖，本地jar 依赖。案例如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//①.依赖当前项目下的某个模块[子工程]</span></span><br><span class="line">    implementation project(<span class="string">&#x27;:subject01&#x27;</span>)</span><br><span class="line">    <span class="comment">//②.直接依赖本地的某个jar文件</span></span><br><span class="line">    implementation files(<span class="string">&#x27;libs/foo.jar&#x27;</span>, <span class="string">&#x27;libs/bar.jar&#x27;</span>)</span><br><span class="line">    <span class="comment">//②.配置某文件夹作为依赖项</span></span><br><span class="line">    implementation fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br><span class="line">    <span class="comment">//③.直接依赖</span></span><br><span class="line">    implementation <span class="string">&#x27;org.apache.logging.log4j:log4j:2.17.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>直接依赖</strong>：在项目中直接导入的依赖，就是直接依赖<code>implementation &#39;org.apache.logging.log4j:log4j:2.17.2&#39;</code> 上面是简写法，完整版写法如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="attr">group:</span> <span class="string">&#x27;org.apache.logging.log4j&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;log4j&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;2.17.2&#x27;</span></span><br></pre></td></tr></table></figure><p>group&#x2F;name&#x2F;version 共同定位一个远程仓库,version 最好写一个固定的版本号，以防构建出问题，implementation 类似</p><p>maven 中的依赖的scope,对比 maven 中的依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.2</span><span class="number">.12</span>&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>项目依赖</strong>： 从项目的某个模块依赖另一个模块</p><p><code>implementation project(&#39;:subject01&#39;)</code></p><p>这种依赖方式是直接依赖本工程中的libary module，这个 libary module 需要在setting.gradle 中配置。</p><p><strong>本地jar 依赖</strong>：本地 jar 文件依赖，一般包含以下两种方式</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接依赖某文件</span></span><br><span class="line">implementation files(<span class="string">&#x27;libs/foo.jar&#x27;</span>, <span class="string">&#x27;libs/bar.jar&#x27;</span>)</span><br><span class="line"><span class="comment">//配置某文件夹作为依赖项</span></span><br><span class="line">implementation fileTree(<span class="attr">dir:</span> <span class="string">&#x27;libs&#x27;</span>, <span class="attr">include:</span> [<span class="string">&#x27;*.jar&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="依赖的下载"><a href="#依赖的下载" class="headerlink" title="依赖的下载"></a>依赖的下载</h4><p>当执行 build 命令时，gradle 就会去配置的依赖仓库中下载对应的 Jar，并应用到项目中。</p><h4 id="依赖的类型"><a href="#依赖的类型" class="headerlink" title="依赖的类型"></a>依赖的类型</h4><p>类似于 Maven 的 scope 标签，gradle 也提供了依赖的类型,具体如下所示：</p><table><thead><tr><th>compileOnly</th><th>由java插件提供,曾短暂的叫provided,后续版本已经改成了compileOnly,适用于编译期需要而不需要打包的情况</th></tr></thead><tbody><tr><td><strong>runtimeOnly</strong></td><td>由 java 插件提供,只在运行期有效,编译时不需要,比如mysql 驱动包。,取代老版本中被移除的 runtime</td></tr><tr><td><strong>implementation</strong></td><td>由 java 插件提供,针对源码[src&#x2F;main 目录] ,在编译、运行时都有效,取代老版本中被移除的 compile</td></tr><tr><td>testCompileOnly</td><td>由 java 插件提供,用于编译测试的依赖项，运行时不需要</td></tr><tr><td>testRuntimeOnly</td><td>由 java 插件提供,只在测试运行时需要，而不是在测试编译时需要,取代老版本中被移除的testRuntime</td></tr><tr><td><strong>testImplementation</strong></td><td>由 java 插件提供,针对测试代码[src&#x2F;test 目录] 取代老版本中被移除的testCompile</td></tr><tr><td><strong>providedCompile</strong></td><td>war 插件提供支持，编译、测试阶段代码需要依赖此类jar 包，而运行阶段容器已经提供了相应的支持，所以无需将这些文件打入到war 包中了;例如servlet-api.jar、jsp-api.jar</td></tr><tr><td>compile</td><td>编译范围依赖在所有的 classpath 中可用，同时它们也会被打包。在gradle 7.0 已经移除</td></tr><tr><td>runtime</td><td>runtime 依赖在运行和测试系统的时候需要,在编译的时候不需要,比如mysql 驱动包。在 gradle 7.0 已经移除</td></tr><tr><td><strong>api</strong></td><td>java-library 插件提供支持,这些依赖项可以传递性地导出给使用者，用于编译时和运行时。取代老版本中被移除的 compile</td></tr><tr><td>compileOnlyApi</td><td>java-library 插件提供支持,在声明模块和使用者在编译时需要的依赖项，但在运行时不需要。</td></tr></tbody></table><p>官方文档参考：</p><p><a href="https://docs.gradle.org/current/userguide/java_library_plugin.html">https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin:</a> 各个依赖范围的关系和说明<a href="https://docs.gradle.org/current/userguide/upgrading_version_6.html">https://docs.gradle.org/current/userguide/upgrading_version_6.html#sec:configuration_removal </a>: 依赖范围升级和移除<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin%EF%BC%9AAPI">https://docs.gradle.org/current/userguide/java_library_plugin.html#java_library_plugin：API</a> 和implemention 区别<a href="https://docs.gradle.org/current/userguide/java_plugin.html">https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin:</a> 执行java 命令时都使用了哪些依赖范围的依赖。<strong>提示 1</strong>：java 插件提供的功能，java-library 插件都提供。</p><img src="/2f95dd0d983d/image-20241112111326021.png" class="" alt="image-20241112111326021"><h4 id="api-与implementation-区别"><a href="#api-与implementation-区别" class="headerlink" title="api 与implementation 区别"></a>api 与implementation 区别</h4><p>如下所示：</p><img src="/2f95dd0d983d/image-20241112111358674.png" class="" alt="image-20241112111358674"><p><strong>编译时</strong>:如果 libC 的内容发生变化,由于使用的是 api 依赖,依赖会传递,所以 libC、libA、projectX 都要发生变化,都需要重新编译,速度慢,<strong>运行时：</strong>libC、libA、projectX 中的class 都要被加载。</p><p>**编译时:**如果libD 的内容发生变化,由于使用的是implemetation 依赖,依赖不会传递,只有libD、libB 要变化并重新编译,速度快,<strong>运行时：</strong>libC、libA、projectX 中的class 都要被加载。</p><p>拓展 3:api 和implementation 案例分析</p><img src="/2f95dd0d983d/image-20241112111512170.png" class="" alt="image-20241112111512170"><p>api 的适用场景是多module 依赖，moduleA 工程依赖了 module B，同时module B 又需要依赖了 module C，modelA 工程也需要去依赖 module C,这个时候避免重复依赖module,可以使用 module B api  依赖的方式去依赖module C,modelA 工程只需要依赖 moduleB 即可。</p><p><strong>总之，除非涉及到多模块依赖，为了避免重复依赖，咱们会使用api,其它情况我们优先选择implementation，拥有大量的api 依赖项会显著增加构建时间。</strong></p><h4 id="依赖冲突及解决方案"><a href="#依赖冲突及解决方案" class="headerlink" title="依赖冲突及解决方案"></a>依赖冲突及解决方案</h4><p>依赖冲突是指 “在编译过程中, 如果存在某个依赖的多个版本, 构建系统应该选择哪个进行构建的问题”,如下所示:</p><img src="/2f95dd0d983d/image-20241112111559163.png" class="" alt="image-20241112111559163"><p>A、B、C 都是本地子项目 module，log4j 是远程依赖。</p><p><strong>编译时：</strong> B 用 1.4.2 版本的  log4j，C 用 2.2.4 版本的  log4j,B 和 C 之间没有冲突</p><p><strong>打包时：</strong> 只能有一个版本的代码最终打包进最终的A对应的jar |war包，对于  Gradle 来说这里就有冲突了</p><img src="/2f95dd0d983d/image-20241112111617434.png" class="" alt="image-20241112111617434"><p>案例演示：我们在 build.gradle 引入依赖库</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&#x27;</span> </span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&#x27;</span> </span><br><span class="line">    implementation <span class="string">&#x27;org.hibernate:hibernate-core:3.6.3.Final&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修 改 build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&#x27;</span> </span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&#x27;</span> </span><br><span class="line">    implementation <span class="string">&#x27;org.hibernate:hibernate-core:3.6.3.Final&#x27;</span> </span><br><span class="line">    implementation <span class="string">&#x27;org.slf4j:slf4j-api:1.4.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2f95dd0d983d/image-20241112111717707.png" class="" alt="image-20241112111717707"><p>如上所示：默认下，Gradle 会使用最新版本的 jar 包【考虑到新版本的 jar 包一般都是向下兼容的】，实际开发中，还是建议使用官方自带的这种解决方案。<strong>当然除此之外，Gradle 也为我们提供了一系列的解决依赖冲突的方法</strong>: <strong>exclude 移除一个依赖</strong>，<strong>不允许依赖传递</strong>，<strong>强制使用某个版本</strong>。</p><ul><li>Exclude 排除某个依赖</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&#x27;</span> </span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&#x27;</span> </span><br><span class="line">    implementation(<span class="string">&#x27;org.hibernate:hibernate-core:3.6.3.Final&#x27;</span>)&#123;</span><br><span class="line">       <span class="comment">// 排除某一个库(slf4j)依赖：如下三种写法都行</span></span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;org.slf4j&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;slf4j-api&#x27;</span></span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;org.slf4j&#x27;</span> exclude <span class="attr">module:</span> <span class="string">&#x27;slf4j-api&#x27;</span></span><br><span class="line">        exclude(<span class="attr">group:</span> <span class="string">&#x27;org.slf4j&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;slf4j-api&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//排除之后,使用手动的引入即可。</span></span><br><span class="line">    implementation <span class="string">&#x27;org.slf4j:slf4j-api:1.4.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不允许依赖传递</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&#x27;</span> </span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&#x27;</span> </span><br><span class="line">    implementation(<span class="string">&#x27;org.hibernate:hibernate-core:3.6.3.Final&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//不允许依赖传递，一般不用</span></span><br><span class="line">        transitive(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//排除之后,使用手动的引入即可</span></span><br><span class="line">    implementation <span class="string">&#x27;org.slf4j:slf4j-api:1.4.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在添加依赖项时,如果设置 transitive 为false,表示关闭依赖传递。即内部的所有依赖将不会添加到编译和运行时的类路径。</p><ul><li>强制使用某个版本</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&#x27;</span> </span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&#x27;</span> </span><br><span class="line">    implementation(<span class="string">&#x27;org.hibernate:hibernate-core:3.6.3.Final&#x27;</span>)</span><br><span class="line">    <span class="comment">//强制使用某个版本!!【官方建议使用这种方式】</span></span><br><span class="line">    implementation(<span class="string">&#x27;org.slf4j:slf4j-api:1.4.0!!&#x27;</span>)</span><br><span class="line">    <span class="comment">//这种效果和上面那种一样,强制指定某个版本</span></span><br><span class="line">    implementation(<span class="string">&#x27;org.slf4j:slf4j-api:1.4.0&#x27;</span>)&#123;</span><br><span class="line">        version&#123;</span><br><span class="line">            strictly(<span class="string">&quot;1.4.0&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拓展</strong>：我们可以先查看当前项目中到底有哪些依赖冲突：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面我们配置，当 Gradle 构建遇到依赖冲突时，就立即构建失败</span></span><br><span class="line">configurations.all() &#123;</span><br><span class="line">    Configuration configuration -&gt;</span><br><span class="line">    <span class="comment">//当遇到版本冲突时直接构建失败configuration.resolutionStrategy.failOnVersionConflict()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gradle-插件"><a href="#Gradle-插件" class="headerlink" title="Gradle 插件"></a>Gradle 插件</h3><h4 id="使用插件的原因"><a href="#使用插件的原因" class="headerlink" title="使用插件的原因"></a>使用插件的原因</h4><p>简单的说,通过应用插件我们可以:</p><ol><li>促进代码重用、减少功能类似代码编写、提升工作效率</li><li>促进项目更高程度的模块化、自动化、便捷化</li><li>可插拔式的的扩展项目的功能</li></ol><h4 id="插件的作用"><a href="#插件的作用" class="headerlink" title="插件的作用"></a>插件的作用</h4><p>在项目构建过程中做很多事情，把插件应用到项目中，通常可以完成:</p><ol><li>可以添加任务【task】到项目中，从而帮助完成测试、编译、打包等。</li><li>可以添加依赖配置到项目中。</li><li>可以向项目中拓展新的扩展属性、方法等。</li><li>可以对项目进行一些约定，如应用 Java 插件后，约定src&#x2F;main&#x2F;java 目录是我们的源代码存在位置，编译时编译这个目录下的Java 源代码文件。</li></ol><h4 id="插件的分类和使用"><a href="#插件的分类和使用" class="headerlink" title="插件的分类和使用"></a>插件的分类和使用</h4><img src="/2f95dd0d983d/image-20241112114242010.png" class="" alt="image-20241112114242010"><h5 id="第一种：脚本插件"><a href="#第一种：脚本插件" class="headerlink" title="第一种：脚本插件"></a>第一种：脚本插件</h5><p>脚本插件的本质就是一个脚本文件，使用脚本插件时通过apply from:将脚本加载进来就可以了，后面的脚本文件可以是本地的也可以是网络上的脚本文件，下面定义一段脚本，我们在 build.gradle 文件中使用它，具体如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//version.gradle文件</span></span><br><span class="line">ext &#123;</span><br><span class="line">    company= <span class="string">&quot;尚硅谷&quot;</span> cfgs = [</span><br><span class="line">    <span class="attr">compileSdkVersion :</span> JavaVersion.VERSION_1_8</span><br><span class="line">    ]</span><br><span class="line">    spring = [</span><br><span class="line">    <span class="attr">version :</span> <span class="string">&#x27;5.0.0&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面将将在构建文件中使用这个脚本文件，具体如下:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build.gradle文件</span></span><br><span class="line"><span class="comment">//map作为参数</span></span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;version.gradle&#x27;</span> </span><br><span class="line">task taskVersion&#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">    println <span class="string">&quot;公司名称为：$&#123;company&#125;,JDK版本是$&#123;cfgs.compileSdkVersion&#125;,版本号是$&#123;spring.version&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的执行结果如下：</p><p><code>PS D:\repos\idearepos\root&gt; gradle -q taskVersion</code></p><p>版本是2.0,版本号是1</p><p><strong>意义：</strong>脚本文件模块化的基础，可按功能把我们的脚本进行拆分一个个公用、职责分明的文件，然后在主脚本文件引用， 比如：将很多共有的库版本号一起管理、应用构建版本一起管理等。</p><h5 id="第二种：对象插件之内部插件-核心插件"><a href="#第二种：对象插件之内部插件-核心插件" class="headerlink" title="第二种：对象插件之内部插件[核心插件]"></a>第二种：对象插件之内部插件[核心插件]</h5><p>二进制插件[对象插件]就是实现了 org.gradle.api.Plugin  接口的插件，每个 Java Gradle 插件都有一个 plugin id。</p><img src="/2f95dd0d983d/image-20241112114506332.png" class="" alt="image-20241112114506332"><p>可通过如下方式使用一个 Java 插件： apply plugin : ‘java’ &#x2F;&#x2F;map具名参数方式或者：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以使用闭包作为project.apply方法的一个参数</span></span><br><span class="line">apply&#123;</span><br><span class="line">    plugin <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码就将 Java  插件应用到我们的项目中了，对于 Gradle 自带的核心插件都有唯一的 plugin id，其中 java  是Java 插件的 plugin id,这个 plugin id 必须是唯一的，可使用应用包名来保证 plugin id 的唯一性。这里的 java  对应的具体类型是 org.gradle.api.plugins.JavaPlugin，所以可以使用如下方式使用 Java 插件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方式1：Map具名参数,全类名</span></span><br><span class="line">apply <span class="attr">plugin:</span>org.gradle.api.plugins.JavaPlugin</span><br><span class="line"><span class="comment">//org.gradle.api.plugins默认导入：使用方式2 apply plugin:JavaPlugin</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span> <span class="comment">//核心插件，无需事先引入，使用方式3:插件的id</span></span><br></pre></td></tr></table></figure><p>Gradle 中提供的二进制插件【核心插件】,可参考: <a href="https://docs.gradle.org/current/userguide/plugin_reference.html">https://docs.gradle.org/current/userguide/plugin_reference.html</a></p><h5 id="第二种：对象插件之第三方插件"><a href="#第二种：对象插件之第三方插件" class="headerlink" title="第二种：对象插件之第三方插件"></a>第二种：对象插件之第三方插件</h5><p>如果是使用第三方发布的二进制插件，一般需要配置对应的仓库和类路径,</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用传统的应用方式</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">    springBootVersion = <span class="string">&quot;2.3.3.RELEASE&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        maven &#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27;</span> &#125;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处先引入插件</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">    classpath(<span class="string">&quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再应用插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span> <span class="comment">//社区插件,需要事先引入，不必写版本号</span></span><br></pre></td></tr></table></figure><p>但是如果是第三方插件已经被托管在 <a href="https://plugins.gradle.org/">https://plugins.gradle.org/</a> 网站上，就可以不用在 buildscript 里配置 classpath</p><p>依赖了，直接使用新出的 plugins DSL 的方式引用，案例如下： 使 用 plugins DSL 方 式</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.4.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>如果使用老式插件方式buildscript{}要放在build.gradle 文件的最前面,而新式plugins{}没有该限制。</li><li>托管在网站gradle 插件官网的第三方插件有两种使用方式，一是传统的buildscript 方式，一种是 plugins DSL 方式 。</li></ol><p>第二种：对象插件之用户自定义插件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingPluginExtension</span> &#123; </span><br><span class="line">    Property&lt;String&gt; getMessage() Property&lt;String&gt; getGreeter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; &#123;</span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;</span><br><span class="line">    <span class="keyword">def</span> extension = project.extensions.create(<span class="string">&#x27;greeting&#x27;</span>, GreetingPluginExtension) </span><br><span class="line">    project.task(<span class="string">&#x27;hello&#x27;</span>) &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">&quot;$&#123;extension.message.get()&#125; from $&#123;extension.greeter.get()&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> GreetingPlugin</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the extension using a DSL block </span></span><br><span class="line">greeting &#123;</span><br><span class="line">    message = <span class="string">&#x27;Hi&#x27;</span></span><br><span class="line">    greeter = <span class="string">&#x27;Gradle&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考地址：<a href="https://docs.gradle.org/current/userguide/custom_plugins.html">https://docs.gradle.org/current/userguide/custom_plugins.html</a></p><p>我们直接执行 hello 任务.&#x2F;gradle hello 即可,这种方式实现的插件我们一般不使用，因为这种方式局限性太强，只能本</p><p>Project，而其他的Project 不能使用。</p><h4 id="buildSrc-项目"><a href="#buildSrc-项目" class="headerlink" title="buildSrc 项目"></a>buildSrc 项目</h4><p>buildSrc 是Gradle 默认的插件目录，编译 Gradle 的时候会自动识别这个目录，将其中的代码编译为插件。</p><ol><li>首先先建立一个名为 buildSrc 的 java Module,将 buildSrc 从 included modules 移除,重新构建,然后只保留 build.gradle和src&#x2F;main 目录，其他全部删掉,注意名字一定是 buildSrc,不然会找不到插件。</li><li>然后修改Gradle 中的内容</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;groovy&#x27;</span> <span class="comment">// 必 须</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation gradleApi() <span class="comment">//必须</span></span><br><span class="line">    implementation localGroovy() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    google() </span><br><span class="line">    jcenter()</span><br><span class="line">    mavenCentral() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把项目入口设置为src/main/groovy </span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        groovy &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;src/main/groovy&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2f95dd0d983d/image-20241203155152051.png" class="" alt="image-20241203155152051"><p>创建入口目录，在src&#x2F;main 下创建代码入口目录，如下：</p><p>然后实现插件代码Text.groovy，注意文件后缀为groovy,文件要引入package com.atguigu</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin </span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Text</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt;&#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123; </span><br><span class="line">        project.task(<span class="string">&quot;atguigu&quot;</span>)&#123;</span><br><span class="line">            doLast&#123;</span><br><span class="line">            println(<span class="string">&quot;自定义atguigu插件&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在 main 目录下创建 resources 目录,在 resources 目录下创建 META-INF 目录，在 META-INF 目录下创建gradle-plugins 目录，在gradle-plugins 目录下创建properties 文件</p><img src="/2f95dd0d983d/image-20241203155443427.png" class="" alt="image-20241203155443427"><p>properties 文件可以自己命名，但是要以.properties 结尾，比如 com.atguigu.plugin.properties,其 com.atguigu.plugin 就是定义的包名路径</p><img src="/2f95dd0d983d/image-20241203155504085.png" class="" alt="image-20241203155504085"><p>最后需要在properties 文件中指明我们实现插件的全类名 implementation-class&#x3D;com.atguigu.Text 到目前为止我们的插件项目已经写完了，在 module 引入我们写的插件 apply plugin:’com.atguigu.plugin’,然后执行插件的Task</p><p>.&#x2F;gradle atguigu</p><p>输出:</p><img src="/2f95dd0d983d/image-20241203155544319.png" class="" alt="image-20241203155544319"><p>这种形式的写法，在我们整个工程的 module 都可以使用，但也只是限制在本工程，其他工程不能使用。</p><p><strong>改进</strong>：</p><p>第二种写插件的方式他只能在本工程中使用，而其他的项目工程不能使用，有时候我们需要一个插件在多个工程中使用， 这时候我们就需要把插件上传maven 中。</p><p>第一步: 首先将上述buildSrc 目录复制一份，修改文件夹名，然后在settings.gradle 文件中使用include 引入</p><p>第二步：修改build.gradle 文件，发布到maven 仓库中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;groovy&#x27;</span> <span class="comment">// 必 须</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven-publish&#x27;</span> </span><br><span class="line">dependencies &#123;</span><br><span class="line">implementation gradleApi() <span class="comment">//必须</span></span><br><span class="line">    implementation localGroovy() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">google() </span><br><span class="line">    jcenter()</span><br><span class="line">mavenCentral() <span class="comment">//必须</span></span><br><span class="line">&#125;</span><br><span class="line">sourceSets &#123; <span class="comment">//把项目入口设置为src/main/groovy </span></span><br><span class="line">        main &#123;</span><br><span class="line">        groovy &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;src/main/groovy&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        myLibrary(MavenPublication) &#123;</span><br><span class="line">        groupId = <span class="string">&#x27;com.atguigu.plugin&#x27;</span> <span class="comment">//指定GAV坐标信息artifactId = &#x27;library&#x27;</span></span><br><span class="line">        version = <span class="string">&#x27;1.1&#x27;</span></span><br><span class="line">        from components.java<span class="comment">//发布jar包</span></span><br><span class="line">        <span class="comment">//from components.web///引入war插件，发布war包</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&quot;$rootDir/lib/release&quot;</span> &#125;</span><br><span class="line">    <span class="comment">//发布项目到私服中</span></span><br><span class="line">    <span class="comment">//maven &#123;</span></span><br><span class="line">    <span class="comment">//name = &#x27;myRepo&#x27; //name属性可选,表示仓库名称，url必填</span></span><br><span class="line">    <span class="comment">////发布地址:可以是本地仓库或者maven私服</span></span><br><span class="line">    <span class="comment">////url = layout.buildDirectory.dir(&quot;repo&quot;)</span></span><br><span class="line">    <span class="comment">////url=&#x27;http://my.org/repo&#x27;</span></span><br><span class="line">    <span class="comment">//// change URLs to point to your repos, e.g. http://my.org/repo</span></span><br><span class="line">    <span class="comment">////认证信息:用户名和密码</span></span><br><span class="line">    <span class="comment">//credentials &#123;</span></span><br><span class="line">    <span class="comment">//username = &#x27;joe&#x27;</span></span><br><span class="line">    <span class="comment">//password = &#x27;secret&#x27;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：执行publish 指令,发布到根 project 或者maven 私服仓库。</p><p>第四步：使用插件,在项目级 build.gradle 文件中将插件添加到 classpath：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&quot;$rootDir/lib/release&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">    classpath <span class="string">&quot;com.atguigu.plugin:library:1.1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line"><span class="comment">//是在 atguiguplugin  中定义的插件 ID apply plugin: &#x27;com.atguigu.plugin&#x27;</span></span><br></pre></td></tr></table></figure><p>第五步：执行 gradle build 指令就会在控制台看到自定义插件的输出，说明自定义插件就已经生效了。</p><p>最后，至于如何写一个插件，能帮助项目更加自动化或者便捷化，是值得大家未来需要长期思考、关注、努力的点。</p><h4 id="插件的关注点"><a href="#插件的关注点" class="headerlink" title="插件的关注点"></a>插件的关注点</h4><h5 id="第一点-插件的引用"><a href="#第一点-插件的引用" class="headerlink" title="第一点: 插件的引用"></a>第一点: 插件的引用</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;插件名&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="第二点-主要的功能-任务"><a href="#第二点-主要的功能-任务" class="headerlink" title="第二点:主要的功能[任务]"></a>第二点:主要的功能[任务]</h5><img src="/2f95dd0d983d/image-20241203161756587.png" class="" alt="image-20241203161756587"><p>当我们在工程中引入插件后，插件会自动的为我们的工程添加一些额外的任务来完成相应的功能。以Java 插件为例，当我们加入java 插件之后，就加入了如下功能：</p><p>具体大家可通过gradle tasks 查看加入某个插件前后的区别。</p><p>说明：Gradle 中的任务依赖关系是很重要的，它们之间的依赖关系就形成了构建的基本流程。</p><h5 id="第三点-工程目录结构"><a href="#第三点-工程目录结构" class="headerlink" title="第三点:工程目录结构"></a>第三点:工程目录结构</h5><p>一些插件对工程目结构有约定，所以我们一般遵循它的约定结构来创建工程，这也是 Gradle 的“约定优于配置”原则。例如java 插件规定的项目源集目录结构如下所示：</p><img src="/2f95dd0d983d/image-20241203161819479.png" class="" alt="image-20241203161819479"><p>如果要使用某个插件就应该按照它约定的目录结构设置，这样能大大提高我们的效率，当然各目录结构也可以自己定义。</p><h5 id="第四点：依赖管理"><a href="#第四点：依赖管理" class="headerlink" title="第四点：依赖管理"></a>第四点：依赖管理</h5><p>比如前面我们提到的 依赖的类型[依赖管理]部分，不同的插件提供了不同的依赖管理。</p><h5 id="第五点：常用的属性"><a href="#第五点：常用的属性" class="headerlink" title="第五点：常用的属性"></a>第五点：常用的属性</h5><p>例如：Java  插件会为工程添加一些常用的属性,我们可以直接在编译脚本中直接使用。</p><table><thead><tr><th>属性名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>reportsDirName</td><td>String</td><td>reports</td><td>生成报告的目录名称</td></tr><tr><td>reportsDir</td><td>File（只读）</td><td>buildDir&#x2F;reportsDirName</td><td>生成报告的目录</td></tr><tr><td>testResultsDirName</td><td>String</td><td>test-results</td><td>生成测试result.xml 文件的目录名称</td></tr><tr><td>testResultsDir</td><td>File（只读）</td><td>reportsDir&#x2F;testReportDirName</td><td>生成测试报告的目录</td></tr><tr><td>libsDirName</td><td>String</td><td>libs</td><td>生成lib 库的目录名称</td></tr><tr><td>libsDir</td><td>File（只读）</td><td>buildDir&#x2F;libsDirName</td><td>生成lib 库的目录</td></tr><tr><td>distsDirName</td><td>String</td><td>distributions</td><td>生成发布文件的目录名称</td></tr><tr><td>distsDir</td><td>File（只读）</td><td>buildDir&#x2F;distsDirName</td><td>生成发布文件的目录</td></tr><tr><td>docsDirName</td><td>String</td><td>docs</td><td>生成帮助文档的目录名称</td></tr><tr><td>docsDir</td><td>File（只读）</td><td>buildDir&#x2F;docsDirName</td><td>生成帮助文档的目录</td></tr><tr><td>dependencyCacheDirName</td><td>String</td><td>dependency-cache</td><td>存储缓存资源依赖信息的目录名称</td></tr><tr><td>dependencyCacheDir</td><td>File（只读）</td><td>buildDir&#x2F;dependencyCacheDirName</td><td>存储缓存资源依赖信息的目录</td></tr></tbody></table><p>当然，这里还有一些其它属性</p><table><thead><tr><th>属性名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Gradle-入门&quot;&gt;&lt;a href=&quot;#Gradle-入门&quot; class=&quot;headerlink&quot; title=&quot;Gradle 入门&quot;&gt;&lt;/a&gt;Gradle 入门&lt;/h2&gt;&lt;h3 id=&quot;Gradle-简介&quot;&gt;&lt;a href=&quot;#Gradle-简介&quot; class=&quot;headerlink&quot; title=&quot;Gradle 简介&quot;&gt;&lt;/a&gt;Gradle 简介&lt;/h3&gt;&lt;p&gt;Gradle 是一款Google 推出的&lt;strong&gt;基于 JVM、&lt;/strong&gt;通用灵活的&lt;strong&gt;项目构建工具，&lt;/strong&gt;支持 Maven，JCenter 多种第三方仓库;支持传递性依赖管理、废弃了繁杂的xml 文件，转而使用&lt;strong&gt;简洁的&lt;/strong&gt;、&lt;strong&gt;支持多种语言&lt;/strong&gt;(例如：java、groovy 等)的 &lt;strong&gt;build 脚本文件&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Gradle" scheme="https://blog.48626.xyz/categories/Gradle/"/>
    
    
    <category term="Gradle" scheme="https://blog.48626.xyz/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式</title>
    <link href="https://blog.48626.xyz/745fda1b4f91.html"/>
    <id>https://blog.48626.xyz/745fda1b4f91.html</id>
    <published>2024-09-25T03:37:36.000Z</published>
    <updated>2024-09-25T03:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>责任链模式</strong>是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。</p><img src="/745fda1b4f91/image-20240925105855531.png" class="" alt="image-20240925105855531"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你正在开发一个在线订购系统。 你希望对系统访问进行限制， 只允许认证用户创建订单。 此外， 拥有管理权限的用户也拥有所有订单的完全访问权限。</p><p>简单规划后， 你会意识到这些检查必须依次进行。 只要接收到包含用户凭据的请求， 应用程序就可尝试对进入系统的用户进行认证。 但如果由于用户凭据不正确而导致认证失败， 那就没有必要进行后续检查了。</p><img src="/745fda1b4f91/image-20240925105955039.png" class="" alt="请求必须经过一系列检查后才能由订购系统来处理。"><p>在接下来的几个月里， 你实现了后续的几个检查步骤。</p><ul><li>一位同事认为直接将原始数据传递给订购系统存在安全隐患。 因此你新增了额外的验证步骤来清理请求中的数据。</li><li>过了一段时间， 有人注意到系统无法抵御暴力密码破解方式的攻击。 为了防范这种情况， 你立刻添加了一个检查步骤来过滤来自同一 IP 地址的重复错误请求。</li><li>又有人提议你可以对包含同样数据的重复请求返回缓存中的结果， 从而提高系统响应速度。 因此， 你新增了一个检查步骤， 确保只有没有满足条件的缓存结果时请求才能通过并被发送给系统。</li></ul><img src="/745fda1b4f91/image-20240925110057958.png" class="" alt="代码变得越来越多， 也越来越混乱。"><p>检查代码本来就已经混乱不堪， 而每次新增功能都会使其更加臃肿。 修改某个检查步骤有时会影响其他的检查步骤。 最糟糕的是， 当你希望复用这些检查步骤来保护其他系统组件时， 你只能复制部分代码， 因为这些组件只需部分而非全部的检查步骤。</p><p>系统会变得让人非常费解， 而且其维护成本也会激增。 你在艰难地和这些代码共处一段时间后， 有一天终于决定对整个系统进行重构。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>与许多其他行为设计模式一样， <strong>责任链</strong>会将特定行为转换为被称作<em>处理者</em>的独立对象。 在上述示例中， 每个检查步骤都可被抽取为仅有单个方法的类， 并执行检查操作。 请求及其数据则会被作为参数传递给该方法。</p><p>模式建议你将这些处理者连成一条链。 链上的每个处理者都有一个成员变量来保存对于下一处理者的引用。 除了处理请求外， 处理者还负责沿着链传递请求。 请求会在链上移动， 直至所有处理者都有机会对其进行处理。</p><p>最重要的是： 处理者可以决定不再沿着链传递请求， 这可高效地取消所有后续处理步骤。</p><p>在我们的订购系统示例中， 处理者会在进行请求处理工作后决定是否继续沿着链传递请求。 如果请求中包含正确的数据， 所有处理者都将执行自己的主要行为， 无论该行为是身份验证还是数据缓存。</p><img src="/745fda1b4f91/image-20240925110131803.png" class="" alt="处理者依次排列， 组成一条链。"><p>不过还有一种稍微不同的方式 （也是更经典一种）， 那就是处理者接收到请求后自行决定是否能够对其进行处理。 如果自己能够处理， 处理者就不再继续传递请求。 因此在这种情况下， 每个请求要么最多有一个处理者对其进行处理， 要么没有任何处理者对其进行处理。 在处理图形用户界面元素栈中的事件时， 这种方式非常常见。</p><p>例如， 当用户点击按钮时， 按钮产生的事件将沿着 GUI 元素链进行传递， 最开始是按钮的容器 （如窗体或面板）， 直至应用程序主窗口。 链上第一个能处理该事件的元素会对其进行处理。 此外， 该例还有另一个值得我们关注的地方： 它表明我们总能从对象树中抽取出链来。</p><img src="/745fda1b4f91/image-20240925110203507.png" class="" alt="对象树的枝干可以组成一条链。"><p>所有处理者类均实现同一接口是关键所在。 每个具体处理者仅关心下一个包含 <code>execute</code>执行方法的处理者。 这样一来， 你就可以在运行时使用不同的处理者来创建链， 而无需将相关代码与处理者的具体类进行耦合。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><img src="/745fda1b4f91/image-20240925110235498.png" class="" alt="给技术支持打电话时你可能得应对多名接听人员。"><p>最近， 你刚为自己的电脑购买并安装了一个新的硬件设备。 身为一名极客， 你显然在电脑上安装了多个操作系统， 所以你会试着启动所有操作系统来确认其是否支持新的硬件设备。 Windows 检测到了该硬件设备并对其进行了自动启用。 但是你喜爱的 Linux 系统并不支持新硬件设备。 抱着最后一点希望， 你决定拨打包装盒上的技术支持电话。</p><p>首先你会听到自动回复器的机器合成语音， 它提供了针对各种问题的九个常用解决方案， 但其中没有一个与你遇到的问题相关。 过了一会儿， 机器人将你转接到人工接听人员处。</p><p>这位接听人员同样无法提供任何具体的解决方案。 他不断地引用手册中冗长的内容， 并不会仔细聆听你的回应。 在第 10 次听到 “你是否关闭计算机后重新启动呢？” 这句话后， 你要求与一位真正的工程师通话。</p><p>最后， 接听人员将你的电话转接给了工程师， 他或许正缩在某幢办公大楼的阴暗地下室中， 坐在他所深爱的服务器机房里， 焦躁不安地期待着同一名真人交流。 工程师告诉了你新硬件设备驱动程序的下载网址， 以及如何在 Linux 系统上进行安装。 问题终于解决了！ 你挂断了电话， 满心欢喜。</p><h2 id="责任链模式结构"><a href="#责任链模式结构" class="headerlink" title="责任链模式结构"></a>责任链模式结构</h2><img src="/745fda1b4f91/image-20240925110305954.png" class="" alt="image-20240925110305954"><ol><li><p><strong>处理者</strong> （Handler） 声明了所有具体处理者的通用接口。 该接口通常仅包含单个方法用于请求处理， 但有时其还会包含一个设置链上下个处理者的方法。</p></li><li><p><strong>基础处理者</strong> （Base Handler） 是一个可选的类， 你可以将所有处理者共用的样本代码放置在其中。</p><p>通常情况下， 该类中定义了一个保存对于下个处理者引用的成员变量。 客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。 该类还可以实现默认的处理行为： 确定下个处理者存在后再将请求传递给它。</p></li><li><p><strong>具体处理者</strong> （Concrete Handlers） 包含处理请求的实际代码。 每个处理者接收到请求后， 都必须决定是否进行处理， 以及是否沿着链传递请求。</p><p>处理者通常是独立且不可变的， 需要通过构造函数一次性地获得所有必要地数据。</p></li><li><p><strong>客户端</strong> （Client） 可根据程序逻辑一次性或者动态地生成链。 值得注意的是， 请求可发送给链上的任意一个处理者， 而非必须是第一个处理者。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在本例中， <strong>责任链</strong>模式负责为活动的 GUI 元素显示上下文帮助信息。</p><img src="/745fda1b4f91/image-20240925110404091.png" class="" alt="GUI 类使用组合模式生成。 每个元素都链接到自己的容器元素。 你可随时构建从当前元素开始的、 遍历其所有容器的元素链。"><p>应用程序的 GUI　通常为对象树结构。 例如， 负责渲染程序主窗口的 <code>对话框</code>类就是对象树的根节点。 对话框包含 <code>面板</code> ， 而面板可能包含其他面板， 或是 <code>按钮</code>和 <code>文本框</code>等下层元素。</p><p>只要给一个简单的组件指定帮助文本， 它就可显示简短的上下文提示。 但更复杂的组件可自定义上下文帮助文本的显示方式， 例如显示手册摘录内容或在浏览器中打开一个网页。</p><img src="/745fda1b4f91/image-20240925110429645.png" class="" alt="帮助请求如何在 GUI 对象中移动。"><p>当用户将鼠标指针移动到某个元素并按下 <code>F1</code>键时， 程序检测到指针下的组件并对其发送帮助请求。 该请求不断向上传递到该元素所有的容器， 直至某个元素能够显示帮助信息。</p><h3 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a><strong>middleware</strong></h3><h4 id="middleware-Middleware-java-基础验证接口"><a href="#middleware-Middleware-java-基础验证接口" class="headerlink" title="middleware&#x2F;Middleware.java: 基础验证接口"></a><strong>middleware&#x2F;Middleware.java:</strong> 基础验证接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.middleware;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础验证接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/25 上午11:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Middleware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Middleware next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建中间件对象链。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Middleware <span class="title function_">link</span><span class="params">(Middleware first, Middleware... chain)</span> &#123;</span><br><span class="line">        <span class="type">Middleware</span> <span class="variable">head</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">for</span> (Middleware nextInChain : chain) &#123;</span><br><span class="line">            head.next = nextInChain;</span><br><span class="line">            head = nextInChain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类将通过具体检查来实现此方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String email, String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行检查链中的下一个对象或结束遍历，如果我们在</span></span><br><span class="line"><span class="comment">     * 链中的最后一个对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">checkNext</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next.check(email, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="middleware-ThrottlingMiddleware-java-检查请求数量限制"><a href="#middleware-ThrottlingMiddleware-java-检查请求数量限制" class="headerlink" title="middleware&#x2F;ThrottlingMiddleware.java: 检查请求数量限制"></a><strong>middleware&#x2F;ThrottlingMiddleware.java:</strong> 检查请求数量限制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.middleware;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查请求数量限制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/25 上午11:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrottlingMiddleware</span> <span class="keyword">extends</span> <span class="title class_">Middleware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> requestPerMinute;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> request;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> currentTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThrottlingMiddleware</span><span class="params">(<span class="type">int</span> requestPerMinute)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestPerMinute = requestPerMinute;</span><br><span class="line">        <span class="built_in">this</span>.currentTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请，不是checkNext() 调用可以在开头插入</span></span><br><span class="line"><span class="comment">     * 这种方法和最后。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 这比所有中间件的简单循环提供了更多的灵活性</span></span><br><span class="line"><span class="comment">     * 对象。例如，链的元素可以更改</span></span><br><span class="line"><span class="comment">     * 通过在所有其他检查之后运行其检查来进行检查。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (System.currentTimeMillis() &gt; currentTime + <span class="number">60_000</span>) &#123;</span><br><span class="line">            request = <span class="number">0</span>;</span><br><span class="line">            currentTime = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (request &gt; requestPerMinute) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Request limit exceeded!&quot;</span>);</span><br><span class="line">            Thread.currentThread().stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> checkNext(email, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="middleware-UserExistsMiddleware-java-检查用户登录信息"><a href="#middleware-UserExistsMiddleware-java-检查用户登录信息" class="headerlink" title="middleware&#x2F;UserExistsMiddleware.java: 检查用户登录信息"></a><strong>middleware&#x2F;UserExistsMiddleware.java:</strong> 检查用户登录信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.middleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.server.Server;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户登录信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/25 上午11:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExistsMiddleware</span> <span class="keyword">extends</span> <span class="title class_">Middleware</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Server server;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserExistsMiddleware</span><span class="params">(Server server)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.server = server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!server.hasEmail(email)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This email is not registered!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!server.isValidPassword(email, password)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Wrong password!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> checkNext(email, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="middleware-RoleCheckMiddleware-java-检查用户角色"><a href="#middleware-RoleCheckMiddleware-java-检查用户角色" class="headerlink" title="middleware&#x2F;RoleCheckMiddleware.java: 检查用户角色"></a><strong>middleware&#x2F;RoleCheckMiddleware.java:</strong> 检查用户角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.middleware;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户角色</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/25 上午11:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleCheckMiddleware</span> <span class="keyword">extends</span> <span class="title class_">Middleware</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (email.equals(<span class="string">&quot;admin@example.com&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, admin!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, user!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> checkNext(email, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="server"><a href="#server" class="headerlink" title="server"></a><strong>server</strong></h3><h4 id="server-Server-java-授权目标"><a href="#server-Server-java-授权目标" class="headerlink" title="server&#x2F;Server.java: 授权目标"></a><strong>server&#x2F;Server.java:</strong> 授权目标</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.middleware.Middleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权目标</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/25 上午11:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; users = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Middleware middleware;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端将对象链传递给服务器。这提高了灵活性和</span></span><br><span class="line"><span class="comment">     * 使测试服务器类更容易。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMiddleware</span><span class="params">(Middleware middleware)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.middleware = middleware;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器从客户端获取电子邮件和密码，并发送授权</span></span><br><span class="line"><span class="comment">     * 请求链。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">logIn</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (middleware.check(email, password)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Authorization have been successful!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在这里为授权用户做一些有用的事情。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        users.put(email, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> users.containsKey(email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidPassword</span><span class="params">(String email, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(email).equals(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.middleware.Middleware;</span><br><span class="line"><span class="keyword">import</span> org.example.middleware.RoleCheckMiddleware;</span><br><span class="line"><span class="keyword">import</span> org.example.middleware.ThrottlingMiddleware;</span><br><span class="line"><span class="keyword">import</span> org.example.middleware.UserExistsMiddleware;</span><br><span class="line"><span class="keyword">import</span> org.example.server.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/25 上午10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Server server;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        server = <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">        server.register(<span class="string">&quot;admin@example.com&quot;</span>, <span class="string">&quot;admin_pass&quot;</span>);</span><br><span class="line">        server.register(<span class="string">&quot;user@example.com&quot;</span>, <span class="string">&quot;user_pass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有检查都是链接的。客户端可以使用相同的构建各种链</span></span><br><span class="line">        <span class="comment">// 组件。</span></span><br><span class="line">        <span class="type">Middleware</span> <span class="variable">middleware</span> <span class="operator">=</span> Middleware.link(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThrottlingMiddleware</span>(<span class="number">2</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserExistsMiddleware</span>(server),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">RoleCheckMiddleware</span>()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务器从客户端代码获取一个链。</span></span><br><span class="line">        server.setMiddleware(middleware);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> success;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Enter email: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;Input password: &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            success = server.logIn(email, password);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!success);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="责任链模式适合应用场景"><a href="#责任链模式适合应用场景" class="headerlink" title="责任链模式适合应用场景"></a>责任链模式适合应用场景</h2><p><strong>当程序需要使用不同方式处理不同种类请求，而且请求类型和顺序预先未知时，可以使用责任链模式。</strong></p><p>该模式能将多个处理者连接成一条链。 接收到请求后， 它会 “询问” 每个处理者是否能够对其进行处理。 这样所有处理者都有机会来处理请求。</p><p><strong>当必须按顺序执行多个处理者时，可以使用该模式。</strong></p><p>无论你以何种顺序将处理者连接成一条链， 所有请求都会严格按照顺序通过链上的处理者。</p><p><strong>如果所需处理者及其顺序必须在运行时进行改变，可以使用责任链模式。</strong></p><p>如果在处理者类中有对引用成员变量的设定方法， 你将能动态地插入和移除处理者， 或者改变其顺序。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>声明处理者接口并描述请求处理方法的签名。</p><p>确定客户端如何将请求数据传递给方法。 最灵活的方式是将请求转换为对象， 然后将其以参数的形式传递给处理函数。</p></li><li><p>为了在具体处理者中消除重复的样本代码， 你可以根据处理者接口创建抽象处理者基类。</p><p>该类需要有一个成员变量来存储指向链上下个处理者的引用。 你可以将其设置为不可变类。 但如果你打算在运行时对链进行改变， 则需要定义一个设定方法来修改引用成员变量的值。</p><p>为了使用方便， 你还可以实现处理方法的默认行为。 如果还有剩余对象， 该方法会将请求传递给下个对象。 具体处理者还能够通过调用父对象的方法来使用这一行为。</p></li><li><p>依次创建具体处理者子类并实现其处理方法。 每个处理者在接收到请求后都必须做出两个决定：</p><ul><li>是否自行处理这个请求。</li><li>是否将该请求沿着链进行传递。</li></ul></li><li><p>客户端可以自行组装链， 或者从其他对象处获得预先组装好的链。 在后一种情况下， 你必须实现工厂类以根据配置或环境设置来创建链。</p></li><li><p>客户端可以触发链中的任意处理者， 而不仅仅是第一个。 请求将通过链进行传递， 直至某个处理者拒绝继续传递， 或者请求到达链尾。</p></li><li><p>由于链的动态性， 客户端需要准备好处理以下情况：</p><ul><li>链中可能只有单个链接。</li><li>部分请求可能无法到达链尾。</li><li>其他请求可能直到链尾都未被处理。</li></ul></li></ol><h2 id="责任链模式优缺点"><a href="#责任链模式优缺点" class="headerlink" title="责任链模式优缺点"></a>责任链模式优缺点</h2><p>优点：</p><ul><li>你可以控制请求处理的顺序。</li><li><em>单一职责原则</em>。 你可对发起操作和执行操作的类进行解耦。</li><li><em>开闭原则</em>。 你可以在不更改现有代码的情况下在程序中新增处理者。</li></ul><p>缺点：</p><ul><li>部分请求可能未被处理。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li><p>责任链模式、 命令模式、 中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：</p><ul><li><em>责任链</em>按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</li><li><em>命令</em>在发送者和请求者之间建立单向连接。</li><li><em>中介者</em>清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li><li><em>观察者</em>允许接收者动态地订阅或取消接收请求。</li></ul></li><li><p>责任链通常和组合模式结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。</p></li><li><p>责任链的管理者可使用命令模式实现。 在这种情况下， 你可以对由请求代表的同一个上下文对象执行许多不同的操作。</p><p>还有另外一种实现方式， 那就是请求自身就是一个<em>命令</em>对象。 在这种情况下， 你可以对由一系列不同上下文连接而成的链执行相同的操作。</p></li><li><p>责任链和装饰模式的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。</p><p>责任链的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 另一方面， 各种<em>装饰</em>可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;责任链模式&lt;/strong&gt;是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="https://blog.48626.xyz/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://blog.48626.xyz/222f87f41f8b.html"/>
    <id>https://blog.48626.xyz/222f87f41f8b.html</id>
    <published>2024-09-20T03:59:31.000Z</published>
    <updated>2024-09-20T03:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>代理模式</strong>是一种结构型设计模式， 让你能够提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理。</p><img src="/222f87f41f8b/image-20240920103443134.png" class="" alt="image-20240920103443134"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>为什么要控制对于某个对象的访问呢？ 举个例子： 有这样一个消耗大量系统资源的巨型对象， 你只是偶尔需要使用它， 并非总是需要。</p><img src="/222f87f41f8b/image-20240920103509731.png" class="" alt="数据库查询有可能会非常缓慢。"><p>你可以实现延迟初始化： 在实际有需要时再创建该对象。 对象的所有客户端都要执行延迟初始代码。 不幸的是， 这很可能会带来很多重复代码。</p><p>在理想情况下， 我们希望将代码直接放入对象的类中， 但这并非总是能实现： 比如类可能是第三方封闭库的一部分。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>代理模式建议新建一个与原服务对象接口相同的代理类， 然后更新应用以将代理对象传递给所有原始对象客户端。 代理类接收到客户端请求后会创建实际的服务对象， 并将所有工作委派给它。</p><img src="/222f87f41f8b/image-20240920103545391.png" class="" alt="代理将自己伪装成数据库对象， 可在客户端或实际数据库对象不知情的情况下处理延迟初始化和缓存查询结果的工作。"><p>这有什么好处呢？ 如果需要在类的主要业务逻辑前后执行一些工作， 你无需修改类就能完成这项工作。 由于代理实现的接口与原类相同， 因此你可将其传递给任何一个使用实际服务对象的客户端。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><img src="/222f87f41f8b/image-20240920103629965.png" class="" alt="信用卡和现金在支付过程中的用处相同。"><p>信用卡是银行账户的代理， 银行账户则是一大捆现金的代理。 它们都实现了同样的接口， 均可用于进行支付。 消费者会非常满意， 因为不必随身携带大量现金； 商店老板同样会十分高兴， 因为交易收入能以电子化的方式进入商店的银行账户中， 无需担心存款时出现现金丢失或被抢劫的情况。</p><h2 id="代理模式结构"><a href="#代理模式结构" class="headerlink" title="代理模式结构"></a>代理模式结构</h2><img src="/222f87f41f8b/image-20240920103707769.png" class="" alt="image-20240920103707769"><ol><li><p><strong>服务接口</strong> （Service Interface） 声明了服务接口。 代理必须遵循该接口才能伪装成服务对象。</p></li><li><p><strong>服务</strong> （Service） 类提供了一些实用的业务逻辑。</p></li><li><p><strong>代理</strong> （Proxy） 类包含一个指向服务对象的引用成员变量。 代理完成其任务 （例如延迟初始化、 记录日志、 访问控制和缓存等） 后会将请求传递给服务对象。</p><p>通常情况下， 代理会对其服务对象的整个生命周期进行管理。</p></li><li><p><strong>客户端</strong> （Client） 能通过同一接口与服务或代理进行交互， 所以你可在一切需要服务对象的代码中使用代理。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>本例演示如何使用<strong>代理</strong>模式在第三方腾讯视频 （TencentVideo， 代码示例中记为 TV） 程序库中添加延迟初始化和缓存。</p><img src="/222f87f41f8b/image-20240920110606256.png" class="" alt="使用代理缓冲服务结果。"><p>程序库提供了视频下载类。 但是该类的效率非常低。 如果客户端程序多次请求同一视频， 程序库会反复下载该视频， 而不会将首次下载的文件缓存下来复用。</p><p>代理类实现和原下载器相同的接口， 并将所有工作委派给原下载器。 不过， 代理类会保存所有的文件下载记录， 如果程序多次请求同一文件， 它会返回缓存的文件。</p><h3 id="some-cool-media-library"><a href="#some-cool-media-library" class="headerlink" title="some_cool_media_library"></a><strong>some_cool_media_library</strong></h3><p> <strong>some_cool_media_library&#x2F;ThirdPartyYouTubeLib.java:</strong> 远程服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_cool_media_library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程服务接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/20 上午11:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ThirdPartyYouTubeLib</span> &#123;</span><br><span class="line">    HashMap&lt;String, Video&gt; <span class="title function_">popularVideos</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Video <span class="title function_">getVideo</span><span class="params">(String videoId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="some-cool-media-library-ThirdPartyYouTubeClass-java-远程服务实现"><a href="#some-cool-media-library-ThirdPartyYouTubeClass-java-远程服务实现" class="headerlink" title="some_cool_media_library&#x2F;ThirdPartyYouTubeClass.java: 远程服务实现"></a><strong>some_cool_media_library&#x2F;ThirdPartyYouTubeClass.java:</strong> 远程服务实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_cool_media_library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程服务实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/20 上午11:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdPartyYouTubeClass</span> <span class="keyword">implements</span> <span class="title class_">ThirdPartyYouTubeLib</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, Video&gt; <span class="title function_">popularVideos</span><span class="params">()</span> &#123;</span><br><span class="line">        connectToServer(<span class="string">&quot;http://www.youtube.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> getRandomVideos();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Video <span class="title function_">getVideo</span><span class="params">(String videoId)</span> &#123;</span><br><span class="line">        connectToServer(<span class="string">&quot;http://www.youtube.com/&quot;</span> + videoId);</span><br><span class="line">        <span class="keyword">return</span> getSomeVideo(videoId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// Fake methods to simulate network activity. They as slow as a real life.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">random</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min + (<span class="type">int</span>) (Math.random() * ((max - min) + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">experienceNetworkLatency</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomLatency</span> <span class="operator">=</span> random(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; randomLatency; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connectToServer</span><span class="params">(String server)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Connecting to &quot;</span> + server + <span class="string">&quot;... &quot;</span>);</span><br><span class="line">        experienceNetworkLatency();</span><br><span class="line">        System.out.print(<span class="string">&quot;Connected!&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Video&gt; <span class="title function_">getRandomVideos</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Downloading populars... &quot;</span>);</span><br><span class="line"></span><br><span class="line">        experienceNetworkLatency();</span><br><span class="line">        HashMap&lt;String, Video&gt; hmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Video&gt;();</span><br><span class="line">        hmap.put(<span class="string">&quot;catzzzzzzzzz&quot;</span>, <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;sadgahasgdas&quot;</span>, <span class="string">&quot;Catzzzz.avi&quot;</span>));</span><br><span class="line">        hmap.put(<span class="string">&quot;mkafksangasj&quot;</span>, <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;mkafksangasj&quot;</span>, <span class="string">&quot;Dog play with ball.mp4&quot;</span>));</span><br><span class="line">        hmap.put(<span class="string">&quot;dancesvideoo&quot;</span>, <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;asdfas3ffasd&quot;</span>, <span class="string">&quot;Dancing video.mpq&quot;</span>));</span><br><span class="line">        hmap.put(<span class="string">&quot;dlsdk5jfslaf&quot;</span>, <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;dlsdk5jfslaf&quot;</span>, <span class="string">&quot;Barcelona vs RealM.mov&quot;</span>));</span><br><span class="line">        hmap.put(<span class="string">&quot;3sdfgsd1j333&quot;</span>, <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;3sdfgsd1j333&quot;</span>, <span class="string">&quot;Programing lesson#1.avi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;Done!&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Video <span class="title function_">getSomeVideo</span><span class="params">(String videoId)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Downloading video... &quot;</span>);</span><br><span class="line"></span><br><span class="line">        experienceNetworkLatency();</span><br><span class="line">        <span class="type">Video</span> <span class="variable">video</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Video</span>(videoId, <span class="string">&quot;Some video title&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;Done!&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> video;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="some-cool-media-library-Video-java-视频文件"><a href="#some-cool-media-library-Video-java-视频文件" class="headerlink" title="some_cool_media_library&#x2F;Video.java: 视频文件"></a><strong>some_cool_media_library&#x2F;Video.java:</strong> 视频文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_cool_media_library;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 视频文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/20 上午11:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Video</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String title;</span><br><span class="line">    <span class="keyword">public</span> String data;</span><br><span class="line"></span><br><span class="line">    Video(String id, String title) &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.data = <span class="string">&quot;Random video.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a><strong>proxy</strong></h3><h4 id="proxy-YouTubeCacheProxy-java-缓存代理"><a href="#proxy-YouTubeCacheProxy-java-缓存代理" class="headerlink" title="proxy&#x2F;YouTubeCacheProxy.java: 缓存代理"></a><strong>proxy&#x2F;YouTubeCacheProxy.java:</strong> 缓存代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.some_cool_media_library.ThirdPartyYouTubeClass;</span><br><span class="line"><span class="keyword">import</span> org.example.some_cool_media_library.ThirdPartyYouTubeLib;</span><br><span class="line"><span class="keyword">import</span> org.example.some_cool_media_library.Video;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存代理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/20 上午11:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YouTubeCacheProxy</span> <span class="keyword">implements</span> <span class="title class_">ThirdPartyYouTubeLib</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ThirdPartyYouTubeLib youtubeService;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Video&gt; cachePopular = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Video&gt;();</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Video&gt; cacheAll = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Video&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">YouTubeCacheProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.youtubeService = <span class="keyword">new</span> <span class="title class_">ThirdPartyYouTubeClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;String, Video&gt; <span class="title function_">popularVideos</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cachePopular.isEmpty()) &#123;</span><br><span class="line">            cachePopular = youtubeService.popularVideos();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Retrieved list from cache.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cachePopular;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Video <span class="title function_">getVideo</span><span class="params">(String videoId)</span> &#123;</span><br><span class="line">        <span class="type">Video</span> <span class="variable">video</span> <span class="operator">=</span> cacheAll.get(videoId);</span><br><span class="line">        <span class="keyword">if</span> (video == <span class="literal">null</span>) &#123;</span><br><span class="line">            video = youtubeService.getVideo(videoId);</span><br><span class="line">            cacheAll.put(videoId, video);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Retrieved video &#x27;&quot;</span> + videoId + <span class="string">&quot;&#x27; from cache.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> video;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        cachePopular.clear();</span><br><span class="line">        cacheAll.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="downloader"><a href="#downloader" class="headerlink" title="downloader"></a><strong>downloader</strong></h3><h4 id="downloader-YouTubeDownloader-java-媒体下载应用"><a href="#downloader-YouTubeDownloader-java-媒体下载应用" class="headerlink" title="downloader&#x2F;YouTubeDownloader.java: 媒体下载应用"></a><strong>downloader&#x2F;YouTubeDownloader.java:</strong> 媒体下载应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.downloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.some_cool_media_library.ThirdPartyYouTubeLib;</span><br><span class="line"><span class="keyword">import</span> org.example.some_cool_media_library.Video;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 媒体下载应用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/20 上午11:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YouTubeDownloader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ThirdPartyYouTubeLib api;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">YouTubeDownloader</span><span class="params">(ThirdPartyYouTubeLib api)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.api = api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renderVideoPage</span><span class="params">(String videoId)</span> &#123;</span><br><span class="line">        <span class="type">Video</span> <span class="variable">video</span> <span class="operator">=</span> api.getVideo(videoId);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Video page (imagine fancy HTML)&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ID: &quot;</span> + video.id);</span><br><span class="line">        System.out.println(<span class="string">&quot;Title: &quot;</span> + video.title);</span><br><span class="line">        System.out.println(<span class="string">&quot;Video: &quot;</span> + video.data);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renderPopularVideos</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Video&gt; list = api.popularVideos();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Most popular videos on YouTube (imagine fancy HTML)&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Video video : list.values()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ID: &quot;</span> + video.id + <span class="string">&quot; / Title: &quot;</span> + video.title);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-java-初始化代码"><a href="#Main-java-初始化代码" class="headerlink" title="Main.java: 初始化代码"></a><strong>Main.java:</strong> 初始化代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.downloader.YouTubeDownloader;</span><br><span class="line"><span class="keyword">import</span> org.example.proxy.YouTubeCacheProxy;</span><br><span class="line"><span class="keyword">import</span> org.example.some_cool_media_library.ThirdPartyYouTubeClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/20 上午10:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">YouTubeDownloader</span> <span class="variable">naiveDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YouTubeDownloader</span>(<span class="keyword">new</span> <span class="title class_">ThirdPartyYouTubeClass</span>());</span><br><span class="line">        <span class="type">YouTubeDownloader</span> <span class="variable">smartDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YouTubeDownloader</span>(<span class="keyword">new</span> <span class="title class_">YouTubeCacheProxy</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">naive</span> <span class="operator">=</span> test(naiveDownloader);</span><br><span class="line">        <span class="type">long</span> <span class="variable">smart</span> <span class="operator">=</span> test(smartDownloader);</span><br><span class="line">        System.out.print(<span class="string">&quot;Time saved by caching proxy: &quot;</span> + (naive - smart) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">test</span><span class="params">(YouTubeDownloader downloader)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我们应用程序中的用户行为:</span></span><br><span class="line">        downloader.renderPopularVideos();</span><br><span class="line">        downloader.renderVideoPage(<span class="string">&quot;catzzzzzzzzz&quot;</span>);</span><br><span class="line">        downloader.renderPopularVideos();</span><br><span class="line">        downloader.renderVideoPage(<span class="string">&quot;dancesvideoo&quot;</span>);</span><br><span class="line">        <span class="comment">// 用户可能经常访问同一页面.</span></span><br><span class="line">        downloader.renderVideoPage(<span class="string">&quot;catzzzzzzzzz&quot;</span>);</span><br><span class="line">        downloader.renderVideoPage(<span class="string">&quot;someothervid&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">estimatedTime</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">        System.out.print(<span class="string">&quot;Time elapsed: &quot;</span> + estimatedTime + <span class="string">&quot;ms\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> estimatedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理模式适合应用场景"><a href="#代理模式适合应用场景" class="headerlink" title="代理模式适合应用场景"></a>代理模式适合应用场景</h2><p>使用代理模式的方式多种多样， 我们来看看最常见的几种。</p><p><strong>延迟初始化（虚拟代理）。如果你有一个偶尔使用的重量级服务对象，一直保持该对象运行会消耗系统资源时，可使用代理模式。</strong></p><p>你无需在程序启动时就创建该对象， 可将对象的初始化延迟到真正有需要的时候。</p><p><strong>访问控制（保护代理）。如果你只希望特定客户端使用服务对象，这里的对象可以是操作系统中非常重要的部分，而客户端则是各种已启动的程序（包括恶意程序），此时可使用代理模式。</strong></p><p>代理可仅在客户端凭据满足要求时将请求传递给服务对象。</p><p><strong>本地执行远程服务 （远程代理）。 适用于服务对象位于远程服务器上的情形。</strong></p><p>在这种情形中， 代理通过网络传递客户端请求， 负责处理所有与网络相关的复杂细节。</p><p><strong>记录日志请求 （日志记录代理）。 适用于当你需要保存对于服务对象的请求历史记录时。</strong></p><p>代理可以在向服务传递请求前进行记录。</p><p><strong>缓存请求结果 （缓存代理）。 适用于需要缓存客户请求结果并对缓存生命周期进行管理时， 特别是当返回结果的体积非常大时。</strong></p><p>代理可对重复请求所需的相同结果进行缓存， 还可使用请求参数作为索引缓存的键值。</p><p><strong>智能引用。 可在没有客户端使用某个重量级对象时立即销毁该对象。</strong></p><p>代理会将所有获取了指向服务对象或其结果的客户端记录在案。 代理会时不时地遍历各个客户端， 检查它们是否仍在运行。 如果相应的客户端列表为空， 代理就会销毁该服务对象， 释放底层系统资源。</p><p>代理还可以记录客户端是否修改了服务对象。 其他客户端还可以复用未修改的对象。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>如果没有现成的服务接口， 你就需要创建一个接口来实现代理和服务对象的可交换性。 从服务类中抽取接口并非总是可行的， 因为你需要对服务的所有客户端进行修改， 让它们使用接口。 备选计划是将代理作为服务类的子类， 这样代理就能继承服务的所有接口了。</li><li>创建代理类， 其中必须包含一个存储指向服务的引用的成员变量。 通常情况下， 代理负责创建服务并对其整个生命周期进行管理。 在一些特殊情况下， 客户端会通过构造函数将服务传递给代理。</li><li>根据需求实现代理方法。 在大部分情况下， 代理在完成一些任务后应将工作委派给服务对象。</li><li>可以考虑新建一个构建方法来判断客户端可获取的是代理还是实际服务。 你可以在代理类中创建一个简单的静态方法， 也可以创建一个完整的工厂方法。</li><li>可以考虑为服务对象实现延迟初始化。</li></ol><h2 id="代理模式优缺点"><a href="#代理模式优缺点" class="headerlink" title="代理模式优缺点"></a>代理模式优缺点</h2><p>优点：</p><ul><li>你可以在客户端毫无察觉的情况下控制服务对象。</li><li>如果客户端对服务对象的生命周期没有特殊要求， 你可以对生命周期进行管理。</li><li>即使服务对象还未准备好或不存在， 代理也可以正常工作。</li><li><em>开闭原则</em>。 你可以在不对服务或客户端做出修改的情况下创建新代理。</li></ul><p>缺点：</p><ul><li>代码可能会变得复杂， 因为需要新建许多类。</li><li>服务响应可能会延迟。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>适配器模式能为被封装对象提供不同的接口， 代理模式能为对象提供相同的接口， 装饰模式则能为对象提供加强的接口。</li><li>外观模式与代理的相似之处在于它们都缓存了一个复杂实体并自行对其进行初始化。 <em>代理</em>与其服务对象遵循同一接口， 使得自己和服务对象可以互换， 在这一点上它与<em>外观</em>不同。</li><li>装饰和代理有着相似的结构， 但是其意图却非常不同。 这两个模式的构建都基于组合原则， 也就是说一个对象应该将部分工作委派给另一个对象。 两者之间的不同之处在于<em>代理</em>通常自行管理其服务对象的生命周期， 而<em>装饰</em>的生成则总是由客户端进行控制。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;代理模式&lt;/strong&gt;是一种结构型设计模式， 让你能够提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="代理模式" scheme="https://blog.48626.xyz/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>享元模式</title>
    <link href="https://blog.48626.xyz/ebe318129a30.html"/>
    <id>https://blog.48626.xyz/ebe318129a30.html</id>
    <published>2024-09-19T07:33:37.000Z</published>
    <updated>2024-09-19T07:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>享元模式</strong>是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。</p><img src="/ebe318129a30/image-20240919145558650.png" class="" alt="image-20240919145558650"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你希望在长时间工作后放松一下， 所以开发了一款简单的游戏： 玩家们在地图上移动并相互射击。 你决定实现一个真实的粒子系统， 并将其作为游戏的特色。 大量的子弹、 导弹和爆炸弹片会在整个地图上穿行， 为玩家提供紧张刺激的游戏体验。</p><p>开发完成后， 你推送提交了最新版本的程序， 并在编译游戏后将其发送给了一个朋友进行测试。 尽管该游戏在你的电脑上完美运行， 但是你的朋友却无法长时间进行游戏： 游戏总是会在他的电脑上运行几分钟后崩溃。 在研究了几个小时的调试消息记录后， 你发现导致游戏崩溃的原因是内存容量不足。 朋友的设备性能远比不上你的电脑， 因此游戏运行在他的电脑上时很快就会出现问题。</p><p>真正的问题与粒子系统有关。 每个粒子 （一颗子弹、 一枚导弹或一块弹片） 都由包含完整数据的独立对象来表示。 当玩家在游戏中鏖战进入高潮后的某一时刻， 游戏将无法在剩余内存中载入新建粒子， 于是程序就崩溃了。</p><img src="/ebe318129a30/image-20240919150031919.png" class="" alt="image-20240919150031919"><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>仔细观察 <code>粒子</code>Particle类， 你可能会注意到颜色 （color） 和精灵图 （sprite）这两个成员变量所消耗的内存要比其他变量多得多。 更糟糕的是， 对于所有的粒子来说， 这两个成员变量所存储的数据几乎完全一样 （比如所有子弹的颜色和精灵图都一样）。</p><img src="/ebe318129a30/image-20240919150051622.png" class="" alt="image-20240919150051622"><p>每个粒子的另一些状态 （坐标、 移动矢量和速度） 则是不同的。 因为这些成员变量的数值会不断变化。 这些数据代表粒子在存续期间不断变化的情景， 但每个粒子的颜色和精灵图则会保持不变。</p><p>对象的常量数据通常被称为<em>内在状态</em>， 其位于对象中， 其他对象只能读取但不能修改其数值。 而对象的其他状态常常能被其他对象 “从外部” 改变， 因此被称为<em>外在状态</em>。</p><p>享元模式建议不在对象中存储外在状态， 而是将其传递给依赖于它的一个特殊方法。 程序只在对象中保存内在状态， 以方便在不同情景下重用。 这些对象的区别仅在于其内在状态 （与外在状态相比， 内在状态的变体要少很多）， 因此你所需的对象数量会大大削减。</p><img src="/ebe318129a30/image-20240919150109955.png" class="" alt="image-20240919150109955"><p>让我们回到游戏中。 假如能从粒子类中抽出外在状态， 那么我们只需三个不同的对象 （子弹、 导弹和弹片） 就能表示游戏中的所有粒子。 你现在很可能已经猜到了， 我们将这样一个仅存储内在状态的对象称为享元。</p><h3 id="外在状态存储"><a href="#外在状态存储" class="headerlink" title="外在状态存储"></a>外在状态存储</h3><p>那么外在状态会被移动到什么地方呢？ 总得有类来存储它们， 对不对？ 在大部分情况中， 它们会被移动到容器对象中， 也就是我们应用享元模式前的聚合对象中。</p><p>在我们的例子中， 容器对象就是主要的 <code>游戏</code>Game对象， 其会将所有粒子存储在名为 <code>粒子</code>particles的成员变量中。 为了能将外在状态移动到这个类中， 你需要创建多个数组成员变量来存储每个粒子的坐标、 方向矢量和速度。 除此之外， 你还需要另一个数组来存储指向代表粒子的特定享元的引用。 这些数组必须保持同步， 这样你才能够使用同一索引来获取关于某个粒子的所有数据。</p><img src="/ebe318129a30/image-20240919150138887.png" class="" alt="image-20240919150138887"><p>更优雅的解决方案是创建独立的情景类来存储外在状态和对享元对象的引用。 在该方法中， 容器类只需包含一个数组。</p><p>稍等！ 这样的话情景对象数量不是会和不采用该模式时的对象数量一样多吗？ 的确如此， 但这些对象要比之前小很多。 消耗内存最多的成员变量已经被移动到很少的几个享元对象中了。 现在， 一个享元大对象会被上千个情境小对象复用， 因此无需再重复存储数千个大对象的数据。</p><h3 id="享元与不可变性"><a href="#享元与不可变性" class="headerlink" title="享元与不可变性"></a>享元与不可变性</h3><p>由于享元对象可在不同的情景中使用， 你必须确保其状态不能被修改。 享元类的状态只能由构造函数的参数进行一次性初始化， 它不能对其他对象公开其设置器或公有成员变量。</p><h3 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h3><p>为了能更方便地访问各种享元， 你可以创建一个工厂方法来管理已有享元对象的缓存池。 工厂方法从客户端处接收目标享元对象的内在状态作为参数， 如果它能在缓存池中找到所需享元， 则将其返回给客户端； 如果没有找到， 它就会新建一个享元， 并将其添加到缓存池中。</p><p>你可以选择在程序的不同地方放入该函数。 最简单的选择就是将其放置在享元容器中。 除此之外， 你还可以新建一个工厂类， 或者创建一个静态的工厂方法并将其放入实际的享元类中。</p><h2 id="享元模式结构"><a href="#享元模式结构" class="headerlink" title="享元模式结构"></a>享元模式结构</h2><img src="/ebe318129a30/image-20240919150250673.png" class="" alt="image-20240919150250673"><ol><li>享元模式只是一种优化。 在应用该模式之前， 你要确定程序中存在与大量类似对象同时占用内存相关的内存消耗问题， 并且确保该问题无法使用其他更好的方式来解决。</li><li><strong>享元</strong> （Flyweight） 类包含原始对象中部分能在多个对象中共享的状态。 同一享元对象可在许多不同情景中使用。 享元中存储的状态被称为 “内在状态”。 传递给享元方法的状态被称为 “外在状态”。</li><li><strong>情景</strong> （Context） 类包含原始对象中各不相同的外在状态。 情景与享元对象组合在一起就能表示原始对象的全部状态。</li><li>通常情况下， 原始对象的行为会保留在享元类中。 因此调用享元方法必须提供部分外在状态作为参数。 但你也可将行为移动到情景类中， 然后将连入的享元作为单纯的数据对象。</li><li><strong>客户端</strong> （Client） 负责计算或存储享元的外在状态。 在客户端看来， 享元是一种可在运行时进行配置的模板对象， 具体的配置方式为向其方法中传入一些情景数据参数。</li><li><strong>享元工厂</strong> （Flyweight Factory） 会对已有享元的缓存池进行管理。 有了工厂后， 客户端就无需直接创建享元， 它们只需调用工厂并向其传递目标享元的一些内在状态即可。 工厂会根据参数在之前已创建的享元中进行查找， 如果找到满足条件的享元就将其返回； 如果没有找到就根据参数新建享元。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在本例中， <strong>享元</strong>模式能有效减少在画布上渲染数百万个树状对象时所需的内存。</p><img src="/ebe318129a30/image-20240919151022603.png" class="" alt="image-20240919151022603"><p>该模式从主要的 <code>树</code>Tree类中抽取内在状态， 并将其移动到享元类 <code>树种类</code>Tree­Type之中。</p><p>最初程序需要在多个对象中存储相同数据， 而现在仅需在几个享元对象中保存数据， 然后在作为情景的 <code>树</code>对象中连入享元即可。 客户端代码使用享元工厂创建树对象并封装搜索指定对象的复杂行为， 并能在需要时复用对象。</p><h3 id="trees"><a href="#trees" class="headerlink" title="trees"></a><strong>trees</strong></h3><h4 id="trees-Tree-java-包含每棵树的独特状态"><a href="#trees-Tree-java-包含每棵树的独特状态" class="headerlink" title="trees&#x2F;Tree.java: 包含每棵树的独特状态"></a><strong>trees&#x2F;Tree.java:</strong> 包含每棵树的独特状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.trees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包含每棵树的独特状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 下午3:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> TreeType type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tree</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, TreeType type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        type.draw(g, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="trees-TreeType-java-包含多棵树共享的状态"><a href="#trees-TreeType-java-包含多棵树共享的状态" class="headerlink" title="trees&#x2F;TreeType.java: 包含多棵树共享的状态"></a><strong>trees&#x2F;TreeType.java:</strong> 包含多棵树共享的状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.trees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包含多棵树共享的状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 下午3:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeType</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Color color;</span><br><span class="line">    <span class="keyword">private</span> String otherTreeData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeType</span><span class="params">(String name, Color color, String otherTreeData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.otherTreeData = otherTreeData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Graphics g, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        g.setColor(Color.BLACK);</span><br><span class="line">        g.fillRect(x - <span class="number">1</span>, y, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        g.setColor(color);</span><br><span class="line">        g.fillOval(x - <span class="number">5</span>, y - <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="trees-TreeFactory-java-封装创建享元的复杂机制"><a href="#trees-TreeFactory-java-封装创建享元的复杂机制" class="headerlink" title="trees&#x2F;TreeFactory.java: 封装创建享元的复杂机制"></a><strong>trees&#x2F;TreeFactory.java:</strong> 封装创建享元的复杂机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.trees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装创建享元的复杂机制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 下午3:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, TreeType&gt; treeTypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TreeType <span class="title function_">getTreeType</span><span class="params">(String name, Color color, String otherTreeData)</span> &#123;</span><br><span class="line">        <span class="type">TreeType</span> <span class="variable">result</span> <span class="operator">=</span> treeTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            result = <span class="keyword">new</span> <span class="title class_">TreeType</span>(name, color, otherTreeData);</span><br><span class="line">            treeTypes.put(name, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="forest"><a href="#forest" class="headerlink" title="forest"></a><strong>forest</strong></h3><h4 id="forest-Forest-java-我们绘制的森林"><a href="#forest-Forest-java-我们绘制的森林" class="headerlink" title="forest&#x2F;Forest.java: 我们绘制的森林"></a><strong>forest&#x2F;Forest.java:</strong> 我们绘制的森林</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.forest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.trees.Tree;</span><br><span class="line"><span class="keyword">import</span> org.example.trees.TreeFactory;</span><br><span class="line"><span class="keyword">import</span> org.example.trees.TreeType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们绘制的森林</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 下午3:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Forest</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Tree&gt; trees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plantTree</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String name, Color color, String otherTreeData)</span> &#123;</span><br><span class="line">        <span class="type">TreeType</span> <span class="variable">type</span> <span class="operator">=</span> TreeFactory.getTreeType(name, color, otherTreeData);</span><br><span class="line">        <span class="type">Tree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tree</span>(x, y, type);</span><br><span class="line">        trees.add(tree);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Tree tree : trees) &#123;</span><br><span class="line">            tree.draw(graphics);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.forest.Forest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 下午2:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">CANVAS_SIZE</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TREES_TO_DRAW</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TREE_TYPES</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="type">Forest</span> <span class="variable">forest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Forest</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.floor(TREES_TO_DRAW / TREE_TYPES); i++) &#123;</span><br><span class="line">            forest.plantTree(random(<span class="number">0</span>, CANVAS_SIZE), random(<span class="number">0</span>, CANVAS_SIZE),</span><br><span class="line">                    <span class="string">&quot;Summer Oak&quot;</span>, Color.GREEN, <span class="string">&quot;Oak texture stub&quot;</span>);</span><br><span class="line">            forest.plantTree(random(<span class="number">0</span>, CANVAS_SIZE), random(<span class="number">0</span>, CANVAS_SIZE),</span><br><span class="line">                    <span class="string">&quot;Autumn Oak&quot;</span>, Color.ORANGE, <span class="string">&quot;Autumn Oak texture stub&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        forest.setSize(CANVAS_SIZE, CANVAS_SIZE);</span><br><span class="line">        forest.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(TREES_TO_DRAW + <span class="string">&quot; trees drawn&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Memory usage:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Tree size (8 bytes) * &quot;</span> + TREES_TO_DRAW);</span><br><span class="line">        System.out.println(<span class="string">&quot;+ TreeTypes size (~30 bytes) * &quot;</span> + TREE_TYPES + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Total: &quot;</span> + ((TREES_TO_DRAW * <span class="number">8</span> + TREE_TYPES * <span class="number">30</span>) / <span class="number">1024</span> / <span class="number">1024</span>) +</span><br><span class="line">                <span class="string">&quot;MB (instead of &quot;</span> + ((TREES_TO_DRAW * <span class="number">38</span>) / <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">random</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min + (<span class="type">int</span>) (Math.random() * ((max - min) + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="享元模式适合应用场景"><a href="#享元模式适合应用场景" class="headerlink" title="享元模式适合应用场景"></a>享元模式适合应用场景</h2><p> <strong>仅在程序必须支持大量对象且没有足够的内存容量时使用享元模式。</strong></p><p> 应用该模式所获的收益大小取决于使用它的方式和情景。 它在下列情况中最有效：</p><ul><li>程序需要生成数量巨大的相似对象</li><li>这将耗尽目标设备的所有内存</li><li>对象中包含可抽取且能在多个对象间共享的重复状态。</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>将需要改写为享元的类成员变量拆分为两个部分：<ul><li>内在状态： 包含不变的、 可在许多对象中重复使用的数据的成员变量。</li><li>外在状态： 包含每个对象各自不同的情景数据的成员变量</li></ul></li><li>保留类中表示内在状态的成员变量， 并将其属性设置为不可修改。 这些变量仅可在构造函数中获得初始数值。</li><li>找到所有使用外在状态成员变量的方法， 为在方法中所用的每个成员变量新建一个参数， 并使用该参数代替成员变量。</li><li>你可以有选择地创建工厂类来管理享元缓存池， 它负责在新建享元时检查已有的享元。 如果选择使用工厂， 客户端就只能通过工厂来请求享元， 它们需要将享元的内在状态作为参数传递给工厂。</li><li>客户端必须存储和计算外在状态 （情景） 的数值， 因为只有这样才能调用享元对象的方法。 为了使用方便， 外在状态和引用享元的成员变量可以移动到单独的情景类中。</li></ol><h2 id="享元模式优缺点"><a href="#享元模式优缺点" class="headerlink" title="享元模式优缺点"></a>享元模式优缺点</h2><p>优点：</p><ul><li>如果程序中有很多相似对象， 那么你将可以节省大量内存。</li></ul><p>缺点：</p><ul><li>你可能需要牺牲执行速度来换取内存， 因为他人每次调用享元方法时都需要重新计算部分情景数据。</li><li>代码会变得更加复杂。 团队中的新成员总是会问：  “为什么要像这样拆分一个实体的状态？”。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>你可以使用享元模式实现组合模式树的共享叶节点以节省内存。</li><li>享元展示了如何生成大量的小型对象，外观模式则展示了如何用一个对象来代表整个子系统。</li><li>如果你能将对象的所有共享状态简化为一个享元对象，那么享元就和单例模式类似了。但这两个模式有两个根本性的不同。<ol><li>只会有一个单例实体， 但是<em>享元</em>类可以有多个实体， 各实体的内在状态也可以不同。</li><li><em>单例</em>对象可以是可变的。 享元对象是不可变的。</li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;享元模式&lt;/strong&gt;是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="享元模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="享元模式" scheme="https://blog.48626.xyz/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://blog.48626.xyz/27c62a80157e.html"/>
    <id>https://blog.48626.xyz/27c62a80157e.html</id>
    <published>2024-09-19T03:59:31.000Z</published>
    <updated>2024-09-19T03:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>外观模式</strong>是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。</p><img src="/27c62a80157e/image-20240919114501146.png" class="" alt="image-20240919114501146"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设你必须在代码中使用某个复杂的库或框架中的众多对象。 正常情况下， 你需要负责所有对象的初始化工作、 管理其依赖关系并按正确的顺序执行方法等。</p><p>最终， 程序中类的业务逻辑将与第三方类的实现细节紧密耦合， 使得理解和维护代码的工作很难进行。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>外观类为包含许多活动部件的复杂子系统提供一个简单的接口。 与直接调用子系统相比， 外观提供的功能可能比较有限， 但它却包含了客户端真正关心的功能。</p><p>如果你的程序需要与包含几十种功能的复杂库整合， 但只需使用其中非常少的功能， 那么使用外观模式会非常方便，</p><p>例如， 上传猫咪搞笑短视频到社交媒体网站的应用可能会用到专业的视频转换库， 但它只需使用一个包含 <code>encode­(filename, format)</code>方法 （以文件名与文件格式为参数进行编码的方法） 的类即可。 在创建这个类并将其连接到视频转换库后， 你就拥有了自己的第一个外观。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><img src="/27c62a80157e/image-20240919114533703.png" class="" alt="电话购物。"><p>当你通过电话给商店下达订单时， 接线员就是该商店的所有服务和部门的外观。 接线员为你提供了一个同购物系统、 支付网关和各种送货服务进行互动的简单语音接口。</p><h2 id="外观模式结构"><a href="#外观模式结构" class="headerlink" title="外观模式结构"></a>外观模式结构</h2><img src="/27c62a80157e/image-20240919114557340.png" class="" alt="image-20240919114557340"><ol><li><p><strong>外观</strong> （Facade） 提供了一种访问特定子系统功能的便捷方式， 其了解如何重定向客户端请求， 知晓如何操作一切活动部件。</p></li><li><p>创建<strong>附加外观</strong> （Additional Facade） 类可以避免多种不相关的功能污染单一外观， 使其变成又一个复杂结构。 客户端和其他外观都可使用附加外观。</p></li><li><p><strong>复杂子系统</strong> （Complex Subsystem） 由数十个不同对象构成。 如果要用这些对象完成有意义的工作， 你必须深入了解子系统的实现细节， 比如按照正确顺序初始化对象和为其提供正确格式的数据。</p><p>子系统类不会意识到外观的存在， 它们在系统内运作并且相互之间可直接进行交互。</p></li><li><p><strong>客户端</strong> （Client） 使用外观代替对子系统对象的直接调用。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在本例中， <strong>外观</strong>模式简化了客户端与复杂视频转换框架之间的交互。</p><img src="/27c62a80157e/image-20240919114642525.png" class="" alt="使用单个外观类隔离多重依赖的示例"><p>你可以创建一个封装所需功能并隐藏其他代码的外观类， 从而无需使全部代码直接与数十个框架类进行交互。 该结构还能将未来框架升级或更换所造成的影响最小化， 因为你只需修改程序中外观方法的实现即可。</p><h3 id="some-complex-media-library-复杂视频转换程序库"><a href="#some-complex-media-library-复杂视频转换程序库" class="headerlink" title="some_complex_media_library: 复杂视频转换程序库"></a><strong>some_complex_media_library:</strong> 复杂视频转换程序库</h3><h4 id="some-complex-media-library-VideoFile-java"><a href="#some-complex-media-library-VideoFile-java" class="headerlink" title="some_complex_media_library&#x2F;VideoFile.java"></a><strong>some_complex_media_library&#x2F;VideoFile.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_complex_media_library;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoFile</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String codecType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VideoFile</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.codecType = name.substring(name.indexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCodecType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> codecType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="some-complex-media-library-Codec-java"><a href="#some-complex-media-library-Codec-java" class="headerlink" title="some_complex_media_library&#x2F;Codec.java"></a><strong>some_complex_media_library&#x2F;Codec.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_complex_media_library;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="some-complex-media-library-MPEG4CompressionCodec-java"><a href="#some-complex-media-library-MPEG4CompressionCodec-java" class="headerlink" title="some_complex_media_library&#x2F;MPEG4CompressionCodec.java"></a><strong>some_complex_media_library&#x2F;MPEG4CompressionCodec.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_complex_media_library;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPEG4CompressionCodec</span> <span class="keyword">implements</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;mp4&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="some-complex-media-library-OggCompressionCodec-java"><a href="#some-complex-media-library-OggCompressionCodec-java" class="headerlink" title="some_complex_media_library&#x2F;OggCompressionCodec.java"></a><strong>some_complex_media_library&#x2F;OggCompressionCodec.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_complex_media_library;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OggCompressionCodec</span> <span class="keyword">implements</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;ogg&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="some-complex-media-library-CodecFactory-java"><a href="#some-complex-media-library-CodecFactory-java" class="headerlink" title="some_complex_media_library&#x2F;CodecFactory.java"></a><strong>some_complex_media_library&#x2F;CodecFactory.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_complex_media_library;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodecFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Codec <span class="title function_">extract</span><span class="params">(VideoFile file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> file.getCodecType();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;mp4&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;CodecFactory: 提取音频...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MPEG4CompressionCodec</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;CodecFactory: 提取ogg音频...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OggCompressionCodec</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="some-complex-media-library-BitrateReader-java"><a href="#some-complex-media-library-BitrateReader-java" class="headerlink" title="some_complex_media_library&#x2F;BitrateReader.java"></a><strong>some_complex_media_library&#x2F;BitrateReader.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_complex_media_library;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitrateReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> VideoFile <span class="title function_">read</span><span class="params">(VideoFile file, Codec codec)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BitrateReader: 读取文件...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> VideoFile <span class="title function_">convert</span><span class="params">(VideoFile buffer, Codec codec)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BitrateReader: 写入文件...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> buffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="some-complex-media-library-AudioMixer-java"><a href="#some-complex-media-library-AudioMixer-java" class="headerlink" title="some_complex_media_library&#x2F;AudioMixer.java"></a><strong>some_complex_media_library&#x2F;AudioMixer.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.some_complex_media_library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudioMixer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> File <span class="title function_">fix</span><span class="params">(VideoFile result)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AudioMixer: 修复音频...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;tmp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="facade"><a href="#facade" class="headerlink" title="facade"></a><strong>facade</strong></h3><h4 id="facade-VideoConversionFacade-java-外观提供了进行视频转换的简单接口"><a href="#facade-VideoConversionFacade-java-外观提供了进行视频转换的简单接口" class="headerlink" title="facade&#x2F;VideoConversionFacade.java: 外观提供了进行视频转换的简单接口"></a><strong>facade&#x2F;VideoConversionFacade.java:</strong> 外观提供了进行视频转换的简单接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.some_complex_media_library.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外观提供了进行视频转换的简单接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoConversionFacade</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> File <span class="title function_">convertVideo</span><span class="params">(String fileName, String format)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;VideoConversionFacade: 转换已开始。&quot;</span>);</span><br><span class="line">        <span class="type">VideoFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VideoFile</span>(fileName);</span><br><span class="line">        <span class="type">Codec</span> <span class="variable">sourceCodec</span> <span class="operator">=</span> CodecFactory.extract(file);</span><br><span class="line">        Codec destinationCodec;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;mp4&quot;</span>.equals(format)) &#123;</span><br><span class="line">            destinationCodec = <span class="keyword">new</span> <span class="title class_">MPEG4CompressionCodec</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            destinationCodec = <span class="keyword">new</span> <span class="title class_">OggCompressionCodec</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">VideoFile</span> <span class="variable">buffer</span> <span class="operator">=</span> BitrateReader.read(file, sourceCodec);</span><br><span class="line">        <span class="type">VideoFile</span> <span class="variable">intermediateResult</span> <span class="operator">=</span> BitrateReader.convert(buffer, destinationCodec);</span><br><span class="line">        <span class="type">File</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">AudioMixer</span>()).fix(intermediateResult);</span><br><span class="line">        System.out.println(<span class="string">&quot;VideoConversionFacade: 转换已完成。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.facade.VideoConversionFacade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/19 上午11:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">VideoConversionFacade</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VideoConversionFacade</span>();</span><br><span class="line">        <span class="type">File</span> <span class="variable">mp4Video</span> <span class="operator">=</span> converter.convertVideo(<span class="string">&quot;youtubevideo.ogg&quot;</span>, <span class="string">&quot;mp4&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外观模式适合应用场景"><a href="#外观模式适合应用场景" class="headerlink" title="外观模式适合应用场景"></a>外观模式适合应用场景</h2><p><strong>如果你需要一个指向复杂子系统的直接接口，且该接口的功能有限，则可以使用外观模式。</strong></p><p>子系统通常会随着时间的推进变得越来越复杂。 即便是应用了设计模式， 通常你也会创建更多的类。 尽管在多种情形中子系统可能是更灵活或易于复用的， 但其所需的配置和样板代码数量将会增长得更快。 为了解决这个问题， 外观将会提供指向子系统中最常用功能的快捷方式， 能够满足客户端的大部分需求。</p><p><strong>如果需要将子系统组织为多层结构，可以使用外观。</strong></p><p>创建外观来定义子系统中各层次的入口。 你可以要求子系统仅使用外观来进行交互， 以减少子系统之间的耦合。</p><p>让我们回到视频转换框架的例子。 该框架可以拆分为两个层次： 音频相关和视频相关。 你可以为每个层次创建一个外观， 然后要求各层的类必须通过这些外观进行交互。 这种方式看上去与中介者模式非常相似。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>考虑能否在现有子系统的基础上提供一个更简单的接口。 如果该接口能让客户端代码独立于众多子系统类， 那么你的方向就是正确的。</li><li>在一个新的外观类中声明并实现该接口。 外观应将客户端代码的调用重定向到子系统中的相应对象处。 如果客户端代码没有对子系统进行初始化， 也没有对其后续生命周期进行管理， 那么外观必须完成此类工作。</li><li>如果要充分发挥这一模式的优势， 你必须确保所有客户端代码仅通过外观来与子系统进行交互。 此后客户端代码将不会受到任何由子系统代码修改而造成的影响， 比如子系统升级后， 你只需修改外观中的代码即可。</li><li>如果外观变得过于臃肿， 你可以考虑将其部分行为抽取为一个新的专用外观类。</li></ol><h2 id="外观模式优缺点"><a href="#外观模式优缺点" class="headerlink" title="外观模式优缺点"></a>外观模式优缺点</h2><p>优点：</p><ul><li>你可以让自己的代码独立于复杂子系统。</li></ul><p>缺点：</p><ul><li>外观可能成为与程序中所有类都耦合的上帝对象。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>外观模式为现有对象定义了一个新接口， 适配器模式则会试图运用已有的接口。 <em>适配器</em>通常只封装一个对象， <em>外观</em>通常会作用于整个对象子系统上。</li><li>当只需对客户端代码隐藏子系统创建对象的方式时， 你可以使用抽象工厂模式来代替外观。</li><li>享元模式展示了如何生成大量的小型对象， 外观则展示了如何用一个对象来代表整个子系统。</li><li>外观和中介者模式的职责类似：它们都尝试在大量紧密耦合的类中组织起合作。<ul><li><em>外观</em>为子系统中的所有对象定义了一个简单接口， 但是它不提供任何新功能。 子系统本身不会意识到外观的存在。 子系统中的对象可以直接进行交流。</li><li><em>中介者</em>将系统中组件的沟通行为中心化。 各组件只知道中介者对象， 无法直接相互交流。</li></ul></li><li>外观类通常可以转换为单例模式类， 因为在大部分情况下一个外观对象就足够了。</li><li>外观与代理模式的相似之处在于它们都缓存了一个复杂实体并自行对其进行初始化。 <em>代理</em>与其服务对象遵循同一接口， 使得自己和服务对象可以互换， 在这一点上它与<em>外观</em>不同。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;外观模式&lt;/strong&gt;是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="外观模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="外观模式" scheme="https://blog.48626.xyz/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰模式</title>
    <link href="https://blog.48626.xyz/1e0942ba54aa.html"/>
    <id>https://blog.48626.xyz/1e0942ba54aa.html</id>
    <published>2024-09-19T02:50:21.000Z</published>
    <updated>2024-09-19T02:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>装饰模式</strong>是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。</p><img src="/1e0942ba54aa/image-20240918175329163.png" class="" alt="image-20240918175329163"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设你正在开发一个提供通知功能的库， 其他程序可使用它向用户发送关于重要事件的通知。</p><p>库的最初版本基于 <code>通知器</code>Notifier类， 其中只有很少的几个成员变量， 一个构造函数和一个 <code>send</code>发送方法。 该方法可以接收来自客户端的消息参数， 并将该消息发送给一系列的邮箱， 邮箱列表则是通过构造函数传递给通知器的。 作为客户端的第三方程序仅会创建和配置通知器对象一次， 然后在有重要事件发生时对其进行调用。</p><img src="/1e0942ba54aa/image-20240918175349098.png" class="" alt="程序可以使用通知器类向预定义的邮箱发送重要事件通知。"><p>此后某个时刻， 你会发现库的用户希望使用除邮件通知之外的功能。 许多用户会希望接收关于紧急事件的手机短信， 还有些用户希望在微信上接收消息， 而公司用户则希望在 QQ 上接收消息。</p><img src="/1e0942ba54aa/image-20240918175415164.png" class="" alt="每种通知类型都将作为通知器的一个子类得以实现。"><p>这有什么难的呢？ 首先扩展 <code>通知器</code>类， 然后在新的子类中加入额外的通知方法。 现在客户端要对所需通知形式的对应类进行初始化， 然后使用该类发送后续所有的通知消息。</p><p>但是很快有人会问：  “为什么不同时使用多种通知形式呢？ 如果房子着火了， 你大概会想在所有渠道中都收到相同的消息吧。”</p><p>你可以尝试创建一个特殊子类来将多种通知方法组合在一起以解决该问题。 但这种方式会使得代码量迅速膨胀， 不仅仅是程序库代码， 客户端代码也会如此。</p><img src="/1e0942ba54aa/image-20240918175436465.png" class="" alt="子类组合数量爆炸。"><p>你必须找到其他方法来规划通知类的结构， 否则它们的数量会在不经意之间打破吉尼斯纪录。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>当你需要更改一个对象的行为时， 第一个跳入脑海的想法就是扩展它所属的类。 但是， 你不能忽视继承可能引发的几个严重问题。</p><ul><li>继承是静态的。 你无法在运行时更改已有对象的行为， 只能使用由不同子类创建的对象来替代当前的整个对象。</li><li>子类只能有一个父类。 大部分编程语言不允许一个类同时继承多个类的行为。</li></ul><p>其中一种方法是用<em>聚合</em>或<em>组合</em> ， 而不是<em>继承</em>。 两者的工作方式几乎一模一样： 一个对象<em>包含</em>指向另一个对象的引用， 并将部分工作委派给引用对象； 继承中的对象则继承了父类的行为， 它们自己<em>能够</em>完成这些工作。</p><p>你可以使用这个新方法来轻松替换各种连接的 “小帮手” 对象， 从而能在运行时改变容器的行为。 一个对象可以使用多个类的行为， 包含多个指向其他对象的引用， 并将各种工作委派给引用对象。 聚合 （或组合） 组合是许多设计模式背后的关键原则 （包括装饰在内）。 记住这一点后， 让我们继续关于模式的讨论。</p><img src="/1e0942ba54aa/image-20240918175503959.png" class="" alt="继承与聚合的对比"><p><em>封装器</em>是装饰模式的别称， 这个称谓明确地表达了该模式的主要思想。  “封装器” 是一个能与其他 “目标” 对象连接的对象。 封装器包含与目标对象相同的一系列方法， 它会将所有接收到的请求委派给目标对象。 但是， 封装器可以在将请求委派给目标前后对其进行处理， 所以可能会改变最终结果。</p><p>那么什么时候一个简单的封装器可以被称为是真正的装饰呢？ 正如之前提到的， 封装器实现了与其封装对象相同的接口。 因此从客户端的角度来看， 这些对象是完全一样的。 封装器中的引用成员变量可以是遵循相同接口的任意对象。 这使得你可以将一个对象放入多个封装器中， 并在对象中添加所有这些封装器的组合行为。</p><p>比如在消息通知示例中， 我们可以将简单邮件通知行为放在基类 <code>通知器</code>中， 但将所有其他通知方法放入装饰中。</p><img src="/1e0942ba54aa/image-20240918175527116.png" class="" alt="将各种通知方法放入装饰。"><p>客户端代码必须将基础通知器放入一系列自己所需的装饰中。 因此最后的对象将形成一个栈结构。</p><img src="/1e0942ba54aa/image-20240918175614220.png" class="" alt="程序可以配置由通知装饰构成的复杂栈。"><p>实际与客户端进行交互的对象将是最后一个进入栈中的装饰对象。 由于所有的装饰都实现了与通知基类相同的接口， 客户端的其他代码并不在意自己到底是与 “纯粹” 的通知器对象， 还是与装饰后的通知器对象进行交互。</p><p>我们可以使用相同方法来完成其他行为 （例如设置消息格式或者创建接收人列表）。 只要所有装饰都遵循相同的接口， 客户端就可以使用任意自定义的装饰来装饰对象。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><img src="/1e0942ba54aa/image-20240918175652587.png" class="" alt="穿上多件衣服将获得组合性的效果。"><p>穿衣服是使用装饰的一个例子。 觉得冷时， 你可以穿一件毛衣。 如果穿毛衣还觉得冷， 你可以再套上一件夹克。 如果遇到下雨， 你还可以再穿一件雨衣。 所有这些衣物都 “扩展” 了你的基本行为， 但它们并不是你的一部分， 如果你不再需要某件衣物， 可以方便地随时脱掉。</p><h2 id="装饰模式结构"><a href="#装饰模式结构" class="headerlink" title="装饰模式结构"></a>装饰模式结构</h2><img src="/1e0942ba54aa/image-20240918175728317.png" class="" alt="image-20240918175728317"><ol><li><strong>部件</strong> （Component） 声明封装器和被封装对象的公用接口。</li><li><strong>具体部件</strong> （Concrete Component） 类是被封装对象所属的类。 它定义了基础行为， 但装饰类可以改变这些行为。</li><li><strong>基础装饰</strong> （Base Decorator） 类拥有一个指向被封装对象的引用成员变量。 该变量的类型应当被声明为通用部件接口， 这样它就可以引用具体的部件和装饰。 装饰基类会将所有操作委派给被封装的对象。</li><li><strong>具体装饰类</strong> （Concrete Decorators） 定义了可动态添加到部件的额外行为。 具体装饰类会重写装饰基类的方法， 并在调用父类方法之前或之后进行额外的行为。</li><li><strong>客户端</strong> （Client） 可以使用多层装饰来封装部件， 只要它能使用通用接口与所有对象互动即可。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在本例中， <strong>装饰</strong>模式能够对敏感数据进行压缩和加密， 从而将数据从使用数据的代码中独立出来。</p><img src="/1e0942ba54aa/image-20240918175829607.png" class="" alt="加密和压缩装饰的示例。"><p>程序使用一对装饰来封装数据源对象。 这两个封装器都改变了从磁盘读写数据的方式：</p><ul><li>当数据即将被<strong>写入磁盘</strong>前， 装饰对数据进行加密和压缩。 在原始类对改变毫无察觉的情况下， 将加密后的受保护数据写入文件。</li><li>当数据刚<strong>从磁盘读出</strong>后， 同样通过装饰对数据进行解压和解密。</li></ul><p>装饰和数据源类实现同一接口， 从而能在客户端代码中相互替换。</p><h3 id="decorators"><a href="#decorators" class="headerlink" title="decorators"></a><strong>decorators</strong></h3><h4 id="decorators-DataSource-java-定义了读取和写入操作的通用数据接口"><a href="#decorators-DataSource-java-定义了读取和写入操作的通用数据接口" class="headerlink" title="decorators&#x2F;DataSource.java: 定义了读取和写入操作的通用数据接口"></a><strong>decorators&#x2F;DataSource.java:</strong> 定义了读取和写入操作的通用数据接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.decorators;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义了读取和写入操作的通用数据接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午5:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeData</span><span class="params">(String data)</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">readData</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="decorators-FileDataSource-java-简单数据读写器"><a href="#decorators-FileDataSource-java-简单数据读写器" class="headerlink" title="decorators&#x2F;FileDataSource.java: 简单数据读写器"></a><strong>decorators&#x2F;FileDataSource.java:</strong> 简单数据读写器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.decorators;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单数据读写器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午5:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDataSource</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileDataSource</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(name);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file)) &#123;</span><br><span class="line">            fos.write(data.getBytes(), <span class="number">0</span>, data.length());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            System.out.println(ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(name);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file)) &#123;</span><br><span class="line">            buffer = <span class="keyword">new</span> <span class="title class_">char</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">            reader.read(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            System.out.println(ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="decorators-DataSourceDecorator-java-抽象基础装饰"><a href="#decorators-DataSourceDecorator-java-抽象基础装饰" class="headerlink" title="decorators&#x2F;DataSourceDecorator.java: 抽象基础装饰"></a><strong>decorators&#x2F;DataSourceDecorator.java:</strong> 抽象基础装饰</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.decorators;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象基础装饰</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午6:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DataSourceDecorator</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> DataSource wrappee;</span><br><span class="line"></span><br><span class="line">    DataSourceDecorator(DataSource source) &#123;</span><br><span class="line">        <span class="built_in">this</span>.wrappee = source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        wrappee.writeData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wrappee.readData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="decorators-EncryptionDecorator-java-加密装饰"><a href="#decorators-EncryptionDecorator-java-加密装饰" class="headerlink" title="decorators&#x2F;EncryptionDecorator.java: 加密装饰"></a><strong>decorators&#x2F;EncryptionDecorator.java:</strong> 加密装饰</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.decorators;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密装饰</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午6:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncryptionDecorator</span> <span class="keyword">extends</span> <span class="title class_">DataSourceDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EncryptionDecorator</span><span class="params">(DataSource source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.writeData(encode(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decode(<span class="built_in">super</span>.readData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">encode</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] result = data.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            result[i] += (<span class="type">byte</span>) <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">decode</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] result = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            result[i] -= (<span class="type">byte</span>) <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="decorators-CompressionDecorator-java-压缩装饰"><a href="#decorators-CompressionDecorator-java-压缩装饰" class="headerlink" title="decorators&#x2F;CompressionDecorator.java: 压缩装饰"></a><strong>decorators&#x2F;CompressionDecorator.java:</strong> 压缩装饰</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.decorators;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.Deflater;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.DeflaterOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.InflaterInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 压缩装饰</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午6:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompressionDecorator</span> <span class="keyword">extends</span> <span class="title class_">DataSourceDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">compLevel</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CompressionDecorator</span><span class="params">(DataSource source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCompressionLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompressionLevel</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        compLevel = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.writeData(compress(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decompress(<span class="built_in">super</span>.readData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">compress</span><span class="params">(String stringData)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = stringData.getBytes();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(<span class="number">512</span>);</span><br><span class="line">            <span class="type">DeflaterOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeflaterOutputStream</span>(bout, <span class="keyword">new</span> <span class="title class_">Deflater</span>(compLevel));</span><br><span class="line">            dos.write(data);</span><br><span class="line">            dos.close();</span><br><span class="line">            bout.close();</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(bout.toByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">decompress</span><span class="params">(String stringData)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = Base64.getDecoder().decode(stringData);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">            <span class="type">InflaterInputStream</span> <span class="variable">iin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InflaterInputStream</span>(in);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(<span class="number">512</span>);</span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = iin.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bout.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            iin.close();</span><br><span class="line">            bout.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bout.toByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.decorators.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午5:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">salaryRecords</span> <span class="operator">=</span> <span class="string">&quot;姓名，薪水 \n 约翰·史密斯，100000\n Steven Jobs，912000&quot;</span>;</span><br><span class="line">        <span class="type">DataSourceDecorator</span> <span class="variable">encoded</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompressionDecorator</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">EncryptionDecorator</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FileDataSource</span>(<span class="string">&quot;out/OutputDemo.txt&quot;</span>)));</span><br><span class="line">        encoded.writeData(salaryRecords);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">plain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDataSource</span>(<span class="string">&quot;out/OutputDemo.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;- Input ----------------&quot;</span>);</span><br><span class="line">        System.out.println(salaryRecords);</span><br><span class="line">        System.out.println(<span class="string">&quot;- Encoded --------------&quot;</span>);</span><br><span class="line">        System.out.println(plain.readData());</span><br><span class="line">        System.out.println(<span class="string">&quot;- Decoded --------------&quot;</span>);</span><br><span class="line">        System.out.println(encoded.readData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰模式适合应用场景"><a href="#装饰模式适合应用场景" class="headerlink" title="装饰模式适合应用场景"></a>装饰模式适合应用场景</h2><p><strong>如果你希望在无需修改代码的情况下即可使用对象，且希望在运行时为对象新增额外的行为，可以使用装饰模式。</strong></p><p> 装饰能将业务逻辑组织为层次结构， 你可为各层创建一个装饰， 在运行时将各种不同逻辑组合成对象。 由于这些对象都遵循通用接口， 客户端代码能以相同的方式使用这些对象。</p><p><strong>如果用继承来扩展对象行为的方案难以实现或者根本不可行，你可以使用该模式。</strong></p><p>许多编程语言使用 <code>final</code>最终关键字来限制对某个类的进一步扩展。 复用最终类已有行为的唯一方法是使用装饰模式： 用封装器对其进行封装。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>确保业务逻辑可用一个基本组件及多个额外可选层次表示。</li><li>找出基本组件和可选层次的通用方法。 创建一个组件接口并在其中声明这些方法。</li><li>创建一个具体组件类， 并定义其基础行为。</li><li>创建装饰基类， 使用一个成员变量存储指向被封装对象的引用。 该成员变量必须被声明为组件接口类型， 从而能在运行时连接具体组件和装饰。 装饰基类必须将所有工作委派给被封装的对象。</li><li>确保所有类实现组件接口。</li><li>将装饰基类扩展为具体装饰。 具体装饰必须在调用父类方法 （总是委派给被封装对象） 之前或之后执行自身的行为。</li><li>客户端代码负责创建装饰并将其组合成客户端所需的形式。</li></ol><h2 id="装饰模式优缺点"><a href="#装饰模式优缺点" class="headerlink" title="装饰模式优缺点"></a>装饰模式优缺点</h2><p>优点：</p><ul><li>你无需创建新子类即可扩展对象的行为。</li><li>你可以在运行时添加或删除对象的功能。</li><li>你可以用多个装饰封装对象来组合几种行为。</li><li><em>单一职责原则</em>。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类。</li></ul><p>缺点：</p><ul><li>在封装器栈中删除特定封装器比较困难。</li><li>实现行为不受装饰栈顺序影响的装饰比较困难。</li><li>各层的初始化配置代码看上去可能会很糟糕。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>适配器模式可以对已有对象的接口进行修改，装饰模式则能在不改变对象接口的前提下强化对象功能。 此外， <em>装饰</em>还支持递归组合， <em>适配器</em>则无法实现。</li><li>适配器能为被封装对象提供不同的接口， 代理模式能为对象提供相同的接口， 装饰则能为对象提供加强的接口。</li><li>责任链模式和装饰模式的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。责任链的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 另一方面， 各种<em>装饰</em>可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。</li><li>组合模式和装饰的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。 <em>装饰</em>类似于<em>组合</em>， 但其只有一个子组件。 此外还有一个明显不同： <em>装饰</em>为被封装对象添加了额外的职责， <em>组合</em>仅对其子节点的结果进行了 “求和”。 但是， 模式也可以相互合作： 你可以使用<em>装饰</em>来扩展<em>组合</em>树中特定对象的行为。</li><li>大量使用组合和装饰的设计通常可从对于原型模式的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</li><li>装饰可让你更改对象的外表， 策略模式则让你能够改变其本质。</li><li>装饰和代理有着相似的结构， 但是其意图却非常不同。 这两个模式的构建都基于组合原则， 也就是说一个对象应该将部分工作委派给另一个对象。 两者之间的不同之处在于<em>代理</em>通常自行管理其服务对象的生命周期， 而<em>装饰</em>的生成则总是由客户端进行控制。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;装饰模式&quot;&gt;&lt;a href=&quot;#装饰模式&quot; class=&quot;headerlink&quot; title=&quot;装饰模式&quot;&gt;&lt;/a&gt;装饰模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;装饰模式&lt;/strong&gt;是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="装饰模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="装饰模式" scheme="https://blog.48626.xyz/tags/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="https://blog.48626.xyz/358c4b6a30e7.html"/>
    <id>https://blog.48626.xyz/358c4b6a30e7.html</id>
    <published>2024-09-18T08:28:47.000Z</published>
    <updated>2024-09-18T08:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>组合模式</strong>是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。</p><img src="/358c4b6a30e7/image-20240918160416633.png" class="" alt="image-20240918160416633"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果应用的核心模型能用树状结构表示， 在应用中使用组合模式才有价值。</p><p>例如， 你有两类对象：  <code>产品</code>和 <code>盒子</code> 。 一个盒子中可以包含多个 <code>产品</code>或者几个较小的 <code>盒子</code> 。 这些小 <code>盒子</code>中同样可以包含一些 <code>产品</code>或更小的 <code>盒子</code> ， 以此类推。</p><p>假设你希望在这些类的基础上开发一个定购系统。 订单中可以包含无包装的简单产品， 也可以包含装满产品的盒子…… 以及其他盒子。 此时你会如何计算每张订单的总价格呢？</p><img src="/358c4b6a30e7/image-20240918160458475.png" class="" alt="订单中可能包括各种产品， 这些产品放置在盒子中， 然后又被放入一层又一层更大的盒子中。 整个结构看上去像是一棵倒过来的树。"><p>你可以尝试直接计算： 打开所有盒子， 找到每件产品， 然后计算总价。 这在真实世界中或许可行， 但在程序中， 你并不能简单地使用循环语句来完成该工作。 你必须事先知道所有 <code>产品</code>和 <code>盒子</code>的类别， 所有盒子的嵌套层数以及其他繁杂的细节信息。 因此， 直接计算极不方便， 甚至完全不可行。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>组合模式建议使用一个通用接口来与 <code>产品</code>和 <code>盒子</code>进行交互， 并且在该接口中声明一个计算总价的方法。</p><p>那么方法该如何设计呢？ 对于一个产品， 该方法直接返回其价格； 对于一个盒子， 该方法遍历盒子中的所有项目， 询问每个项目的价格， 然后返回该盒子的总价格。 如果其中某个项目是小一号的盒子， 那么当前盒子也会遍历其中的所有项目， 以此类推， 直到计算出所有内部组成部分的价格。 你甚至可以在盒子的最终价格中增加额外费用， 作为该盒子的包装费用。</p><img src="/358c4b6a30e7/image-20240918160609036.png" class="" alt="组合模式以递归方式处理对象树中的所有项目"><p>该方式的最大优点在于你无需了解构成树状结构的对象的具体类。 你也无需了解对象是简单的产品还是复杂的盒子。 你只需调用通用接口以相同的方式对其进行处理即可。 当你调用该方法后， 对象会将请求沿着树结构传递下去。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><img src="/358c4b6a30e7/image-20240918160646563.png" class="" alt="部队结构的例子。"><p>大部分国家的军队都采用层次结构管理。 每支部队包括几个师， 师由旅构成， 旅由团构成， 团可以继续划分为排。 最后， 每个排由一小队实实在在的士兵组成。 军事命令由最高层下达， 通过每个层级传递， 直到每位士兵都知道自己应该服从的命令。</p><h2 id="组合模式结构"><a href="#组合模式结构" class="headerlink" title="组合模式结构"></a>组合模式结构</h2><img src="/358c4b6a30e7/image-20240918160748851.png" class="" alt="image-20240918160748851"><ol><li><p><strong>组件</strong> （Component） 接口描述了树中简单项目和复杂项目所共有的操作。</p></li><li><p><strong>叶节点</strong> （Leaf） 是树的基本结构， 它不包含子项目。</p><p>一般情况下， 叶节点最终会完成大部分的实际工作， 因为它们无法将工作指派给其他部分。</p></li><li><p><strong>容器</strong> （Container）——又名 “组合 （Composite）”——是包含叶节点或其他容器等子项目的单位。 容器不知道其子项目所属的具体类， 它只通过通用的组件接口与其子项目交互。</p><p>容器接收到请求后会将工作分配给自己的子项目， 处理中间结果， 然后将最终结果返回给客户端。</p></li><li><p><strong>客户端</strong> （Client） 通过组件接口与所有项目交互。 因此， 客户端能以相同方式与树状结构中的简单或复杂项目交互。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在本例中， 我们将借助<strong>组合</strong>模式帮助你在图形编辑器中实现一系列的几何图形。</p><img src="/358c4b6a30e7/image-20240918160843088.png" class="" alt="几何形状编辑器示例。"><p><code>组合图形</code>Compound­Graphic是一个容器， 它可以由多个包括容器在内的子图形构成。 组合图形与简单图形拥有相同的方法。 但是， 组合图形自身并不完成具体工作， 而是将请求递归地传递给自己的子项目， 然后 “汇总” 结果。</p><p>通过所有图形类所共有的接口， 客户端代码可以与所有图形互动。 因此， 客户端不知道与其交互的是简单图形还是组合图形。 客户端可以与非常复杂的对象结构进行交互， 而无需与组成该结构的实体类紧密耦合。</p><h3 id="shapes"><a href="#shapes" class="headerlink" title="shapes"></a><strong>shapes</strong></h3><h4 id="shapes-Shape-java-通用形状接口"><a href="#shapes-Shape-java-通用形状接口" class="headerlink" title="shapes&#x2F;Shape.java: 通用形状接口"></a><strong>shapes&#x2F;Shape.java:</strong> 通用形状接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用形状接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isInsideBounds</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unSelect</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSelected</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="shapes-BaseShape-java-提供基本功能的抽象形状"><a href="#shapes-BaseShape-java-提供基本功能的抽象形状" class="headerlink" title="shapes&#x2F;BaseShape.java: 提供基本功能的抽象形状"></a><strong>shapes&#x2F;BaseShape.java:</strong> 提供基本功能的抽象形状</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供基本功能的抽象形状</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseShape</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">public</span> Color color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">selected</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    BaseShape(<span class="type">int</span> x, <span class="type">int</span> y, Color color) &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x += x;</span><br><span class="line">        <span class="built_in">this</span>.y += y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInsideBounds</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; getX() &amp;&amp; x &lt; (getX() + getWidth()) &amp;&amp;</span><br><span class="line">                y &gt; getY() &amp;&amp; y &lt; (getY() + getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        selected = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        selected = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSelected</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> selected;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">enableSelectionStyle</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        graphics.setColor(Color.LIGHT_GRAY);</span><br><span class="line"></span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2</span> <span class="operator">=</span> (Graphics2D) graphics;</span><br><span class="line">        <span class="type">float</span>[] dash1 = &#123;<span class="number">2.0f</span>&#125;;</span><br><span class="line">        g2.setStroke(<span class="keyword">new</span> <span class="title class_">BasicStroke</span>(<span class="number">1.0f</span>,</span><br><span class="line">                BasicStroke.CAP_BUTT,</span><br><span class="line">                BasicStroke.JOIN_MITER,</span><br><span class="line">                <span class="number">2.0f</span>, dash1, <span class="number">0.0f</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">disableSelectionStyle</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        graphics.setColor(color);</span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">g2</span> <span class="operator">=</span> (Graphics2D) graphics;</span><br><span class="line">        g2.setStroke(<span class="keyword">new</span> <span class="title class_">BasicStroke</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSelected()) &#123;</span><br><span class="line">            enableSelectionStyle(graphics);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            disableSelectionStyle(graphics);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="shapes-Dot-java-点"><a href="#shapes-Dot-java-点" class="headerlink" title="shapes&#x2F;Dot.java: 点"></a><strong>shapes&#x2F;Dot.java:</strong> 点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dot</span> <span class="keyword">extends</span> <span class="title class_">BaseShape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DOT_SIZE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dot</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DOT_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DOT_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(graphics);</span><br><span class="line">        graphics.fillRect(x - <span class="number">1</span>, y - <span class="number">1</span>, getWidth(), getHeight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="shapes-Circle-java-圆形"><a href="#shapes-Circle-java-圆形" class="headerlink" title="shapes&#x2F;Circle.java: 圆形"></a><strong>shapes&#x2F;Circle.java:</strong> 圆形</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 圆形</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">BaseShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius, Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y, color);</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(graphics);</span><br><span class="line">        graphics.drawOval(x, y, getWidth() - <span class="number">1</span>, getHeight() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="shapes-Rectangle-java-三角形"><a href="#shapes-Rectangle-java-三角形" class="headerlink" title="shapes&#x2F;Rectangle.java: 三角形"></a><strong>shapes&#x2F;Rectangle.java:</strong> 三角形</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三角形</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">BaseShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y, color);</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(graphics);</span><br><span class="line">        graphics.drawRect(x, y, getWidth() - <span class="number">1</span>, getHeight() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="shapes-CompoundShape-java-由其他形状对象组成的复合形状"><a href="#shapes-CompoundShape-java-由其他形状对象组成的复合形状" class="headerlink" title="shapes&#x2F;CompoundShape.java: 由其他形状对象组成的复合形状"></a><strong>shapes&#x2F;CompoundShape.java:</strong> 由其他形状对象组成的复合形状</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由其他形状对象组成的复合形状</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompoundShape</span> <span class="keyword">extends</span> <span class="title class_">BaseShape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Shape&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CompoundShape</span><span class="params">(Shape... components)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">0</span>, <span class="number">0</span>, Color.BLACK);</span><br><span class="line">        add(components);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Shape component)</span> &#123;</span><br><span class="line">        children.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Shape... components)</span> &#123;</span><br><span class="line">        children.addAll(Arrays.asList(components));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Shape child)</span> &#123;</span><br><span class="line">        children.remove(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Shape... components)</span> &#123;</span><br><span class="line">        children.removeAll(Arrays.asList(components));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        children.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (children.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> children.get(<span class="number">0</span>).getX();</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.getX() &lt; x) &#123;</span><br><span class="line">                x = child.getX();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (children.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> children.get(<span class="number">0</span>).getY();</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.getY() &lt; y) &#123;</span><br><span class="line">                y = child.getY();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxWidth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> getX();</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">childsRelativeX</span> <span class="operator">=</span> child.getX() - x;</span><br><span class="line">            <span class="type">int</span> <span class="variable">childWidth</span> <span class="operator">=</span> childsRelativeX + child.getWidth();</span><br><span class="line">            <span class="keyword">if</span> (childWidth &gt; maxWidth) &#123;</span><br><span class="line">                maxWidth = childWidth;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxHeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> getY();</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">childsRelativeY</span> <span class="operator">=</span> child.getY() - y;</span><br><span class="line">            <span class="type">int</span> <span class="variable">childHeight</span> <span class="operator">=</span> childsRelativeY + child.getHeight();</span><br><span class="line">            <span class="keyword">if</span> (childHeight &gt; maxHeight) &#123;</span><br><span class="line">                maxHeight = childHeight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            child.move(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInsideBounds</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.isInsideBounds(x, y)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.unSelect();</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            child.unSelect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">selectChildAt</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.isInsideBounds(x, y)) &#123;</span><br><span class="line">                child.select();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isSelected()) &#123;</span><br><span class="line">            enableSelectionStyle(graphics);</span><br><span class="line">            graphics.drawRect(getX() - <span class="number">1</span>, getY() - <span class="number">1</span>, getWidth() + <span class="number">1</span>, getHeight() + <span class="number">1</span>);</span><br><span class="line">            disableSelectionStyle(graphics);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Shape child : children) &#123;</span><br><span class="line">            child.paint(graphics);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="editor"><a href="#editor" class="headerlink" title="editor"></a><strong>editor</strong></h3><h4 id="editor-ImageEditor-java-形状编辑器"><a href="#editor-ImageEditor-java-形状编辑器" class="headerlink" title="editor&#x2F;ImageEditor.java: 形状编辑器"></a><strong>editor&#x2F;ImageEditor.java:</strong> 形状编辑器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.editor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.shapes.CompoundShape;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Shape;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.Border;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 形状编辑器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageEditor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> EditorCanvas canvas;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CompoundShape</span> <span class="variable">allShapes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompoundShape</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageEditor</span><span class="params">()</span> &#123;</span><br><span class="line">        canvas = <span class="keyword">new</span> <span class="title class_">EditorCanvas</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadShapes</span><span class="params">(Shape... shapes)</span> &#123;</span><br><span class="line">        allShapes.clear();</span><br><span class="line">        allShapes.add(shapes);</span><br><span class="line">        canvas.refresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">EditorCanvas</span> <span class="keyword">extends</span> <span class="title class_">Canvas</span> &#123;</span><br><span class="line">        JFrame frame;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PADDING</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        EditorCanvas() &#123;</span><br><span class="line">            createFrame();</span><br><span class="line">            refresh();</span><br><span class="line">            addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">                    allShapes.unSelect();</span><br><span class="line">                    allShapes.selectChildAt(e.getX(), e.getY());</span><br><span class="line">                    e.getComponent().repaint();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">createFrame</span><span class="params">()</span> &#123;</span><br><span class="line">            frame = <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">            frame.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">JPanel</span> <span class="variable">contentPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">            <span class="type">Border</span> <span class="variable">padding</span> <span class="operator">=</span> BorderFactory.createEmptyBorder(PADDING, PADDING, PADDING, PADDING);</span><br><span class="line">            contentPanel.setBorder(padding);</span><br><span class="line">            frame.setContentPane(contentPanel);</span><br><span class="line"></span><br><span class="line">            frame.add(<span class="built_in">this</span>);</span><br><span class="line">            frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">            frame.getContentPane().setBackground(Color.LIGHT_GRAY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> allShapes.getX() + allShapes.getWidth() + PADDING;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> allShapes.getY() + allShapes.getHeight() + PADDING;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setSize(getWidth(), getHeight());</span><br><span class="line">            frame.pack();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics graphics)</span> &#123;</span><br><span class="line">            allShapes.paint(graphics);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.editor.ImageEditor;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Circle;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.CompoundShape;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Dot;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Rectangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午4:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="type">ImageEditor</span> <span class="variable">editor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageEditor</span>();</span><br><span class="line"></span><br><span class="line">        editor.loadShapes(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, Color.BLUE),</span><br><span class="line"></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CompoundShape</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">110</span>, <span class="number">110</span>, <span class="number">50</span>, Color.RED),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Dot</span>(<span class="number">160</span>, <span class="number">160</span>, Color.RED)</span><br><span class="line">                ),</span><br><span class="line"></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CompoundShape</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">250</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">100</span>, Color.GREEN),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Dot</span>(<span class="number">240</span>, <span class="number">240</span>, Color.GREEN),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Dot</span>(<span class="number">240</span>, <span class="number">360</span>, Color.GREEN),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Dot</span>(<span class="number">360</span>, <span class="number">360</span>, Color.GREEN),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Dot</span>(<span class="number">360</span>, <span class="number">240</span>, Color.GREEN)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合模式适合应用场景"><a href="#组合模式适合应用场景" class="headerlink" title="组合模式适合应用场景"></a>组合模式适合应用场景</h2><p><strong>如果你需要实现树状对象结构，可以使用组合模式。</strong></p><p>组合模式为你提供了两种共享公共接口的基本元素类型： 简单叶节点和复杂容器。 容器中可以包含叶节点和其他容器。 这使得你可以构建树状嵌套递归对象结构。</p><p><strong>如果你希望客户端代码以相同方式处理简单和复杂元素，可以使用该模式。</strong></p><p>组合模式中定义的所有元素共用同一个接口。 在这一接口的帮助下， 客户端不必在意其所使用的对象的具体类。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>确保应用的核心模型能够以树状结构表示。 尝试将其分解为简单元素和容器。 记住， 容器必须能够同时包含简单元素和其他容器。</li><li>声明组件接口及其一系列方法， 这些方法对简单和复杂元素都有意义。</li><li>创建一个叶节点类表示简单元素。 程序中可以有多个不同的叶节点类。</li><li>创建一个容器类表示复杂元素。 在该类中， 创建一个数组成员变量来存储对于其子元素的引用。 该数组必须能够同时保存叶节点和容器， 因此请确保将其声明为组合接口类型。 实现组件接口方法时， 记住容器应该将大部分工作交给其子元素来完成。</li><li>最后， 在容器中定义添加和删除子元素的方法。 记住， 这些操作可在组件接口中声明。 这将会违反<em>接口隔离原则</em>， 因为叶节点类中的这些方法为空。 但是， 这可以让客户端无差别地访问所有元素， 即使是组成树状结构的元素。</li></ol><h2 id="组合模式优缺点"><a href="#组合模式优缺点" class="headerlink" title="组合模式优缺点"></a>组合模式优缺点</h2><p>优点：</p><ul><li>你可以利用多态和递归机制更方便地使用复杂树结构。</li><li><em>开闭原则</em>。 无需更改现有代码， 你就可以在应用中添加新元素， 使其成为对象树的一部分。</li></ul><p>缺点：</p><ul><li>对于功能差异较大的类， 提供公共接口或许会有困难。 在特定情况下， 你需要过度一般化组件接口， 使其变得令人难以理解。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>桥接模式、 状态模式和策略模式（在某种程度上包括适配器模式） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li>你可以在创建复杂组合树时使用生成器模式， 因为这可使其构造步骤以递归的方式运行。</li><li>责任链模式通常和组合模式结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。</li><li>你可以使用迭代器模式来遍历组合树。</li><li>你可以使用访问者模式对整个组合树执行操作。</li><li>你可以使用享元模式实现组合树的共享叶节点以节省内存。</li><li>组合和装饰模式的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。 <em>装饰</em>类似于<em>组合</em>， 但其只有一个子组件。 此外还有一个明显不同： <em>装饰</em>为被封装对象添加了额外的职责， <em>组合</em>仅对其子节点的结果进行了 “求和”。 但是， 模式也可以相互合作： 你可以使用<em>装饰</em>来扩展<em>组合</em>树中特定对象的行为。</li><li>大量使用组合和装饰的设计通常可从对于原型模式的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;组合模式&lt;/strong&gt;是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="组合模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="组合模式" scheme="https://blog.48626.xyz/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="https://blog.48626.xyz/ba99b349c7e0.html"/>
    <id>https://blog.48626.xyz/ba99b349c7e0.html</id>
    <published>2024-09-18T07:00:16.000Z</published>
    <updated>2024-09-18T07:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>桥接模式</strong>是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。</p><img src="/ba99b349c7e0/image-20240918143142377.png" class="" alt="image-20240918143142377"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><em>抽象？ 实现？</em> 听上去挺吓人？ 让我们慢慢来， 先考虑一个简单的例子。</p><p>假如你有一个几何 <code>形状</code>Shape类， 从它能扩展出两个子类：  <code>圆形</code>Circle和 <code>方形</code>Square 。 你希望对这样的类层次结构进行扩展以使其包含颜色， 所以你打算创建名为 <code>红色</code>Red和 <code>蓝色</code>Blue的形状子类。 但是， 由于你已有两个子类， 所以总共需要创建四个类才能覆盖所有组合， 例如 <code>蓝色圆形</code>Blue­Circle和 <code>红色方形</code>Red­Square 。</p><img src="/ba99b349c7e0/image-20240918143207581.png" class="" alt="所有组合类的数量将以几何级数增长。"><p>在层次结构中新增形状和颜色将导致代码复杂程度指数增长。 例如添加三角形状， 你需要新增两个子类， 也就是每种颜色一个； 此后新增一种新颜色需要新增三个子类， 即每种形状一个。 如此以往， 情况会越来越糟糕。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>问题的根本原因是我们试图在两个独立的维度——形状与颜色——上扩展形状类。 这在处理类继承时是很常见的问题。</p><p>桥接模式通过将继承改为组合的方式来解决这个问题。 具体来说， 就是抽取其中一个维度并使之成为独立的类层次， 这样就可以在初始类中引用这个新层次的对象， 从而使得一个类不必拥有所有的状态和行为。</p><img src="/ba99b349c7e0/image-20240918143254734.png" class="" alt="将一个类层次转化为多个相关的类层次， 避免单个类层次的失控。"><p>根据该方法， 我们可以将颜色相关的代码抽取到拥有 <code>红色</code>和 <code>蓝色</code>两个子类的颜色类中， 然后在 <code>形状</code>类中添加一个指向某一颜色对象的引用成员变量。 现在， 形状类可以将所有与颜色相关的工作委派给连入的颜色对象。 这样的引用就成为了 <code>形状</code>和 <code>颜色</code>之间的桥梁。 此后， 新增颜色将不再需要修改形状的类层次， 反之亦然。</p><h3 id="抽象部分和实现部分"><a href="#抽象部分和实现部分" class="headerlink" title="抽象部分和实现部分"></a>抽象部分和实现部分</h3><p>设计模式<em>四人组</em>的著作 在桥接定义中提出了<em>抽象部分</em>和<em>实现部分</em>两个术语。 我觉得这些术语过于学术了， 反而让模式看上去比实际情况更加复杂。 在介绍过形状和颜色的简单例子后， 我们来看看四人组著作中让人望而生畏的词语的含义。</p><p><em>抽象部分</em> （也被称为<em>接口</em>） 是一些实体的高阶控制层。 该层自身不完成任何具体的工作， 它需要将工作委派给<em>实现部分</em>层 （也被称为<em>平台</em>）。</p><p>注意， 这里提到的内容与编程语言中的<em>接口</em>或<em>抽象类</em>无关。 它们并不是一回事。</p><p>在实际的程序中， 抽象部分是图形用户界面 （GUI）， 而实现部分则是底层操作系统代码 （API）， GUI 层调用 API 层来对用户的各种操作做出响应。</p><p>一般来说， 你可以在两个独立方向上扩展这种应用：</p><ul><li>开发多个不同的 GUI （例如面向普通用户和管理员进行分别配置）</li><li>支持多个不同的 API （例如， 能够在 Windows、 Linux 和 macOS 上运行该程序）。</li></ul><p>在最糟糕的情况下， 程序可能会是一团乱麻， 其中包含数百种条件语句， 连接着代码各处不同种类的 GUI 和各种 API。</p><img src="/ba99b349c7e0/image-20240918143442453.png" class="" alt="在庞杂的代码中， 即使是很小的改动都非常难以完成， 因为你必须要在*整体上*对代码有充分的理解。 而在较小且定义明确的模块中， 进行修改则要容易得多。"><p>你可以将特定接口-平台的组合代码抽取到独立的类中， 以在混乱中建立一些秩序。 但是， 你很快会发现这种类的数量<em>很多</em>。 类层次将以指数形式增长， 因为每次添加一个新的 GUI 或支持一种新的 API 都需要创建更多的类。</p><p>让我们试着用桥接模式来解决这个问题。 该模式建议将类拆分为两个类层次结构：</p><ul><li>抽象部分： 程序的 GUI 层。</li><li>实现部分： 操作系统的 API。</li></ul><img src="/ba99b349c7e0/image-20240918143511322.png" class="" alt="创建跨平台应用程序的一种方法"><p>抽象对象控制程序的外观， 并将真实工作委派给连入的实现对象。 不同的实现只要遵循相同的接口就可以互换， 使同一 GUI 可在 Windows 和 Linux 下运行。</p><p>最后的结果是： 你无需改动与 API 相关的类就可以修改 GUI 类。 此外如果想支持一个新的操作系统， 只需在实现部分层次中创建一个子类即可。</p><h2 id="桥接模式结构"><a href="#桥接模式结构" class="headerlink" title="桥接模式结构"></a>桥接模式结构</h2><img src="/ba99b349c7e0/image-20240918143557729.png" class="" alt="image-20240918143557729"><ol><li><p><strong>抽象部分</strong> （Abstraction） 提供高层控制逻辑， 依赖于完成底层实际工作的实现对象。</p></li><li><p><strong>实现部分</strong> （Implementation） 为所有具体实现声明通用接口。 抽象部分仅能通过在这里声明的方法与实现对象交互。</p><p>抽象部分可以列出和实现部分一样的方法， 但是抽象部分通常声明一些复杂行为， 这些行为依赖于多种由实现部分声明的原语操作。</p></li><li><p><strong>具体实现</strong> （Concrete Implementations） 中包括特定于平台的代码。</p></li><li><p><strong>精确抽象</strong> （Refined Abstraction） 提供控制逻辑的变体。 与其父类一样， 它们通过通用实现接口与不同的实现进行交互。</p></li><li><p>通常情况下， <strong>客户端</strong> （Client） 仅关心如何与抽象部分合作。 但是， 客户端需要将抽象对象与一个实现对象连接起来。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>示例演示了<strong>桥接</strong>模式如何拆分程序中同时管理设备及其遥控器的庞杂代码。  <code>设备</code>Device类作为实现部分， 而 <code>遥控器</code>Remote类则作为抽象部分。</p><img src="/ba99b349c7e0/image-20240918143709620.png" class="" alt="最初类层次结构被拆分为两个部分： 设备和遥控器。"><p>遥控器基类声明了一个指向设备对象的引用成员变量。 所有遥控器通过通用设备接口与设备进行交互， 使得同一个遥控器可以支持不同类型的设备。</p><p>你可以开发独立于设备类的遥控器类， 只需新建一个遥控器子类即可。 例如， 基础遥控器可能只有两个按钮， 但你可在其基础上扩展新功能， 比如额外的一节电池或一块触摸屏。</p><p>客户端代码通过遥控器构造函数将特定种类的遥控器与设备对象连接起来。</p><h3 id="devices"><a href="#devices" class="headerlink" title="devices"></a><strong>devices</strong></h3><h4 id="devices-Device-java-所有设备的通用接口"><a href="#devices-Device-java-所有设备的通用接口" class="headerlink" title="devices&#x2F;Device.java: 所有设备的通用接口"></a><strong>devices&#x2F;Device.java:</strong> 所有设备的通用接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.devices;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有设备的通用接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午2:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">disable</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getVolume</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setVolume</span><span class="params">(<span class="type">int</span> percent)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printStatus</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="devices-Radio-java-收音机"><a href="#devices-Radio-java-收音机" class="headerlink" title="devices&#x2F;Radio.java: 收音机"></a><strong>devices&#x2F;Radio.java:</strong> 收音机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.devices;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收音机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午2:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Radio</span> <span class="keyword">implements</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">on</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">volume</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">()</span> &#123;</span><br><span class="line">        on = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disable</span><span class="params">()</span> &#123;</span><br><span class="line">        on = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVolume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVolume</span><span class="params">(<span class="type">int</span> volume)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (volume &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.volume = <span class="number">100</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (volume &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.volume = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.volume = volume;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;| I&#x27;m radio.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;| I&#x27;m &quot;</span> + (on ? <span class="string">&quot;enabled&quot;</span> : <span class="string">&quot;disabled&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;| Current volume is &quot;</span> + volume + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;| Current channel is &quot;</span> + channel);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="devices-Tv-java-电视机"><a href="#devices-Tv-java-电视机" class="headerlink" title="devices&#x2F;Tv.java: 电视机"></a><strong>devices&#x2F;Tv.java:</strong> 电视机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.devices;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电视机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午2:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tv</span> <span class="keyword">implements</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">on</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">volume</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">()</span> &#123;</span><br><span class="line">        on = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disable</span><span class="params">()</span> &#123;</span><br><span class="line">        on = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVolume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVolume</span><span class="params">(<span class="type">int</span> volume)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (volume &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.volume = <span class="number">100</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (volume &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.volume = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.volume = volume;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;| I&#x27;m TV set.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;| I&#x27;m &quot;</span> + (on ? <span class="string">&quot;enabled&quot;</span> : <span class="string">&quot;disabled&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;| Current volume is &quot;</span> + volume + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;| Current channel is &quot;</span> + channel);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="remotes"><a href="#remotes" class="headerlink" title="remotes"></a><strong>remotes</strong></h3><h4 id="remotes-Remote-java-所有远程控制器的通用接口"><a href="#remotes-Remote-java-所有远程控制器的通用接口" class="headerlink" title="remotes&#x2F;Remote.java: 所有远程控制器的通用接口"></a><strong>remotes&#x2F;Remote.java:</strong> 所有远程控制器的通用接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.remotes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有远程控制器的通用接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午2:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">power</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">volumeDown</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">volumeUp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelDown</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelUp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="remotes-BasicRemote-java-基础远程控制器"><a href="#remotes-BasicRemote-java-基础远程控制器" class="headerlink" title="remotes&#x2F;BasicRemote.java: 基础远程控制器"></a><strong>remotes&#x2F;BasicRemote.java:</strong> 基础远程控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.remotes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.devices.Device;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础远程控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午2:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicRemote</span> <span class="keyword">implements</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Device device;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BasicRemote</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BasicRemote</span><span class="params">(Device device)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.device = device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">power</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;远程: 电源切换&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (device.isEnabled()) &#123;</span><br><span class="line">            device.disable();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            device.enable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">volumeDown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;远程: 降低音量&quot;</span>);</span><br><span class="line">        device.setVolume(device.getVolume() - <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">volumeUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;远程: 音量增大&quot;</span>);</span><br><span class="line">        device.setVolume(device.getVolume() + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelDown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;远程: 通道关闭&quot;</span>);</span><br><span class="line">        device.setChannel(device.getChannel() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;远程: 通道向上&quot;</span>);</span><br><span class="line">        device.setChannel(device.getChannel() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="remotes-AdvancedRemote-java-高级远程控制器"><a href="#remotes-AdvancedRemote-java-高级远程控制器" class="headerlink" title="remotes&#x2F;AdvancedRemote.java: 高级远程控制器"></a><strong>remotes&#x2F;AdvancedRemote.java:</strong> 高级远程控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.remotes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.devices.Device;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高级远程控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 下午2:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedRemote</span> <span class="keyword">extends</span> <span class="title class_">BasicRemote</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdvancedRemote</span><span class="params">(Device device)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.device = device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;遥控: 静音&quot;</span>);</span><br><span class="line">        device.setVolume(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.devices.Device;</span><br><span class="line"><span class="keyword">import</span> org.example.devices.Radio;</span><br><span class="line"><span class="keyword">import</span> org.example.devices.Tv;</span><br><span class="line"><span class="keyword">import</span> org.example.remotes.AdvancedRemote;</span><br><span class="line"><span class="keyword">import</span> org.example.remotes.BasicRemote;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/18 上午11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testDevice(<span class="keyword">new</span> <span class="title class_">Tv</span>());</span><br><span class="line">        testDevice(<span class="keyword">new</span> <span class="title class_">Radio</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDevice</span><span class="params">(Device device)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用基本遥控器进行测试。&quot;</span>);</span><br><span class="line">        <span class="type">BasicRemote</span> <span class="variable">basicRemote</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicRemote</span>(device);</span><br><span class="line">        basicRemote.power();</span><br><span class="line">        device.printStatus();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用高级遥控器进行测试。&quot;</span>);</span><br><span class="line">        <span class="type">AdvancedRemote</span> <span class="variable">advancedRemote</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvancedRemote</span>(device);</span><br><span class="line">        advancedRemote.power();</span><br><span class="line">        advancedRemote.mute();</span><br><span class="line">        device.printStatus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥接模式适合应用场景"><a href="#桥接模式适合应用场景" class="headerlink" title="桥接模式适合应用场景"></a>桥接模式适合应用场景</h2><p><strong>如果你想要拆分或重组一个具有多重功能的庞杂类（例如能与多个数据库服务器进行交互的类），可以使用桥接模式。</strong></p><p> 类的代码行数越多， 弄清其运作方式就越困难， 对其进行修改所花费的时间就越长。 一个功能上的变化可能需要在整个类范围内进行修改， 而且常常会产生错误， 甚至还会有一些严重的副作用。</p><p>桥接模式可以将庞杂类拆分为几个类层次结构。 此后， 你可以修改任意一个类层次结构而不会影响到其他类层次结构。 这种方法可以简化代码的维护工作， 并将修改已有代码的风险降到最低。</p><p><strong>如果你希望在几个独立维度上扩展一个类，可使用该模式。</strong></p><p> 桥接建议将每个维度抽取为独立的类层次。 初始类将相关工作委派给属于对应类层次的对象， 无需自己完成所有工作。</p><p><strong>如果你需要在运行时切换不同实现方法，可使用桥接模式。</strong></p><p>当然并不是说一定要实现这一点， 桥接模式可替换抽象部分中的实现对象， 具体操作就和给成员变量赋新值一样简单。</p><p><em>顺便提一句， 最后一点是很多人混淆桥接模式和策略模式的主要原因。 记住， 设计模式并不仅是一种对类进行组织的方式， 它还能用于沟通意图和解决问题。</em></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>明确类中独立的维度。 独立的概念可能是： 抽象&#x2F;平台， 域&#x2F;基础设施， 前端&#x2F;后端或接口&#x2F;实现。</li><li>了解客户端的业务需求， 并在抽象基类中定义它们。</li><li>确定在所有平台上都可执行的业务。 并在通用实现接口中声明抽象部分所需的业务。</li><li>为你域内的所有平台创建实现类， 但需确保它们遵循实现部分的接口。</li><li>在抽象类中添加指向实现类型的引用成员变量。 抽象部分会将大部分工作委派给该成员变量所指向的实现对象。</li><li>如果你的高层逻辑有多个变体， 则可通过扩展抽象基类为每个变体创建一个精确抽象。</li><li>客户端代码必须将实现对象传递给抽象部分的构造函数才能使其能够相互关联。 此后， 客户端只需与抽象对象进行交互， 无需和实现对象打交道。</li></ol><h2 id="桥接模式优缺点"><a href="#桥接模式优缺点" class="headerlink" title="桥接模式优缺点"></a>桥接模式优缺点</h2><p>优点：</p><ul><li>你可以创建与平台无关的类和程序。</li><li>客户端代码仅与高层抽象部分进行互动， 不会接触到平台的详细信息。</li><li><em>开闭原则</em>。 你可以新增抽象部分和实现部分， 且它们之间不会相互影响。</li><li><em>单一职责原则</em>。 抽象部分专注于处理高层逻辑， 实现部分处理平台细节。</li></ul><p>缺点：</p><ul><li>对高内聚的类使用该模式可能会让代码更加复杂。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>桥接模式通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， 适配器模式通常在已有程序中使用， 让相互不兼容的类能很好地合作。</li><li>桥接、 状态模式和策略模式 （在某种程度上包括适配器） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li><li>你可以将抽象工厂模式和桥接搭配使用。 如果由<em>桥接</em>定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， <em>抽象工厂</em>可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。</li><li>你可以结合使用生成器模式和桥接模式： <em>主管</em>类负责抽象工作， 各种不同的<em>生成器</em>负责<em>实现</em>工作。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;桥接模式&lt;/strong&gt;是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="桥接模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="桥接模式" scheme="https://blog.48626.xyz/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="https://blog.48626.xyz/18238916cc52.html"/>
    <id>https://blog.48626.xyz/18238916cc52.html</id>
    <published>2024-09-14T08:33:00.000Z</published>
    <updated>2024-09-14T08:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p><img src="/18238916cc52/image-20240914151124440.png" class="" alt="image-20240914151124440"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p><p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。</p><img src="/18238916cc52/image-20240914151204997.png" class="" alt="你无法 “直接” 使用分析函数库， 因为它所需的输入数据格式与你的程序不兼容。"><p>你可以修改程序库来支持 XML。 但是， 这可能需要修改部分依赖该程序库的现有代码。 甚至还有更糟糕的情况， 你可能根本没有程序库的源代码， 从而无法对其进行修改。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>你可以创建一个<em>适配器</em>。 这是一个特殊的对象， 能够转换对象接口， 使其能与其他对象进行交互。</p><p>适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 例如， 你可以使用一个将所有数据转换为英制单位 （如英尺和英里） 的适配器封装运行于米和千米单位制中的对象。</p><p>适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：</p><ol><li>适配器实现与其中一个现有对象兼容的接口。</li><li>现有对象可以使用该接口安全地调用适配器方法。</li><li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li></ol><p>有时你甚至可以创建一个双向适配器来实现双向转换调用。</p><img src="/18238916cc52/image-20240914151301158.png" class="" alt="image-20240914151301158"><p>让我们回到股票市场程序。 为了解决数据格式不兼容的问题， 你可以为分析函数库中的每个类创建将 XML 转换为 JSON 格式的适配器， 然后让客户端仅通过这些适配器来与函数库进行交流。 当某个适配器被调用时， 它会将传入的 XML 数据转换为 JSON 结构， 并将其传递给被封装分析对象的相应方法。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><img src="/18238916cc52/image-20240914151327849.png" class="" alt="出国旅行前后的旅行箱。"><p>如果你是第一次从美国到欧洲旅行， 那么在给笔记本充电时可能会大吃一惊。 不同国家的电源插头和插座标准不同。 美国插头和德国插座不匹配。 同时提供美国标准插座和欧洲标准插头的电源适配器可以解决你的难题。</p><h2 id="适配器模式结构"><a href="#适配器模式结构" class="headerlink" title="适配器模式结构"></a>适配器模式结构</h2><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><p>实现时使用了构成原则： 适配器实现了其中一个对象的接口， 并对另一个对象进行封装。 所有流行的编程语言都可以实现适配器。</p><img src="/18238916cc52/image-20240914151413607-1726298054753-1.png" class="" alt="image-20240914151413607"><ol><li><strong>客户端</strong> （Client） 是包含当前程序业务逻辑的类。</li><li><strong>客户端接口</strong> （Client Interface） 描述了其他类与客户端代码合作时必须遵循的协议。</li><li><strong>服务</strong> （Service） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。</li><li><strong>适配器</strong> （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时封装了服务对象。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。</li><li>客户端代码只需通过接口与适配器交互即可， 无需与具体的适配器类耦合。 因此， 你可以向程序中添加新类型的适配器而无需修改已有代码。 这在服务类的接口被更改或替换时很有用： 你无需修改客户端代码就可以创建新的适配器类。</li></ol><h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><p>这一实现使用了继承机制： 适配器同时继承两个对象的接口。 请注意， 这种方式仅能在支持多重继承的编程语言中实现， 例如 C++。</p><img src="/18238916cc52/image-20240914151700578-1726298221815-3.png" class="" alt="image-20240914151700578"><ol><li><strong>类适配器</strong>不需要封装任何对象， 因为它同时继承了客户端和服务的行为。 适配功能在重写的方法中完成。 最后生成的适配器可替代已有的客户端类进行使用。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下列<strong>适配器</strong>模式演示基于经典的 “方钉和圆孔” 问题。</p><img src="/18238916cc52/image-20240914162408832.png" class="" alt="image-20240914162408832"><p>适配器假扮成一个圆钉 （Round­Peg）， 其半径等于方钉 （Square­Peg） 横截面对角线的一半 （即能够容纳方钉的最小外接圆的半径）。</p><h3 id="round"><a href="#round" class="headerlink" title="round"></a><strong>round</strong></h3><h4 id="round-RoundHole-java-圆孔"><a href="#round-RoundHole-java-圆孔" class="headerlink" title="round&#x2F;RoundHole.java: 圆孔"></a><strong>round&#x2F;RoundHole.java:</strong> 圆孔</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.round;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 圆孔</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 下午4:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundHole</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundHole</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">fits</span><span class="params">(RoundPeg peg)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> result;</span><br><span class="line">        result = (<span class="built_in">this</span>.getRadius() &gt;= peg.getRadius());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="round-RoundPeg-java-圆钉"><a href="#round-RoundPeg-java-圆钉" class="headerlink" title="round&#x2F;RoundPeg.java: 圆钉"></a><strong>round&#x2F;RoundPeg.java:</strong> 圆钉</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.round;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 圆钉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 下午4:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundPeg</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundPeg</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundPeg</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="square"><a href="#square" class="headerlink" title="square"></a><strong>square</strong></h3><h4 id="square-SquarePeg-java-方钉"><a href="#square-SquarePeg-java-方钉" class="headerlink" title="square&#x2F;SquarePeg.java: 方钉"></a><strong>square&#x2F;SquarePeg.java:</strong> 方钉</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.square;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方钉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 下午4:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SquarePeg</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SquarePeg</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSquare</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> result;</span><br><span class="line">        result = Math.pow(<span class="built_in">this</span>.width, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="adapters"><a href="#adapters" class="headerlink" title="adapters"></a><strong>adapters</strong></h3><h4 id="adapters-SquarePegAdapter-java-方钉到圆孔的适配器"><a href="#adapters-SquarePegAdapter-java-方钉到圆孔的适配器" class="headerlink" title="adapters&#x2F;SquarePegAdapter.java: 方钉到圆孔的适配器"></a><strong>adapters&#x2F;SquarePegAdapter.java:</strong> 方钉到圆孔的适配器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.adapters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.round.RoundPeg;</span><br><span class="line"><span class="keyword">import</span> org.example.square.SquarePeg;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方钉到圆孔的适配器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 下午4:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SquarePegAdapter</span> <span class="keyword">extends</span> <span class="title class_">RoundPeg</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SquarePeg peg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SquarePegAdapter</span><span class="params">(SquarePeg peg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.peg = peg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> result;</span><br><span class="line">        <span class="comment">// 计算一个最小圆半径，它可以适合这个钉子。</span></span><br><span class="line">        result = (Math.sqrt(Math.pow((peg.getWidth() / <span class="number">2</span>), <span class="number">2</span>) * <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.adapters.SquarePegAdapter;</span><br><span class="line"><span class="keyword">import</span> org.example.round.RoundHole;</span><br><span class="line"><span class="keyword">import</span> org.example.round.RoundPeg;</span><br><span class="line"><span class="keyword">import</span> org.example.square.SquarePeg;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 下午4:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="comment">// 圆形适合圆形，不足为奇。</span></span><br><span class="line">        <span class="type">RoundHole</span> <span class="variable">hole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoundHole</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">RoundPeg</span> <span class="variable">rpeg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoundPeg</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span> (hole.fits(rpeg)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Round peg r5 fits round hole r5.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">SquarePeg</span> <span class="variable">smallSqPeg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SquarePeg</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">SquarePeg</span> <span class="variable">largeSqPeg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SquarePeg</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// hole.fits(smallSqPeg); // 无法编译。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 适配器解决了这个问题。</span></span><br><span class="line">        <span class="type">SquarePegAdapter</span> <span class="variable">smallSqPegAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SquarePegAdapter</span>(smallSqPeg);</span><br><span class="line">        <span class="type">SquarePegAdapter</span> <span class="variable">largeSqPegAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SquarePegAdapter</span>(largeSqPeg);</span><br><span class="line">        <span class="keyword">if</span> (hole.fits(smallSqPegAdapter)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Square peg w2 fits round hole r5.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hole.fits(largeSqPegAdapter)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Square peg w20 does not fit into round hole r5.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="适配器模式适合应用场景"><a href="#适配器模式适合应用场景" class="headerlink" title="适配器模式适合应用场景"></a>适配器模式适合应用场景</h2><p> <strong>当你希望使用某个类，但是其接口与其他代码不兼容时，可以使用适配器类。</strong></p><p>适配器模式允许你创建一个中间层类， 其可作为代码与遗留类、 第三方类或提供怪异接口的类之间的转换器。</p><p><strong>如果您需要复用这样一些类，他们处于同一个继承体系，并且他们又有了额外的一些共同的方法，但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性。</strong></p><p>你可以扩展每个子类， 将缺少的功能添加到新的子类中。 但是， 你必须在所有新子类中重复添加这些代码， 这样会使得代码有坏味道。</p><p>将缺失功能添加到一个适配器类中是一种优雅得多的解决方案。 然后你可以将缺少功能的对象封装在适配器中， 从而动态地获取所需功能。 如要这一点正常运作， 目标类必须要有通用接口， 适配器的成员变量应当遵循该通用接口。 这种方式同装饰模式非常相似。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>确保至少有两个类的接口不兼容：<ul><li>一个无法修改 （通常是第三方、 遗留系统或者存在众多已有依赖的类） 的功能性<em>服务</em>类。</li><li>一个或多个将受益于使用服务类的<em>客户端</em>类。</li></ul></li><li>声明客户端接口， 描述客户端如何与服务交互。</li><li>创建遵循客户端接口的适配器类。 所有方法暂时都为空。</li><li>在适配器类中添加一个成员变量用于保存对于服务对象的引用。 通常情况下会通过构造函数对该成员变量进行初始化， 但有时在调用其方法时将该变量传递给适配器会更方便。</li><li>依次实现适配器类客户端接口的所有方法。 适配器会将实际工作委派给服务对象， 自身只负责接口或数据格式的转换。</li><li>客户端必须通过客户端接口使用适配器。 这样一来， 你就可以在不影响客户端代码的情况下修改或扩展适配器。</li></ol><h2 id="适配器模式优缺点"><a href="#适配器模式优缺点" class="headerlink" title="适配器模式优缺点"></a>适配器模式优缺点</h2><p>优点：</p><ul><li><em>单一职责原则</em>你可以将接口或数据转换代码从程序主要业务逻辑中分离。</li><li><em>开闭原则</em>。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</li></ul><p>缺点：</p><ul><li>代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>桥接模式通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面，适配器模式通常在已有程序中使用， 让相互不兼容的类能很好地合作。</li><li>适配器可以对已有对象的接口进行修改，装饰模式则能在不改变对象接口的前提下强化对象功能。 此外， <em>装饰</em>还支持递归组合， <em>适配器</em>则无法实现。</li><li>适配器能为被封装对象提供不同的接口， 代理模式能为对象提供相同的接口， 装饰则能为对象提供加强的接口。</li><li>外观模式为现有对象定义了一个新接口， 适配器则会试图运用已有的接口。 <em>适配器</em>通常只封装一个对象， <em>外观</em>通常会作用于整个对象子系统上。</li><li>桥接、 状态模式和策略模式 （在某种程度上包括适配器） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;适配器模式&lt;/strong&gt;是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="适配器模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="适配器模式" scheme="https://blog.48626.xyz/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://blog.48626.xyz/bde6660858d1.html"/>
    <id>https://blog.48626.xyz/bde6660858d1.html</id>
    <published>2024-09-14T03:26:02.000Z</published>
    <updated>2024-09-14T03:26:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p><img src="/bde6660858d1/image-20240914110319749.png" class="" alt="image-20240914110319749"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>单例模式同时解决了两个问题， 所以违反了<em>单一职责原则</em>：</p><ol><li><p><strong>保证一个类只有一个实例</strong>。 为什么会有人想要控制一个类所拥有的实例数量？ 最常见的原因是控制某些共享资源 （例如数据库或文件） 的访问权限。</p><p>它的运作方式是这样的： 如果你创建了一个对象， 同时过一会儿后你决定再创建一个新对象， 此时你会获得之前已创建的对象， 而不是一个新对象。</p><p>注意， 普通构造函数无法实现上述行为， 因为构造函数的设计决定了它<strong>必须</strong>总是返回一个新对象。</p></li></ol><img src="/bde6660858d1/image-20240914110355127.png" class="" alt="客户端甚至可能没有意识到它们一直都在使用同一个对象。"><ol start="2"><li><p><strong>为该实例提供一个全局访问节点</strong>。 还记得你 （好吧， 其实是我自己） 用过的那些存储重要对象的全局变量吗？ 它们在使用上十分方便， 但同时也非常不安全， 因为任何代码都有可能覆盖掉那些变量的内容， 从而引发程序崩溃。</p><p>和全局变量一样， 单例模式也允许在程序的任何地方访问特定对象。 但是它可以保护该实例不被其他代码覆盖。</p><p>还有一点： 你不会希望解决同一个问题的代码分散在程序各处的。 因此更好的方式是将其放在同一个类中， 特别是当其他代码已经依赖这个类时更应该如此。</p></li></ol><p>如今， 单例模式已经变得非常流行， 以至于人们会将只解决上文描述中任意一个问题的东西称为<em>单例</em>。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>所有单例的实现都包含以下两个相同的步骤：</p><ul><li>将默认构造函数设为私有， 防止其他对象使用单例类的 <code>new</code>运算符。</li><li>新建一个静态构建方法作为构造函数。 该函数会 “偷偷” 调用私有构造函数来创建对象， 并将其保存在一个静态成员变量中。 此后所有对于该函数的调用都将返回这一缓存对象。</li></ul><p>如果你的代码能够访问单例类， 那它就能调用单例类的静态方法。 无论何时调用该方法， 它总是会返回相同的对象。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p>政府是单例模式的一个很好的示例。 一个国家只有一个官方政府。 不管组成政府的每个人的身份是什么，  “某政府” 这一称谓总是鉴别那些掌权者的全局访问节点。</p><h2 id="单例模式结构"><a href="#单例模式结构" class="headerlink" title="单例模式结构"></a>单例模式结构</h2><img src="/bde6660858d1/image-20240914110634553.png" class="" alt="image-20240914110634553"><ol><li><p><strong>单例</strong> （Singleton） 类声明了一个名为 <code>get­Instance</code>获取实例的静态方法来返回其所属类的一个相同实例。</p><p>单例的构造函数必须对客户端 （Client） 代码隐藏。 调用 <code>获取实例</code>方法必须是获取单例对象的唯一方式。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="基础单例（单线程）"><a href="#基础单例（单线程）" class="headerlink" title="基础单例（单线程）"></a>基础单例（单线程）</h3><p>实现一个粗糙的单例非常简单。 你仅需隐藏构造函数并实现一个静态的构建方法即可。</p><h4 id="Singleton-java-单例"><a href="#Singleton-java-单例" class="headerlink" title="Singleton.java: 单例"></a><strong>Singleton.java:</strong> 单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 上午11:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">public</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">// 下面的代码模拟缓慢的初始化。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="MainSingleThread-java-客户端代码"><a href="#MainSingleThread-java-客户端代码" class="headerlink" title="MainSingleThread.java: 客户端代码"></a><strong>MainSingleThread.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 上午11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainSingleThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;If you see the same value, then singleton was reused (yay!)&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;If you see different values, then 2 singletons were created (booo!!)&quot;</span> + <span class="string">&quot;\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;RESULT:&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance(<span class="string">&quot;FOO&quot;</span>);</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">anotherSingleton</span> <span class="operator">=</span> Singleton.getInstance(<span class="string">&quot;BAR&quot;</span>);</span><br><span class="line">        System.out.println(singleton.value);</span><br><span class="line">        System.out.println(anotherSingleton.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基础单例（多线程）"><a href="#基础单例（多线程）" class="headerlink" title="基础单例（多线程）"></a>基础单例（多线程）</h3><p>相同的类在多线程环境中会出错。 多线程可能会同时调用构建方法并获取多个单例类的实例。</p><h4 id="MultiSingleton-java-单例"><a href="#MultiSingleton-java-单例" class="headerlink" title="MultiSingleton.java: 单例"></a><strong>MultiSingleton.java:</strong> 单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 上午11:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MultiSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MultiSingleton instance;</span><br><span class="line">    <span class="keyword">public</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MultiSingleton</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">// 下面的代码模拟缓慢的初始化。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MultiSingleton <span class="title function_">getInstance</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">MultiSingleton</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="MainMultiThread-java-客户端代码"><a href="#MainMultiThread-java-客户端代码" class="headerlink" title="MainMultiThread.java: 客户端代码"></a><strong>MainMultiThread.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 上午11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainMultiThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;If you see the same value, then singleton was reused (yay!)&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;If you see different values, then 2 singletons were created (booo!!)&quot;</span> + <span class="string">&quot;\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;RESULT:&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadFoo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ThreadFoo</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ThreadBar</span>());</span><br><span class="line">        threadFoo.start();</span><br><span class="line">        threadBar.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadFoo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">MultiSingleton</span> <span class="variable">singleton</span> <span class="operator">=</span> MultiSingleton.getInstance(<span class="string">&quot;FOO&quot;</span>);</span><br><span class="line">            System.out.println(singleton.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadBar</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">MultiSingleton</span> <span class="variable">singleton</span> <span class="operator">=</span> MultiSingleton.getInstance(<span class="string">&quot;BAR&quot;</span>);</span><br><span class="line">            System.out.println(singleton.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="采用延迟加载的线程安全单例"><a href="#采用延迟加载的线程安全单例" class="headerlink" title="采用延迟加载的线程安全单例"></a>采用延迟加载的线程安全单例</h2><p>为了解决这个问题， 你必须在创建首个单例对象时对线程进行同步。</p><h4 id="MultiSingleton2-java-单例"><a href="#MultiSingleton2-java-单例" class="headerlink" title="MultiSingleton2.java: 单例"></a><strong>MultiSingleton2.java:</strong> 单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 上午11:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiSingleton2</span> &#123;</span><br><span class="line">    <span class="comment">// 该字段必须声明为volatile，以便双重检查锁定可以工作</span></span><br><span class="line">    <span class="comment">// 正确。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> MultiSingleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MultiSingleton2</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MultiSingleton2 <span class="title function_">getInstance</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里采取的方法称为双重检查锁定 (DCL)。它</span></span><br><span class="line">        <span class="comment">// 存在以防止多个线程之间的争用条件</span></span><br><span class="line">        <span class="comment">// 尝试同时获取单例实例，创建单独的</span></span><br><span class="line">        <span class="comment">// 实例作为结果。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 似乎这里的 &#x27;result&#x27; 变量完全是</span></span><br><span class="line">        <span class="comment">// 毫无意义。然而，有一个非常重要的警告</span></span><br><span class="line">        <span class="comment">// 在Java中实现双重检查锁定，这由</span></span><br><span class="line">        <span class="comment">// 引入这个局部变量。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 您可以在Java中阅读更多信息DCL问题:</span></span><br><span class="line">        <span class="comment">// https://refactoring.guru/java-dcl-issue</span></span><br><span class="line">        <span class="type">MultiSingleton2</span> <span class="variable">result</span> <span class="operator">=</span> instance;</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (MultiSingleton2.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">MultiSingleton2</span>(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="MainMultiThread2-java-客户端代码"><a href="#MainMultiThread2-java-客户端代码" class="headerlink" title="MainMultiThread2.java: 客户端代码"></a><strong>MainMultiThread2.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/14 上午11:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainMultiThread2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;If you see the same value, then singleton was reused (yay!)&quot;</span> + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;If you see different values, then 2 singletons were created (booo!!)&quot;</span> + <span class="string">&quot;\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;RESULT:&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadFoo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ThreadFoo</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ThreadBar</span>());</span><br><span class="line">        threadFoo.start();</span><br><span class="line">        threadBar.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadFoo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">MultiSingleton2</span> <span class="variable">singleton</span> <span class="operator">=</span> MultiSingleton2.getInstance(<span class="string">&quot;FOO&quot;</span>);</span><br><span class="line">            System.out.println(singleton.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadBar</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">MultiSingleton2</span> <span class="variable">singleton</span> <span class="operator">=</span> MultiSingleton2.getInstance(<span class="string">&quot;BAR&quot;</span>);</span><br><span class="line">            System.out.println(singleton.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单例模式适合应用场景"><a href="#单例模式适合应用场景" class="headerlink" title="单例模式适合应用场景"></a>单例模式适合应用场景</h2><p><strong>如果程序中的某个类对于所有客户端只有一个可用的实例，可以使用单例模式。</strong></p><p>单例模式禁止通过除特殊构建方法以外的任何方式来创建自身类的对象。 该方法可以创建一个新对象， 但如果该对象已经被创建， 则返回已有的对象。</p><p><strong>如果你需要更加严格地控制全局变量，可以使用单例模式。</strong></p><p>单例模式与全局变量不同， 它保证类只存在一个实例。 除了单例类自己以外， 无法通过任何方式替换缓存的实例。</p><p>请注意， 你可以随时调整限制并设定生成单例实例的数量， 只需修改 <code>获取实例</code>方法， 即 getInstance 中的代码即可实现。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>在类中添加一个私有静态成员变量用于保存单例实例。</li><li>声明一个公有静态构建方法用于获取单例实例。</li><li>在静态方法中实现”延迟初始化”。 该方法会在首次被调用时创建一个新对象， 并将其存储在静态成员变量中。 此后该方法每次被调用时都返回该实例。</li><li>将类的构造函数设为私有。 类的静态方法仍能调用构造函数， 但是其他对象不能调用。</li><li>检查客户端代码， 将对单例的构造函数的调用替换为对其静态构建方法的调用。</li></ol><h2 id="单例模式优缺点"><a href="#单例模式优缺点" class="headerlink" title="单例模式优缺点"></a>单例模式优缺点</h2><p>优点：</p><ul><li>你可以保证一个类只有一个实例。</li><li>你获得了一个指向该实例的全局访问节点。</li><li>仅在首次请求单例对象时对其进行初始化。</li></ul><p>缺点：</p><ul><li>违反了<em>单一职责原则</em>。 该模式同时解决了两个问题。</li><li>单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。</li><li>该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。</li><li>单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>外观模式类通常可以转换为单例模式类， 因为在大部分情况下一个外观对象就足够了。</li><li>如果你能将对象的所有共享状态简化为一个享元对象， 那么享元模式就和单例类似了。 但这两个模式有两个根本性的不同。<ol><li>只会有一个单例实体， 但是<em>享元</em>类可以有多个实体， 各实体的内在状态也可以不同。</li><li><em>单例</em>对象可以是可变的。 享元对象是不可变的。</li></ol></li><li>抽象工厂模式、生成器模式和原型模式都可以用单例来实现。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;单例模式&lt;/strong&gt;是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="单例模式" scheme="https://blog.48626.xyz/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://blog.48626.xyz/0ab9b21e79c2.html"/>
    <id>https://blog.48626.xyz/0ab9b21e79c2.html</id>
    <published>2024-09-13T09:48:50.000Z</published>
    <updated>2024-09-13T09:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>原型模式</strong>是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。</p><img src="/0ab9b21e79c2/image-20240913171342153.png" class="" alt="image-20240913171342153"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果你有一个对象， 并希望生成与其完全相同的一个复制品， 你该如何实现呢？ 首先， 你必须新建一个属于相同类的对象。 然后， 你必须遍历原始对象的所有成员变量， 并将成员变量值复制到新对象中。</p><p>不错！ 但有个小问题。 并非所有对象都能通过这种方式进行复制， 因为有些对象可能拥有私有成员变量， 它们在对象本身以外是不可见的。</p><img src="/0ab9b21e79c2/image-20240913171425564.png" class="" alt="从外部” 复制对象并非总是可行。"><p>直接复制还有另外一个问题。 因为你必须知道对象所属的类才能创建复制品， 所以代码必须依赖该类。 即使你可以接受额外的依赖性， 那还有另外一个问题： 有时你只知道对象所实现的接口， 而不知道其所属的具体类， 比如可向方法的某个参数传入实现了某个接口的任何对象。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>原型模式将克隆过程委派给被克隆的实际对象。 模式为所有支持克隆的对象声明了一个通用接口， 该接口让你能够克隆对象， 同时又无需将代码和对象所属类耦合。 通常情况下， 这样的接口中仅包含一个 <code>克隆</code>方法。</p><p>所有的类对 <code>克隆</code>方法的实现都非常相似。 该方法会创建一个当前类的对象， 然后将原始对象所有的成员变量值复制到新建的类中。 你甚至可以复制私有成员变量， 因为绝大部分编程语言都允许对象访问其同类对象的私有成员变量。</p><p>支持克隆的对象即为<em>原型</em>。 当你的对象有几十个成员变量和几百种类型时， 对其进行克隆甚至可以代替子类的构造。</p><img src="/0ab9b21e79c2/image-20240913171643258.png" class="" alt="预生成原型可以代替子类的构造。"><p>其运作方式如下： 创建一系列不同类型的对象并不同的方式对其进行配置。 如果所需对象与预先配置的对象相同， 那么你只需克隆原型即可， 无需新建一个对象。</p><h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><p>现实生活中， 产品在得到大规模生产前会使用原型进行各种测试。 但在这种情况下， 原型只是一种被动的工具， 不参与任何真正的生产活动。</p><img src="/0ab9b21e79c2/image-20240913171716638.png" class="" alt="一个细胞的分裂。"><p>由于工业原型并不是真正意义上的自我复制， 因此细胞有丝分裂 （还记得生物学知识吗？） 或许是更恰当的类比。 有丝分裂会产生一对完全相同的细胞。 原始细胞就是一个原型， 它在复制体的生成过程中起到了推动作用。</p><h2 id="原型模式结构"><a href="#原型模式结构" class="headerlink" title="原型模式结构"></a>原型模式结构</h2><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><img src="/0ab9b21e79c2/image-20240913171747885.png" class="" alt="image-20240913171747885"><ol><li><strong>原型</strong> （Prototype） 接口将对克隆方法进行声明。 在绝大多数情况下， 其中只会有一个名为 <code>clone</code>克隆的方法。</li><li><strong>具体原型</strong> （Concrete Prototype） 类将实现克隆方法。 除了将原始对象的数据复制到克隆体中之外， 该方法有时还需处理克隆过程中的极端情况， 例如克隆关联对象和梳理递归依赖等等。</li><li><strong>客户端</strong> （Client） 可以复制实现了原型接口的任何对象。</li></ol><h3 id="原型注册表实现"><a href="#原型注册表实现" class="headerlink" title="原型注册表实现"></a>原型注册表实现</h3><img src="/0ab9b21e79c2/image-20240913171845103.png" class="" alt="image-20240913171845103"><ol><li><strong>原型注册表</strong> （Prototype Registry） 提供了一种访问常用原型的简单方法， 其中存储了一系列可供随时复制的预生成对象。 最简单的注册表原型是一个 <code>名称 → 原型</code>的哈希表。 但如果需要使用名称以外的条件进行搜索， 你可以创建更加完善的注册表版本。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在本例中， <strong>原型</strong>模式能让你生成完全相同的几何对象副本， 同时无需代码与对象所属类耦合。</p><img src="/0ab9b21e79c2/image-20240913173343513.png" class="" alt="克隆一系列位于同一类层次结构中的对象。"><p>所有形状类都遵循同一个提供克隆方法的接口。 在复制自身成员变量值到结果对象前， 子类可调用其父类的克隆方法。</p><h3 id="shapes-形状列表"><a href="#shapes-形状列表" class="headerlink" title="shapes: 形状列表"></a><strong>shapes:</strong> 形状列表</h3><h4 id="shapes-Shape-java-通用形状接口"><a href="#shapes-Shape-java-通用形状接口" class="headerlink" title="shapes&#x2F;Shape.java: 通用形状接口"></a><strong>shapes&#x2F;Shape.java:</strong> 通用形状接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用形状接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 下午5:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">public</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(Shape target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = target.x;</span><br><span class="line">            <span class="built_in">this</span>.y = target.y;</span><br><span class="line">            <span class="built_in">this</span>.color = target.color;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Shape <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(object2 <span class="keyword">instanceof</span> Shape)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape2</span> <span class="operator">=</span> (Shape) object2;</span><br><span class="line">        <span class="keyword">return</span> shape2.x == x &amp;&amp; shape2.y == y &amp;&amp; Objects.equals(shape2.color, color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="shapes-Circle-java-简单形状"><a href="#shapes-Circle-java-简单形状" class="headerlink" title="shapes&#x2F;Circle.java: 简单形状"></a><strong>shapes&#x2F;Circle.java:</strong> 简单形状</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单形状</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 下午5:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(Circle target)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(target);</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.radius = target.radius;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(object2 <span class="keyword">instanceof</span> Circle) || !<span class="built_in">super</span>.equals(object2)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">shape2</span> <span class="operator">=</span> (Circle) object2;</span><br><span class="line">        <span class="keyword">return</span> shape2.radius == radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="shapes-Rectangle-java-另一个形状"><a href="#shapes-Rectangle-java-另一个形状" class="headerlink" title="shapes&#x2F;Rectangle.java: 另一个形状"></a><strong>shapes&#x2F;Rectangle.java:</strong> 另一个形状</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.shapes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 另一个形状</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 下午5:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(Rectangle target)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(target);</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.width = target.width;</span><br><span class="line">            <span class="built_in">this</span>.height = target.height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(object2 <span class="keyword">instanceof</span> Rectangle) || !<span class="built_in">super</span>.equals(object2)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">shape2</span> <span class="operator">=</span> (Rectangle) object2;</span><br><span class="line">        <span class="keyword">return</span> shape2.width == width &amp;&amp; shape2.height == height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Main-java-克隆示例"><a href="#Main-java-克隆示例" class="headerlink" title="Main.java: 克隆示例"></a><strong>Main.java:</strong> 克隆示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Circle;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Rectangle;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Shape;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 克隆示例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 下午5:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        List&lt;Shape&gt; shapes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Shape&gt; shapesCopy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        circle.x = <span class="number">10</span>;</span><br><span class="line">        circle.y = <span class="number">20</span>;</span><br><span class="line">        circle.radius = <span class="number">15</span>;</span><br><span class="line">        circle.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        shapes.add(circle);</span><br><span class="line"></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">anotherCircle</span> <span class="operator">=</span> (Circle) circle.clone();</span><br><span class="line">        shapes.add(anotherCircle);</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        rectangle.width = <span class="number">10</span>;</span><br><span class="line">        rectangle.height = <span class="number">20</span>;</span><br><span class="line">        rectangle.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">        shapes.add(rectangle);</span><br><span class="line"></span><br><span class="line">        cloneAndCompare(shapes, shapesCopy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cloneAndCompare</span><span class="params">(List&lt;Shape&gt; shapes, List&lt;Shape&gt; shapesCopy)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Shape shape : shapes) &#123;</span><br><span class="line">            shapesCopy.add(shape.clone());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; shapes.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (shapes.get(i) != shapesCopy.get(i)) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">&quot;: Shapes are different objects (yay!)&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (shapes.get(i).equals(shapesCopy.get(i))) &#123;</span><br><span class="line">                    System.out.println(i + <span class="string">&quot;: And they are identical (yay!)&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(i + <span class="string">&quot;: But they are not identical (booo!)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(i + <span class="string">&quot;: Shape objects are the same (booo!)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="原型注册站"><a href="#原型注册站" class="headerlink" title="原型注册站"></a>原型注册站</h3><p>你可以实现中心化的原型注册站 （或工厂）， 其中包含一系列预定义的原型对象。 这样一来， 你就可以通过传递对象名称或其他参数的方式从工厂处获得新的对象。 工厂将搜索合适的原型， 然后对其进行克隆复制， 最后将副本返回给你。</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a><strong>cache</strong></h3><h4 id="cache-BundledShapeCache-java-原型工厂"><a href="#cache-BundledShapeCache-java-原型工厂" class="headerlink" title="cache&#x2F;BundledShapeCache.java: 原型工厂"></a><strong>cache&#x2F;BundledShapeCache.java:</strong> 原型工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Circle;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Rectangle;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Shape;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 下午5:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BundledShapeCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Shape&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BundledShapeCache</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        circle.x = <span class="number">5</span>;</span><br><span class="line">        circle.y = <span class="number">7</span>;</span><br><span class="line">        circle.radius = <span class="number">45</span>;</span><br><span class="line">        circle.color = <span class="string">&quot;Green&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        rectangle.x = <span class="number">6</span>;</span><br><span class="line">        rectangle.y = <span class="number">9</span>;</span><br><span class="line">        rectangle.width = <span class="number">8</span>;</span><br><span class="line">        rectangle.height = <span class="number">10</span>;</span><br><span class="line">        rectangle.color = <span class="string">&quot;Blue&quot;</span>;</span><br><span class="line"></span><br><span class="line">        cache.put(<span class="string">&quot;Big green circle&quot;</span>, circle);</span><br><span class="line">        cache.put(<span class="string">&quot;Medium blue rectangle&quot;</span>, rectangle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">put</span><span class="params">(String key, Shape shape)</span> &#123;</span><br><span class="line">        cache.put(key, shape);</span><br><span class="line">        <span class="keyword">return</span> shape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.get(key).clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CacheMain-java-克隆示例"><a href="#CacheMain-java-克隆示例" class="headerlink" title="CacheMain.java: 克隆示例"></a><strong>CacheMain.java:</strong> 克隆示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.cache.BundledShapeCache;</span><br><span class="line"><span class="keyword">import</span> org.example.shapes.Shape;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 克隆示例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 下午5:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BundledShapeCache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BundledShapeCache</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape1</span> <span class="operator">=</span> cache.get(<span class="string">&quot;Big green circle&quot;</span>);</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape2</span> <span class="operator">=</span> cache.get(<span class="string">&quot;Medium blue rectangle&quot;</span>);</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape3</span> <span class="operator">=</span> cache.get(<span class="string">&quot;Medium blue rectangle&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shape1 != shape2 &amp;&amp; !shape1.equals(shape2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Big green circle != Medium blue rectangle (yay!)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Big green circle == Medium blue rectangle (booo!)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shape2 != shape3) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Medium blue rectangles are two different objects (yay!)&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (shape2.equals(shape3)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;And they are identical (yay!)&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;But they are not identical (booo!)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Rectangle objects are the same (booo!)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原型模式适合应用场景"><a href="#原型模式适合应用场景" class="headerlink" title="原型模式适合应用场景"></a>原型模式适合应用场景</h2><p><strong>如果你需要复制一些对象，同时又希望代码独立于这些对象所属的具体类，可以使用原型模式。</strong></p><p>这一点考量通常出现在代码需要处理第三方代码通过接口传递过来的对象时。 即使不考虑代码耦合的情况， 你的代码也不能依赖这些对象所属的具体类， 因为你不知道它们的具体信息。</p><p>原型模式为客户端代码提供一个通用接口， 客户端代码可通过这一接口与所有实现了克隆的对象进行交互， 它也使得客户端代码与其所克隆的对象具体类独立开来。</p><p><strong>如果子类的区别仅在于其对象的初始化方式，那么你可以使用该模式来减少子类的数量。别人创建这些子类的目的可能是为了创建特定类型的对象。</strong></p><p>在原型模式中， 你可以使用一系列预生成的、 各种类型的对象作为原型。</p><p>客户端不必根据需求对子类进行实例化， 只需找到合适的原型并对其进行克隆即可。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>创建原型接口， 并在其中声明 <code>克隆</code>方法。 如果你已有类层次结构， 则只需在其所有类中添加该方法即可。</p></li><li><p>原型类必须另行定义一个以该类对象为参数的构造函数。 构造函数必须复制参数对象中的所有成员变量值到新建实体中。 如果你需要修改子类， 则必须调用父类构造函数， 让父类复制其私有成员变量值。</p><p>如果编程语言不支持方法重载， 那么你可能需要定义一个特殊方法来复制对象数据。 在构造函数中进行此类处理比较方便， 因为它在调用 <code>new</code>运算符后会马上返回结果对象。</p></li><li><p>克隆方法通常只有一行代码： 使用 <code>new</code>运算符调用原型版本的构造函数。 注意， 每个类都必须显式重写克隆方法并使用自身类名调用 <code>new</code>运算符。 否则， 克隆方法可能会生成父类的对象。</p></li><li><p>你还可以创建一个中心化原型注册表， 用于存储常用原型。</p><p>你可以新建一个工厂类来实现注册表， 或者在原型基类中添加一个获取原型的静态方法。 该方法必须能够根据客户端代码设定的条件进行搜索。 搜索条件可以是简单的字符串， 或者是一组复杂的搜索参数。 找到合适的原型后， 注册表应对原型进行克隆， 并将复制生成的对象返回给客户端。</p><p>最后还要将对子类构造函数的直接调用替换为对原型注册表工厂方法的调用。</p></li></ol><h2 id="原型模式优缺点"><a href="#原型模式优缺点" class="headerlink" title="原型模式优缺点"></a>原型模式优缺点</h2><p>优点：</p><ul><li>你可以克隆对象， 而无需与它们所属的具体类相耦合。</li><li>你可以克隆预生成原型， 避免反复运行初始化代码。</li><li>你可以更方便地生成复杂对象。</li><li>你可以用继承以外的方式来处理复杂对象的不同配置。</li></ul><p>缺点：</p><ul><li>克隆包含循环引用的复杂对象可能会非常麻烦。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>在许多设计工作的初期都会使用工厂方法模式（较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用抽象工厂模式、 原型模式或生成器模式 （更灵活但更加复杂）。</li><li>抽象工厂模式通常基于一组工厂方法， 但你也可以使用原型模式来生成这些类的方法。</li><li>原型可用于保存命令模式的历史记录。</li><li>大量使用组合模式和装饰模式的设计通常可从对于原型的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</li><li>原型并不基于继承， 因此没有继承的缺点。 另一方面， <em>原型</em>需要对被复制对象进行复杂的初始化。 工厂方法基于继承， 但是它不需要初始化步骤。</li><li>有时候原型可以作为备忘录模式的一个简化版本， 其条件是你需要在历史记录中存储的对象的状态比较简单， 不需要链接其他外部资源， 或者链接可以方便地重建。</li><li>抽象工厂、 生成器和原型都可以用单例模式来实现。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原型模式&lt;/strong&gt;是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="原型模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="原型模式" scheme="https://blog.48626.xyz/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://blog.48626.xyz/d3df33f31582.html"/>
    <id>https://blog.48626.xyz/d3df33f31582.html</id>
    <published>2024-09-13T07:30:16.000Z</published>
    <updated>2024-09-13T07:30:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p><img src="/d3df33f31582/image-20240913103719373.png" class="" alt="image-20240913103719373"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设有这样一个复杂对象， 在对其进行构造时需要对诸多成员变量和嵌套对象进行繁复的初始化工作。 这些初始化代码通常深藏于一个包含众多参数且让人基本看不懂的构造函数中； 甚至还有更糟糕的情况， 那就是这些代码散落在客户端代码的多个位置。</p><img src="/d3df33f31582/image-20240913103807523.png" class="" alt="如果为每种可能的对象都创建一个子类， 这可能会导致程序变得过于复杂。"><p>例如， 我们来思考如何创建一个 <code>房屋</code>House对象。 建造一栋简单的房屋， 首先你需要建造四面墙和地板， 安装房门和一套窗户， 然后再建造一个屋顶。 但是如果你想要一栋更宽敞更明亮的房屋， 还要有院子和其他设施 （例如暖气、 排水和供电设备）， 那又该怎么办呢？</p><p>最简单的方法是扩展 <code>房屋</code>基类， 然后创建一系列涵盖所有参数组合的子类。 但最终你将面对相当数量的子类。 任何新增的参数 （例如门廊类型） 都会让这个层次结构更加复杂。</p><p>另一种方法则无需生成子类。 你可以在 <code>房屋</code>基类中创建一个包括所有可能参数的超级构造函数， 并用它来控制房屋对象。 这种方法确实可以避免生成子类， 但它却会造成另外一个问题。</p><img src="/d3df33f31582/image-20240913105847777.png" class="" alt="拥有大量输入参数的构造函数也有缺陷： 这些参数也不是每次都要全部用上的。"><p>通常情况下， 绝大部分的参数都没有使用， 这使得<strong>对于构造函数的调用十分不简洁</strong>。 例如， 只有很少的房子有游泳池， 因此与游泳池相关的参数十之八九是毫无用处的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>生成器模式建议将对象构造代码从产品类中抽取出来， 并将其放在一个名为<em>生成器</em>的独立对象中。</p><img src="/d3df33f31582/image-20240913110115764.png" class="" alt="生成器模式让你能够分步骤创建复杂对象。 生成器不允许其他对象访问正在创建中的产品。"><p>该模式会将对象构造过程划分为一组步骤， 比如 <code>build­Walls</code>创建墙壁和 <code>build­Door</code>创建房门创建房门等。 每次创建对象时， 你都需要通过生成器对象执行一系列步骤。 重点在于你无需调用所有步骤， 而只需调用创建特定对象配置所需的那些步骤即可。</p><p>当你需要创建不同形式的产品时， 其中的一些构造步骤可能需要不同的实现。 例如， 木屋的房门可能需要使用木头制造， 而城堡的房门则必须使用石头制造。</p><p>在这种情况下， 你可以创建多个不同的生成器， 用不同方式实现一组相同的创建步骤。 然后你就可以在创建过程中使用这些生成器 （例如按顺序调用多个构造步骤） 来生成不同类型的对象。</p><img src="/d3df33f31582/image-20240913110457750.png" class="" alt="不同生成器以不同方式执行相同的任务。"><p>例如， 假设第一个建造者使用木头和玻璃制造房屋， 第二个建造者使用石头和钢铁， 而第三个建造者使用黄金和钻石。 在调用同一组步骤后， 第一个建造者会给你一栋普通房屋， 第二个会给你一座小城堡， 而第三个则会给你一座宫殿。 但是， 只有在调用构造步骤的客户端代码可以通过通用接口与建造者进行交互时， 这样的调用才能返回需要的房屋。</p><h3 id="主管"><a href="#主管" class="headerlink" title="主管"></a>主管</h3><p>你可以进一步将用于创建产品的一系列生成器步骤调用抽取成为单独的<em>主管</em>类。 主管类可定义创建步骤的执行顺序， 而生成器则提供这些步骤的实现。</p><img src="/d3df33f31582/image-20240913110729981.png" class="" alt="主管知道需要哪些创建步骤才能获得可正常使用的产品。"><p>严格来说， 你的程序中并不一定需要主管类。 客户端代码可直接以特定顺序调用创建步骤。 不过， 主管类中非常适合放入各种例行构造流程， 以便在程序中反复使用。</p><p>此外， 对于客户端代码来说， 主管类完全隐藏了产品构造细节。 客户端只需要将一个生成器与主管类关联， 然后使用主管类来构造产品， 就能从生成器处获得构造结果了。</p><h2 id="生成器模式结构"><a href="#生成器模式结构" class="headerlink" title="生成器模式结构"></a>生成器模式结构</h2><img src="/d3df33f31582/image-20240913110837976.png" class="" alt="image-20240913110837976"><ol><li><strong>生成器</strong> （Builder） 接口声明在所有类型生成器中通用的产品构造步骤。</li><li><strong>具体生成器</strong> （Concrete Builders） 提供构造过程的不同实现。 具体生成器也可以构造不遵循通用接口的产品。</li><li><strong>产品</strong> （Products） 是最终生成的对象。 由不同生成器构造的产品无需属于同一类层次结构或接口。</li><li><strong>主管</strong> （Director） 类定义调用构造步骤的顺序， 这样你就可以创建和复用特定的产品配置。</li><li><strong>客户端</strong> （Client） 必须将某个生成器对象与主管类关联。 一般情况下， 你只需通过主管类构造函数的参数进行一次性关联即可。 此后主管类就能使用生成器对象完成后续所有的构造任务。 但在客户端将生成器对象传递给主管类制造方法时还有另一种方式。 在这种情况下， 你在使用主管类生产产品时每次都可以使用不同的生成器。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面关于<strong>生成器</strong>模式的例子演示了你可以如何复用相同的对象构造代码来生成不同类型的产品——例如汽车 （Car）——及其相应的使用手册 （Manual）。</p><img src="/d3df33f31582/image-20240913112820977.png" class="" alt="分步骤制造汽车并制作对应型号用户使用手册的示例"><p>汽车是一个复杂对象， 有数百种不同的制造方法。 我们没有在 <code>汽车</code>类中塞入一个巨型构造函数， 而是将汽车组装代码抽取到单独的汽车生成器类中。 该类中有一组方法可用来配置汽车的各种部件。</p><p>如果客户端代码需要组装一辆与众不同、 精心调教的汽车， 它可以直接调用生成器。 或者， 客户端可以将组装工作委托给主管类， 因为主管类知道如何使用生成器制造最受欢迎的几种型号汽车。</p><p>你或许会感到吃惊， 但确实每辆汽车都需要一本使用手册 （说真的， 谁会去读它们呢？）。 使用手册会介绍汽车的每一项功能， 因此不同型号的汽车， 其使用手册内容也不一样。 因此， 你可以复用现有流程来制造实际的汽车及其对应的手册。 当然， 编写手册和制造汽车不是一回事， 所以我们需要另外一个生成器对象来专门编写使用手册。 该类与其制造汽车的兄弟类都实现了相同的制造方法， 但是其功能不是制造汽车部件， 而是描述每个部件。 将这些生成器传递给相同的主管对象， 我们就能够生成一辆汽车或是一本使用手册了。</p><p>最后一个部分是获取结果对象。 尽管金属汽车和纸质手册存在关联， 但它们却是完全不同的东西。 我们无法在主管类和具体产品类不发生耦合的情况下， 在主管类中提供获取结果对象的方法。 因此， 我们只能通过负责制造过程的生成器来获取结果对象。</p><h3 id="builders"><a href="#builders" class="headerlink" title="builders"></a><strong>builders</strong></h3><h4 id="builders-Builder-java-通用生成器接口"><a href="#builders-Builder-java-通用生成器接口" class="headerlink" title="builders&#x2F;Builder.java: 通用生成器接口"></a><strong>builders&#x2F;Builder.java:</strong> 通用生成器接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.builders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.cars.CarType;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Engine;</span><br><span class="line"><span class="keyword">import</span> org.example.components.GPSNavigator;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Transmission;</span><br><span class="line"><span class="keyword">import</span> org.example.components.TripComputer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builder界面定义了配置产品的所有可能方法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setCarType</span><span class="params">(CarType type)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setSeats</span><span class="params">(<span class="type">int</span> seats)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setEngine</span><span class="params">(Engine engine)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setTransmission</span><span class="params">(Transmission transmission)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setTripComputer</span><span class="params">(TripComputer tripComputer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setGPSNavigator</span><span class="params">(GPSNavigator gpsNavigator)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="builders-CarBuilder-java-汽车生成器"><a href="#builders-CarBuilder-java-汽车生成器" class="headerlink" title="builders&#x2F;CarBuilder.java: 汽车生成器"></a><strong>builders&#x2F;CarBuilder.java:</strong> 汽车生成器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.builders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.cars.Car;</span><br><span class="line"><span class="keyword">import</span> org.example.cars.CarType;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Engine;</span><br><span class="line"><span class="keyword">import</span> org.example.components.GPSNavigator;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Transmission;</span><br><span class="line"><span class="keyword">import</span> org.example.components.TripComputer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CarType type;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seats;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> Transmission transmission;</span><br><span class="line">    <span class="keyword">private</span> TripComputer tripComputer;</span><br><span class="line">    <span class="keyword">private</span> GPSNavigator gpsNavigator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarType</span><span class="params">(CarType type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSeats</span><span class="params">(<span class="type">int</span> seats)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seats = seats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEngine</span><span class="params">(Engine engine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTransmission</span><span class="params">(Transmission transmission)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transmission = transmission;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTripComputer</span><span class="params">(TripComputer tripComputer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tripComputer = tripComputer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGPSNavigator</span><span class="params">(GPSNavigator gpsNavigator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gpsNavigator = gpsNavigator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(type, seats, engine, transmission, tripComputer, gpsNavigator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="builders-CarManualBuilder-java-汽车手册生成器"><a href="#builders-CarManualBuilder-java-汽车手册生成器" class="headerlink" title="builders&#x2F;CarManualBuilder.java: 汽车手册生成器"></a><strong>builders&#x2F;CarManualBuilder.java:</strong> 汽车手册生成器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.builders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.cars.CarType;</span><br><span class="line"><span class="keyword">import</span> org.example.cars.Manual;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Engine;</span><br><span class="line"><span class="keyword">import</span> org.example.components.GPSNavigator;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Transmission;</span><br><span class="line"><span class="keyword">import</span> org.example.components.TripComputer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车手册生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarManualBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CarType type;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> seats;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> Transmission transmission;</span><br><span class="line">    <span class="keyword">private</span> TripComputer tripComputer;</span><br><span class="line">    <span class="keyword">private</span> GPSNavigator gpsNavigator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCarType</span><span class="params">(CarType type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSeats</span><span class="params">(<span class="type">int</span> seats)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seats = seats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEngine</span><span class="params">(Engine engine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTransmission</span><span class="params">(Transmission transmission)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.transmission = transmission;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTripComputer</span><span class="params">(TripComputer tripComputer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tripComputer = tripComputer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGPSNavigator</span><span class="params">(GPSNavigator gpsNavigator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gpsNavigator = gpsNavigator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Manual <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Manual</span>(type, seats, engine, transmission, tripComputer, gpsNavigator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cars"><a href="#cars" class="headerlink" title="cars"></a><strong>cars</strong></h3><h4 id="cars-Car-java-汽车产品"><a href="#cars-Car-java-汽车产品" class="headerlink" title="cars&#x2F;Car.java: 汽车产品"></a><strong>cars&#x2F;Car.java:</strong> 汽车产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cars;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.components.Engine;</span><br><span class="line"><span class="keyword">import</span> org.example.components.GPSNavigator;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Transmission;</span><br><span class="line"><span class="keyword">import</span> org.example.components.TripComputer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车产品</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CarType carType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> seats;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transmission transmission;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TripComputer tripComputer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GPSNavigator gpsNavigator;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">fuel</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(CarType carType, <span class="type">int</span> seats, Engine engine, Transmission transmission,</span></span><br><span class="line"><span class="params">               TripComputer tripComputer, GPSNavigator gpsNavigator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carType = carType;</span><br><span class="line">        <span class="built_in">this</span>.seats = seats;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">        <span class="built_in">this</span>.transmission = transmission;</span><br><span class="line">        <span class="built_in">this</span>.tripComputer = tripComputer;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.tripComputer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.tripComputer.setCar(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.gpsNavigator = gpsNavigator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CarType <span class="title function_">getCarType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> carType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getFuel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fuel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFuel</span><span class="params">(<span class="type">double</span> fuel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fuel = fuel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSeats</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Engine <span class="title function_">getEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Transmission <span class="title function_">getTransmission</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> transmission;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TripComputer <span class="title function_">getTripComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tripComputer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> GPSNavigator <span class="title function_">getGpsNavigator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gpsNavigator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="cars-Manual-java-手册产品"><a href="#cars-Manual-java-手册产品" class="headerlink" title="cars&#x2F;Manual.java: 手册产品"></a><strong>cars&#x2F;Manual.java:</strong> 手册产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cars;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.components.Engine;</span><br><span class="line"><span class="keyword">import</span> org.example.components.GPSNavigator;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Transmission;</span><br><span class="line"><span class="keyword">import</span> org.example.components.TripComputer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手册产品</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manual</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CarType carType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> seats;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Engine engine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transmission transmission;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TripComputer tripComputer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GPSNavigator gpsNavigator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manual</span><span class="params">(CarType carType, <span class="type">int</span> seats, Engine engine, Transmission transmission,</span></span><br><span class="line"><span class="params">                  TripComputer tripComputer, GPSNavigator gpsNavigator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.carType = carType;</span><br><span class="line">        <span class="built_in">this</span>.seats = seats;</span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">        <span class="built_in">this</span>.transmission = transmission;</span><br><span class="line">        <span class="built_in">this</span>.tripComputer = tripComputer;</span><br><span class="line">        <span class="built_in">this</span>.gpsNavigator = gpsNavigator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        info += <span class="string">&quot;Type of car: &quot;</span> + carType + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        info += <span class="string">&quot;Count of seats: &quot;</span> + seats + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        info += <span class="string">&quot;Engine: volume - &quot;</span> + engine.getVolume() + <span class="string">&quot;; mileage - &quot;</span> + engine.getMileage() + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        info += <span class="string">&quot;Transmission: &quot;</span> + transmission + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.tripComputer != <span class="literal">null</span>) &#123;</span><br><span class="line">            info += <span class="string">&quot;Trip Computer: Functional&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            info += <span class="string">&quot;Trip Computer: N/A&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.gpsNavigator != <span class="literal">null</span>) &#123;</span><br><span class="line">            info += <span class="string">&quot;GPS Navigator: Functional&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            info += <span class="string">&quot;GPS Navigator: N/A&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="cars-CarType-java"><a href="#cars-CarType-java" class="headerlink" title="cars&#x2F;CarType.java"></a><strong>cars&#x2F;CarType.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.cars;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CarType</span> &#123;</span><br><span class="line">    CITY_CAR, SPORTS_CAR, SUV</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="components"><a href="#components" class="headerlink" title="components"></a><strong>components</strong></h3><h4 id="components-Engine-java-产品特征-1"><a href="#components-Engine-java-产品特征-1" class="headerlink" title="components&#x2F;Engine.java: 产品特征 1"></a><strong>components&#x2F;Engine.java:</strong> 产品特征 1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.components;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品特征 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> volume;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> mileage;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> started;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Engine</span><span class="params">(<span class="type">double</span> volume, <span class="type">double</span> mileage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.volume = volume;</span><br><span class="line">        <span class="built_in">this</span>.mileage = mileage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        started = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> started;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(<span class="type">double</span> mileage)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (started) &#123;</span><br><span class="line">            <span class="built_in">this</span>.mileage += mileage;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;不能去 ()，你必须先启动引擎!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getVolume</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volume;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMileage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mileage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="components-GPSNavigator-java-产品特征-2"><a href="#components-GPSNavigator-java-产品特征-2" class="headerlink" title="components&#x2F;GPSNavigator.java: 产品特征 2"></a><strong>components&#x2F;GPSNavigator.java:</strong> 产品特征 2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.components;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品特征 2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GPSNavigator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String route;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GPSNavigator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.route = <span class="string">&quot;221b，贝克街，伦敦到苏格兰场，8-10百老汇，伦敦&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GPSNavigator</span><span class="params">(String manualRoute)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.route = manualRoute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRoute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> route;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="components-Transmission-java-产品特征-3"><a href="#components-Transmission-java-产品特征-3" class="headerlink" title="components&#x2F;Transmission.java: 产品特征 3"></a><strong>components&#x2F;Transmission.java:</strong> 产品特征 3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.components;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品特征 3</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Transmission</span> &#123;</span><br><span class="line">    SINGLE_SPEED, MANUAL, AUTOMATIC, SEMI_AUTOMATIC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="components-TripComputer-java-产品特征-4"><a href="#components-TripComputer-java-产品特征-4" class="headerlink" title="components&#x2F;TripComputer.java: 产品特征 4"></a><strong>components&#x2F;TripComputer.java:</strong> 产品特征 4</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.components;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.cars.Car;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品特征 4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TripComputer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCar</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showFuelLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fuel level: &quot;</span> + car.getFuel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.car.getEngine().isStarted()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Car is started&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Car isn&#x27;t started&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="director"><a href="#director" class="headerlink" title="director"></a><strong>director</strong></h3><h4 id="director-Director-java-主管控制生成器"><a href="#director-Director-java-主管控制生成器" class="headerlink" title="director&#x2F;Director.java: 主管控制生成器"></a><strong>director&#x2F;Director.java:</strong> 主管控制生成器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.director;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.builders.Builder;</span><br><span class="line"><span class="keyword">import</span> org.example.cars.CarType;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Engine;</span><br><span class="line"><span class="keyword">import</span> org.example.components.GPSNavigator;</span><br><span class="line"><span class="keyword">import</span> org.example.components.Transmission;</span><br><span class="line"><span class="keyword">import</span> org.example.components.TripComputer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主管控制生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/13 上午11:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constructSportsCar</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        builder.setCarType(CarType.SPORTS_CAR);</span><br><span class="line">        builder.setSeats(<span class="number">2</span>);</span><br><span class="line">        builder.setEngine(<span class="keyword">new</span> <span class="title class_">Engine</span>(<span class="number">3.0</span>, <span class="number">0</span>));</span><br><span class="line">        builder.setTransmission(Transmission.SEMI_AUTOMATIC);</span><br><span class="line">        builder.setTripComputer(<span class="keyword">new</span> <span class="title class_">TripComputer</span>());</span><br><span class="line">        builder.setGPSNavigator(<span class="keyword">new</span> <span class="title class_">GPSNavigator</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constructCityCar</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        builder.setCarType(CarType.CITY_CAR);</span><br><span class="line">        builder.setSeats(<span class="number">2</span>);</span><br><span class="line">        builder.setEngine(<span class="keyword">new</span> <span class="title class_">Engine</span>(<span class="number">1.2</span>, <span class="number">0</span>));</span><br><span class="line">        builder.setTransmission(Transmission.AUTOMATIC);</span><br><span class="line">        builder.setTripComputer(<span class="keyword">new</span> <span class="title class_">TripComputer</span>());</span><br><span class="line">        builder.setGPSNavigator(<span class="keyword">new</span> <span class="title class_">GPSNavigator</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constructSUV</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        builder.setCarType(CarType.SUV);</span><br><span class="line">        builder.setSeats(<span class="number">4</span>);</span><br><span class="line">        builder.setEngine(<span class="keyword">new</span> <span class="title class_">Engine</span>(<span class="number">2.5</span>, <span class="number">0</span>));</span><br><span class="line">        builder.setTransmission(Transmission.MANUAL);</span><br><span class="line">        builder.setGPSNavigator(<span class="keyword">new</span> <span class="title class_">GPSNavigator</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成器模式适合应用场景"><a href="#生成器模式适合应用场景" class="headerlink" title="生成器模式适合应用场景"></a>生成器模式适合应用场景</h2><p><strong>使用生成器模式可避免“重叠构造函数（telescoping constructor）”的出现。</strong></p><p>假设你的构造函数中有十个可选参数， 那么调用该函数会非常不方便； 因此， 你需要重载这个构造函数， 新建几个只有较少参数的简化版。 但这些构造函数仍需调用主构造函数， 传递一些默认数值来替代省略掉的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pizza</span> &#123;</span><br><span class="line">    Pizza(<span class="type">int</span> size) &#123; …… &#125;</span><br><span class="line">    Pizza(<span class="type">int</span> size, <span class="type">boolean</span> cheese) &#123; …… &#125;</span><br><span class="line">    Pizza(<span class="type">int</span> size, <span class="type">boolean</span> cheese, <span class="type">boolean</span> pepperoni) &#123; …… &#125;</span><br><span class="line">    <span class="comment">// ……</span></span><br></pre></td></tr></table></figure><p>只有在 C# 或 Java 等支持方法重载的编程语言中才能写出如此复杂的构造函数。</p><p>生成器模式让你可以分步骤生成对象， 而且允许你仅使用必须的步骤。 应用该模式后， 你再也不需要将几十个参数塞进构造函数里了。</p><p><strong>当你希望使用代码创建不同形式的产品 （例如石头或木头房屋） 时， 可使用生成器模式。</strong></p><p>如果你需要创建的各种形式的产品， 它们的制造过程相似且仅有细节上的差异， 此时可使用生成器模式。</p><p>基本生成器接口中定义了所有可能的制造步骤， 具体生成器将实现这些步骤来制造特定形式的产品。 同时， 主管类将负责管理制造步骤的顺序。</p><p> <strong>使用生成器构造组合树或其他复杂对象。</strong></p><p>生成器模式让你能分步骤构造产品。 你可以延迟执行某些步骤而不会影响最终产品。 你甚至可以递归调用这些步骤， 这在创建对象树时非常方便。</p><p>生成器在执行制造步骤时， 不能对外发布未完成的产品。 这可以避免客户端代码获取到不完整结果对象的情况。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol><li><p>清晰地定义通用步骤， 确保它们可以制造所有形式的产品。 否则你将无法进一步实施该模式。</p></li><li><p>在基本生成器接口中声明这些步骤。</p></li><li><p>为每个形式的产品创建具体生成器类， 并实现其构造步骤。</p><p>不要忘记实现获取构造结果对象的方法。 你不能在生成器接口中声明该方法， 因为不同生成器构造的产品可能没有公共接口， 因此你就不知道该方法返回的对象类型。 但是， 如果所有产品都位于单一类层次中， 你就可以安全地在基本接口中添加获取生成对象的方法。</p></li><li><p>考虑创建主管类。 它可以使用同一生成器对象来封装多种构造产品的方式。</p></li><li><p>客户端代码会同时创建生成器和主管对象。 构造开始前， 客户端必须将生成器对象传递给主管对象。 通常情况下， 客户端只需调用主管类构造函数一次即可。 主管类使用生成器对象完成后续所有制造任务。 还有另一种方式， 那就是客户端可以将生成器对象直接传递给主管类的制造方法。</p></li><li><p>只有在所有产品都遵循相同接口的情况下， 构造结果可以直接通过主管类获取。 否则， 客户端应当通过生成器获取构造结果。</p></li></ol><h2 id="生成器模式优缺点"><a href="#生成器模式优缺点" class="headerlink" title="生成器模式优缺点"></a>生成器模式优缺点</h2><p>优点：</p><ul><li>你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</li><li>生成不同形式的产品时， 你可以复用相同的制造代码。</li><li><em>单一职责原则</em>。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</li></ul><p>缺点：</p><ul><li>由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>在许多设计工作的初期都会使用工厂方法模式（较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用抽象工厂模式、 原型模式或生成器模式（更灵活但更加复杂）。</li><li>生成器重点关注如何分步生成复杂对象。抽象工厂专门用于生产一系列相关对象。 <em>抽象工厂</em>会马上返回产品， <em>生成器</em>则允许你在获取产品前执行一些额外构造步骤。</li><li>你可以在创建复杂组合模式树时使用生成器， 因为这可使其构造步骤以递归的方式运行。</li><li>你可以结合使用生成器和桥接模式： <em>主管</em>类负责抽象工作， 各种不同的<em>生成器</em>负责<em>实现</em>工作。</li><li>抽象工厂、 生成器和原型都可以用单例模式来实现。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;生成器模式&lt;/strong&gt;是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建造者模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="建造者模式" scheme="https://blog.48626.xyz/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://blog.48626.xyz/e385baf06d73.html"/>
    <id>https://blog.48626.xyz/e385baf06d73.html</id>
    <published>2024-09-12T11:28:25.000Z</published>
    <updated>2024-09-12T11:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>抽象工厂模式</strong>是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。</p><img src="/e385baf06d73/image-20240912164552024.png" class="" alt="image-20240912164552024"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设你正在开发一款家具商店模拟器。 你的代码中包括一些类， 用于表示：</p><ol><li>一系列相关产品， 例如 <code>椅子</code>Chair 、  <code>沙发</code>Sofa和 <code>咖啡桌</code>Coffee­Table 。</li><li>系列产品的不同变体。 例如， 你可以使用 <code>现代</code>Modern 、  <code>维多利亚</code>Victorian 、  <code>装饰风艺术</code>Art­Deco等风格生成 <code>椅子</code> 、  <code>沙发</code>和 <code>咖啡桌</code> 。</li></ol><img src="/e385baf06d73/image-20240912165123084.png" class="" alt="系列产品及其不同变体。"><p>你需要设法单独生成每件家具对象， 这样才能确保其风格一致。 如果顾客收到的家具风格不一样， 他们可不会开心。</p><img src="/e385baf06d73/image-20240912165204693.png" class="" alt="现代风格的沙发和维多利亚风格的椅子不搭。"><p>此外， 你也不希望在添加新产品或新风格时修改已有代码。 家具供应商对于产品目录的更新非常频繁， 你不会想在每次更新时都去修改核心代码的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先， 抽象工厂模式建议为系列中的每件产品明确声明接口 （例如椅子、 沙发或咖啡桌）。 然后， 确保所有产品变体都继承这些接口。 例如， 所有风格的椅子都实现 <code>椅子</code>接口； 所有风格的咖啡桌都实现 <code>咖啡桌</code>接口， 以此类推。</p><img src="/e385baf06d73/image-20240912170138049.png" class="" alt="同一对象的所有变体都必须放置在同一个类层次结构之中。"><p>接下来， 我们需要声明<em>抽象工厂</em>——包含系列中所有产品构造方法的接口。 例如 <code>create­Chair</code>创建椅子 、  <code>create­Sofa</code>创建沙发和 <code>create­Coffee­Table</code>创建咖啡桌 。 这些方法必须返回<strong>抽象</strong>产品类型， 即我们之前抽取的那些接口：  <code>椅子</code> ，  <code>沙发</code>和 <code>咖啡桌</code>等等。</p><img src="/e385baf06d73/image-20240912170208152.png" class="" alt="每个具体工厂类都对应一个特定的产品变体。"><p>那么该如何处理产品变体呢？ 对于系列产品的每个变体， 我们都将基于 <code>抽象工厂</code>接口创建不同的工厂类。 每个工厂类都只能返回特定类别的产品， 例如，  <code>现代家具工厂</code>Modern­Furniture­Factory只能创建 <code>现代椅子</code>Modern­Chair 、  <code>现代沙发</code>Modern­Sofa和 <code>现代咖啡桌</code>Modern­Coffee­Table对象。</p><p>客户端代码可以通过相应的抽象接口调用工厂和产品类。 你无需修改实际客户端代码， 就能更改传递给客户端的工厂类， 也能更改客户端代码接收的产品变体。</p><img src="/e385baf06d73/image-20240912173230543.png" class="" alt="客户端无需了解其所调用工厂的具体类信息。"><p>假设客户端想要工厂创建一把椅子。 客户端无需了解工厂类， 也不用管工厂类创建出的椅子类型。 无论是现代风格， 还是维多利亚风格的椅子， 对于客户端来说没有分别， 它只需调用抽象 <code>椅子</code>接口就可以了。 这样一来， 客户端只需知道椅子以某种方式实现了 <code>sit­On</code>坐下方法就足够了。 此外， 无论工厂返回的是何种椅子变体， 它都会和由同一工厂对象创建的沙发或咖啡桌风格一致。</p><p>最后一点说明： 如果客户端仅接触抽象接口， 那么谁来创建实际的工厂对象呢？ 一般情况下， 应用程序会在初始化阶段创建具体工厂对象。 而在此之前， 应用程序必须根据配置文件或环境设定选择工厂类别。</p><h2 id="抽象工厂模式结构"><a href="#抽象工厂模式结构" class="headerlink" title="抽象工厂模式结构"></a>抽象工厂模式结构</h2><img src="/e385baf06d73/image-20240912173436578.png" class="" alt="image-20240912173436578"><ol><li><strong>抽象产品</strong> （Abstract Product） 为构成系列产品的一组不同但相关的产品声明接口。</li><li><strong>具体产品</strong> （Concrete Product） 是抽象产品的多种不同类型实现。 所有变体 （维多利亚&#x2F;现代） 都必须实现相应的抽象产品 （椅子&#x2F;沙发）。</li><li><strong>抽象工厂</strong> （Abstract Factory） 接口声明了一组创建各种抽象产品的方法。</li><li><strong>具体工厂</strong> （Concrete Factory） 实现抽象工厂的构建方法。 每个具体工厂都对应特定产品变体， 且仅创建此种产品变体。</li><li>尽管具体工厂会对具体产品进行初始化， 其构建方法签名必须返回相应的<em>抽象</em>产品。 这样， 使用工厂类的客户端代码就不会与工厂创建的特定产品变体耦合。 <strong>客户端</strong> （Client） 只需通过抽象接口调用工厂和产品对象， 就能与任何具体工厂&#x2F;产品变体交互。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面例子通过应用<strong>抽象工厂</strong>模式， 使得客户端代码无需与具体 UI 类耦合， 就能创建跨平台的 UI 元素， 同时确保所创建的元素与指定的操作系统匹配。</p><img src="/e385baf06d73/image-20240912173914736.png" class="" alt="跨平台 UI 类示例。"><p>跨平台应用中的相同 UI 元素功能类似， 但是在不同操作系统下的外观有一定差异。 此外， 你需要确保 UI 元素与当前操作系统风格一致。 你一定不希望在 Windows 系统下运行的应用程序中显示 macOS 的控件。</p><p>抽象工厂接口声明一系列构建方法， 客户端代码可调用它们生成不同风格的 UI 元素。 每个具体工厂对应特定操作系统， 并负责生成符合该操作系统风格的 UI 元素。</p><p>其运作方式如下： 应用程序启动后检测当前操作系统。 根据该信息， 应用程序通过与该操作系统对应的类创建工厂对象。 其余代码使用该工厂对象创建 UI 元素。 这样可以避免生成错误类型的元素。</p><p>使用这种方法， 客户端代码只需调用抽象接口， 而无需了解具体工厂类和 UI 元素。 此外， 客户端代码还支持未来添加新的工厂或 UI 元素。</p><p>这样一来， 每次在应用程序中添加新的 UI 元素变体时， 你都无需修改客户端代码。 你只需创建一个能够生成这些 UI 元素的工厂类， 然后稍微修改应用程序的初始代码， 使其能够选择合适的工厂类即可。</p><h3 id="buttons-第一个产品层次结构"><a href="#buttons-第一个产品层次结构" class="headerlink" title="buttons: 第一个产品层次结构"></a><strong>buttons:</strong> 第一个产品层次结构</h3><h4 id="buttons-Button-java"><a href="#buttons-Button-java" class="headerlink" title="buttons&#x2F;Button.java"></a><strong>buttons&#x2F;Button.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.buttons;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂假设你有几个系列的产品，</span></span><br><span class="line"><span class="comment"> * 结构成单独的类层次结构 (按钮/复选框)。的所有产品</span></span><br><span class="line"><span class="comment"> * 同一个家庭有共同的接口。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 这是按钮家族的通用接口。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="buttons-MacOSButton-java"><a href="#buttons-MacOSButton-java" class="headerlink" title="buttons&#x2F;MacOSButton.java"></a><strong>buttons&#x2F;MacOSButton.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.buttons;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有产品系列都有相同的品种 (MacOS/Windows)。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 这是一个按钮的MacOS变体。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您已创建MacOSButton.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="buttons-WindowsButton-java"><a href="#buttons-WindowsButton-java" class="headerlink" title="buttons&#x2F;WindowsButton.java"></a><strong>buttons&#x2F;WindowsButton.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.buttons;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有产品系列都有相同的品种 (MacOS/Windows)。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 这是按钮的另一种变体。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您已创建WindowsButton.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="checkboxes-第二个产品层次结构"><a href="#checkboxes-第二个产品层次结构" class="headerlink" title="checkboxes: 第二个产品层次结构"></a><strong>checkboxes:</strong> 第二个产品层次结构</h3><h4 id="checkboxes-Checkbox-java"><a href="#checkboxes-Checkbox-java" class="headerlink" title="checkboxes&#x2F;Checkbox.java"></a><strong>checkboxes&#x2F;Checkbox.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.checkboxes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checkboxes是第二个产品系列。它具有与按钮相同的变体。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Checkbox</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="checkboxes-MacOSCheckbox-java"><a href="#checkboxes-MacOSCheckbox-java" class="headerlink" title="checkboxes&#x2F;MacOSCheckbox.java"></a><strong>checkboxes&#x2F;MacOSCheckbox.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.checkboxes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有产品系列都有相同的品种 (MacOS/Windows)。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 这是一个复选框的变体。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSCheckbox</span> <span class="keyword">implements</span> <span class="title class_">Checkbox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您已创建MacOSCheckbox.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="checkboxes-WindowsCheckbox-java"><a href="#checkboxes-WindowsCheckbox-java" class="headerlink" title="checkboxes&#x2F;WindowsCheckbox.java"></a><strong>checkboxes&#x2F;WindowsCheckbox.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.checkboxes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有产品系列都有相同的品种 (MacOS/Windows)。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 这是复选框的另一种变体。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsCheckbox</span> <span class="keyword">implements</span> <span class="title class_">Checkbox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您已创建WindowsCheckbox.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="factories"><a href="#factories" class="headerlink" title="factories"></a><strong>factories</strong></h3><h4 id="factories-GUIFactory-java-抽象工厂"><a href="#factories-GUIFactory-java-抽象工厂" class="headerlink" title="factories&#x2F;GUIFactory.java: 抽象工厂"></a><strong>factories&#x2F;GUIFactory.java:</strong> 抽象工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.factories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.buttons.Button;</span><br><span class="line"><span class="keyword">import</span> org.example.checkboxes.Checkbox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂知道所有 (抽象) 产品类型。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">    Button <span class="title function_">createButton</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Checkbox <span class="title function_">createCheckbox</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="factories-MacOSFactory-java-具体工厂-（-mac­OS）"><a href="#factories-MacOSFactory-java-具体工厂-（-mac­OS）" class="headerlink" title="factories&#x2F;MacOSFactory.java: 具体工厂 （ mac­OS）"></a><strong>factories&#x2F;MacOSFactory.java:</strong> 具体工厂 （ mac­OS）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.factories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.buttons.Button;</span><br><span class="line"><span class="keyword">import</span> org.example.buttons.MacOSButton;</span><br><span class="line"><span class="keyword">import</span> org.example.checkboxes.Checkbox;</span><br><span class="line"><span class="keyword">import</span> org.example.checkboxes.MacOSCheckbox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每个混凝土工厂扩展基本工厂并负责创建</span></span><br><span class="line"><span class="comment"> * 单一品种的产品。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacOSButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Checkbox <span class="title function_">createCheckbox</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacOSCheckbox</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="factories-WindowsFactory-java-具体工厂-（Windows）"><a href="#factories-WindowsFactory-java-具体工厂-（Windows）" class="headerlink" title="factories&#x2F;WindowsFactory.java: 具体工厂 （Windows）"></a><strong>factories&#x2F;WindowsFactory.java:</strong> 具体工厂 （Windows）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.factories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.buttons.Button;</span><br><span class="line"><span class="keyword">import</span> org.example.buttons.WindowsButton;</span><br><span class="line"><span class="keyword">import</span> org.example.checkboxes.Checkbox;</span><br><span class="line"><span class="keyword">import</span> org.example.checkboxes.WindowsCheckbox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每个混凝土工厂扩展基本工厂并负责创建</span></span><br><span class="line"><span class="comment"> * 单一品种的产品。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Checkbox <span class="title function_">createCheckbox</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsCheckbox</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="app"><a href="#app" class="headerlink" title="app"></a><strong>app</strong></h3><h4 id="app-Application-java-客户端代码"><a href="#app-Application-java-客户端代码" class="headerlink" title="app&#x2F;Application.java: 客户端代码"></a><strong>app&#x2F;Application.java:</strong> 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.buttons.Button;</span><br><span class="line"><span class="keyword">import</span> org.example.checkboxes.Checkbox;</span><br><span class="line"><span class="keyword">import</span> org.example.factories.GUIFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂用户不关心他们使用的混凝土工厂，因为他们的工作</span></span><br><span class="line"><span class="comment"> * 通过抽象接口的工厂和产品。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="keyword">private</span> Checkbox checkbox;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Application</span><span class="params">(GUIFactory factory)</span> &#123;</span><br><span class="line">        button = factory.createButton();</span><br><span class="line">        checkbox = factory.createCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        button.paint();</span><br><span class="line">        checkbox.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Main-java-程序配置"><a href="#Main-java-程序配置" class="headerlink" title="Main.java: 程序配置"></a><strong>Main.java:</strong> 程序配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.app.Application;</span><br><span class="line"><span class="keyword">import</span> org.example.factories.GUIFactory;</span><br><span class="line"><span class="keyword">import</span> org.example.factories.MacOSFactory;</span><br><span class="line"><span class="keyword">import</span> org.example.factories.WindowsFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main类。一切都聚集在这里。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午5:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用程序选择工厂类型并在运行时创建它 (通常在</span></span><br><span class="line"><span class="comment">     * 初始化阶段)，具体取决于配置或环境</span></span><br><span class="line"><span class="comment">     * 变量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Application <span class="title function_">configureApplication</span><span class="params">()</span> &#123;</span><br><span class="line">        Application app;</span><br><span class="line">        GUIFactory factory;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase();</span><br><span class="line">        <span class="keyword">if</span> (osName.contains(<span class="string">&quot;mac&quot;</span>)) &#123;</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">MacOSFactory</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">WindowsFactory</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        app = <span class="keyword">new</span> <span class="title class_">Application</span>(factory);</span><br><span class="line">        <span class="keyword">return</span> app;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> configureApplication();</span><br><span class="line">        app.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式适合应用场景"><a href="#抽象工厂模式适合应用场景" class="headerlink" title="抽象工厂模式适合应用场景"></a>抽象工厂模式适合应用场景</h2><p> <strong>如果代码需要与多个不同系列的相关产品交互， 但是由于无法提前获取相关信息， 或者出于对未来扩展性的考虑， 你不希望代码基于产品的具体类进行构建， 在这种情况下， 你可以使用抽象工厂。</strong></p><p> 抽象工厂为你提供了一个接口， 可用于创建每个系列产品的对象。 只要代码通过该接口创建对象， 那么你就不会生成与应用程序已生成的产品类型不一致的产品。</p><p><strong>如果你有一个基于一组抽象方法的类， 且其主要功能因此变得不明确， 那么在这种情况下可以考虑使用抽象工厂模式。</strong></p><p> 在设计良好的程序中， <em>每个类仅负责一件事</em>。 如果一个类与多种类型产品交互， 就可以考虑将工厂方法抽取到独立的工厂类或具备完整功能的抽象工厂类中。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li>以不同的产品类型与产品变体为维度绘制矩阵。</li><li>为所有产品声明抽象产品接口。 然后让所有具体产品类实现这些接口。</li><li>声明抽象工厂接口， 并且在接口中为所有抽象产品提供一组构建方法。</li><li>为每种产品变体实现一个具体工厂类。</li><li>在应用程序中开发初始化代码。 该代码根据应用程序配置或当前环境， 对特定具体工厂类进行初始化。 然后将该工厂对象传递给所有需要创建产品的类。</li><li>找出代码中所有对产品构造函数的直接调用， 将其替换为对工厂对象中相应构建方法的调用。</li></ol><h2 id="抽象工厂模式优缺点"><a href="#抽象工厂模式优缺点" class="headerlink" title="抽象工厂模式优缺点"></a>抽象工厂模式优缺点</h2><p>优点：</p><ul><li>你可以确保同一工厂生成的产品相互匹配。</li><li>你可以避免客户端和具体产品代码的耦合。</li><li><em>单一职责原则</em>。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</li><li><em>开闭原则</em>。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</li></ul><p>缺点：</p><ul><li>由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>在许多设计工作的初期都会使用工厂方法模式（较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用抽象工厂模式、原型模式或生成器模式 （更灵活但更加复杂）。</li><li>生成器重点关注如何分步生成复杂对象。 抽象工厂专门用于生产一系列相关对象。 <em>抽象工厂</em>会马上返回产品， <em>生成器</em>则允许你在获取产品前执行一些额外构造步骤。</li><li>抽象工厂模式通常基于一组工厂方法， 但你也可以使用原型模式来生成这些类的方法。</li><li>当只需对客户端代码隐藏子系统创建对象的方式时， 你可以使用抽象工厂来代替外观模式。</li><li>你可以将抽象工厂和桥接模式搭配使用。 如果由<em>桥接</em>定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， <em>抽象工厂</em>可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。</li><li>抽象工厂、生成器和原型都可以用单例模式来实现。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;抽象工厂模式&lt;/strong&gt;是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="抽象工厂模式" scheme="https://blog.48626.xyz/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="https://blog.48626.xyz/66f289959be0.html"/>
    <id>https://blog.48626.xyz/66f289959be0.html</id>
    <published>2024-09-12T08:21:37.000Z</published>
    <updated>2024-09-12T08:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><strong>工厂方法模式</strong>是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><img src="/66f289959be0/image-20240912152854979.png" class="" alt="image-20240912152854979"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设你正在开发一款物流管理应用。 最初版本只能处理卡车运输， 因此大部分代码都在位于名为 <code>卡车</code>的类中。</p><p>一段时间后， 这款应用变得极受欢迎。 你每天都能收到十几次来自海运公司的请求， 希望应用能够支持海上物流功能。</p><img src="/66f289959be0/image-20240912152922428.png" class="" alt="在程序中新增一个运输类会遇到问题"><p>这可是个好消息。 但是代码问题该如何处理呢？ 目前， 大部分代码都与 <code>卡车</code>类相关。 在程序中添加 <code>轮船</code>类需要修改全部代码。 更糟糕的是， 如果你以后需要在程序中支持另外一种运输方式， 很可能需要再次对这些代码进行大幅修改。</p><p>最后， 你将不得不编写繁复的代码， 根据不同的运输对象类， 在应用中进行不同的处理。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>工厂方法模式建议使用特殊的<em>工厂</em>方法代替对于对象构造函数的直接调用 （即使用 <code>new</code>运算符）。 不用担心， 对象仍将通过 <code>new</code>运算符创建， 只是该运算符改在工厂方法中调用罢了。 工厂方法返回的对象通常被称作 “产品”。</p><img src="/66f289959be0/image-20240912152957005.png" class="" alt="子类可以修改工厂方法返回的对象类型。"><p>乍看之下， 这种更改可能毫无意义： 我们只是改变了程序中调用构造函数的位置而已。 但是， 仔细想一下， 现在你可以在子类中重写工厂方法， 从而改变其创建产品的类型。</p><p>但有一点需要注意:仅当这些产品具有共同的基类或者接口时， 子类才能返回不同类型的产品， 同时基类中的工厂方法还应将其返回类型声明为这一共有接口。</p><img src="/66f289959be0/image-20240912153018184.png" class="" alt="所有产品都必须使用同一接口。"><p>举例来说，  <code>卡车</code>Truck和 <code>轮船</code>Ship类都必须实现 <code>运输</code>Transport接口， 该接口声明了一个名为 <code>deliver</code>交付的方法。 每个类都将以不同的方式实现该方法： 卡车走陆路交付货物， 轮船走海路交付货物。  <code>陆路运输</code>Road­Logistics类中的工厂方法返回卡车对象， 而 <code>海路运输</code>Sea­Logistics类则返回轮船对象。</p><img src="/66f289959be0/image-20240912153044258.png" class="" alt="只要产品类实现一个共同的接口， 你就可以将其对象传递给客户代码， 而无需提供额外数据。"><p>调用工厂方法的代码 （通常被称为<em>客户端</em>代码） 无需了解不同子类返回实际对象之间的差别。 客户端将所有产品视为抽象的 <code>运输</code> 。 客户端知道所有运输对象都提供 <code>交付</code>方法， 但是并不关心其具体实现方式。</p><h2 id="工厂方法模式结构"><a href="#工厂方法模式结构" class="headerlink" title="工厂方法模式结构"></a>工厂方法模式结构</h2><img src="/66f289959be0/image-20240912153118656.png" class="" alt="image-20240912153118656"><ol><li><p><strong>产品</strong> （Product） 将会对接口进行声明。 对于所有由创建者及其子类构建的对象， 这些接口都是通用的。</p></li><li><p><strong>具体产品</strong> （Concrete Products） 是产品接口的不同实现。</p></li><li><p><strong>创建者</strong> （Creator） 类声明返回产品对象的工厂方法。 该方法的返回对象类型必须与产品接口相匹配。</p><p>你可以将工厂方法声明为抽象方法， 强制要求每个子类以不同方式实现该方法。 或者， 你也可以在基础工厂方法中返回默认产品类型。</p><p>注意， 尽管它的名字是创建者， 但它最主要的职责并<strong>不是</strong>创建产品。 一般来说， 创建者类包含一些与产品相关的核心业务逻辑。 工厂方法将这些逻辑处理从具体产品类中分离出来。 打个比方， 大型软件开发公司拥有程序员培训部门。 但是， 这些公司的主要工作还是编写代码， 而非生产程序员。</p></li><li><p><strong>具体创建者</strong> （Concrete Creators） 将会重写基础工厂方法， 使其返回不同类型的产品。</p><p>注意， 并不一定每次调用工厂方法都会<strong>创建</strong>新的实例。 工厂方法也可以返回缓存、 对象池或其他来源的已有对象。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>以下示例演示了如何使用<strong>工厂方法</strong>开发跨平台 UI （用户界面） 组件， 并同时避免客户代码与具体 UI 类之间的耦合。</p><img src="/66f289959be0/image-20240912153417032.png" class="" alt="跨平台对话框示例。"><p>基础对话框类使用不同的 UI 组件渲染窗口。 在不同的操作系统下， 这些组件外观或许略有不同， 但其功能保持一致。 Windows 系统中的按钮在 Linux 系统中仍然是按钮。</p><p>如果使用工厂方法， 就不需要为每种操作系统重写对话框逻辑。 如果我们声明了一个在基本对话框类中生成按钮的工厂方法， 那么我们就可以创建一个对话框子类， 并使其通过工厂方法返回 Windows 样式按钮。 子类将继承对话框基础类的大部分代码， 同时在屏幕上根据 Windows 样式渲染按钮。</p><p>如需该模式正常工作， 基础对话框类必须使用抽象按钮 （例如基类或接口）， 以便将其扩展为具体按钮。 这样一来， 无论对话框中使用何种类型的按钮， 其代码都可以正常工作。</p><p>你可以使用此方法开发其他 UI 组件。 不过， 每向对话框中添加一个新的工厂方法， 你就离<a href="https://refactoringguru.cn/design-patterns/abstract-factory">抽象工厂</a>模式更近一步。 我们将在稍后谈到这个模式。</p><h3 id="buttons"><a href="#buttons" class="headerlink" title="buttons"></a><strong>buttons</strong></h3><h4 id="buttons-Button-java-通用产品接口"><a href="#buttons-Button-java-通用产品接口" class="headerlink" title="buttons&#x2F;Button.java: 通用产品接口"></a><strong>buttons&#x2F;Button.java:</strong> 通用产品接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.buttons;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有按钮的通用界面。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="buttons-HtmlButton-java-具体产品"><a href="#buttons-HtmlButton-java-具体产品" class="headerlink" title="buttons&#x2F;HtmlButton.java: 具体产品"></a><strong>buttons&#x2F;HtmlButton.java:</strong> 具体产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.buttons;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTML button实施。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午3:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;button&gt;HTML Button&lt;/button&gt;&quot;</span>);</span><br><span class="line">        onClick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;点击!按钮说 - &#x27;HTML Button!&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="buttons-WindowsButton-java-另一个具体产品"><a href="#buttons-WindowsButton-java-另一个具体产品" class="headerlink" title="buttons&#x2F;WindowsButton.java: 另一个具体产品"></a><strong>buttons&#x2F;WindowsButton.java:</strong> 另一个具体产品</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.buttons;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Windows按钮实现。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午3:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;button&gt;Windows Button&lt;/button&gt;&quot;</span>);</span><br><span class="line">        onClick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;点击!按钮说 - &#x27;Windows Button!&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="factory"><a href="#factory" class="headerlink" title="factory"></a><strong>factory</strong></h3><h4 id="factory-Dialog-java-基础创建者"><a href="#factory-Dialog-java-基础创建者" class="headerlink" title="factory&#x2F;Dialog.java: 基础创建者"></a><strong>factory&#x2F;Dialog.java:</strong> 基础创建者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.buttons.Button;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本工厂类。请注意，&quot;工厂 &quot;只是该类的一个角色。</span></span><br><span class="line"><span class="comment"> * 它应该有一些核心业务逻辑，需要创建不同的产品。</span></span><br><span class="line"><span class="comment"> * 创建。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午3:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类将重写此方法以创建特定的按钮</span></span><br><span class="line"><span class="comment">     * 对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Button <span class="title function_">createButton</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="factory-HtmlDialog-java-具体创建者"><a href="#factory-HtmlDialog-java-具体创建者" class="headerlink" title="factory&#x2F;HtmlDialog.java: 具体创建者"></a><strong>factory&#x2F;HtmlDialog.java:</strong> 具体创建者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.buttons.Button;</span><br><span class="line"><span class="keyword">import</span> org.example.buttons.HtmlButton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTML对话框将产生HTML按钮。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午3:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HtmlButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="factory-WindowsDialog-java-另一个具体创建者"><a href="#factory-WindowsDialog-java-另一个具体创建者" class="headerlink" title="factory&#x2F;WindowsDialog.java: 另一个具体创建者"></a><strong>factory&#x2F;WindowsDialog.java:</strong> 另一个具体创建者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.buttons.Button;</span><br><span class="line"><span class="keyword">import</span> org.example.buttons.WindowsButton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Windows对话框将生成Windows按钮。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/9/12 下午3:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsDialog</span> <span class="keyword">extends</span> <span class="title class_">Dialog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Main-java-客户端代码"><a href="#Main-java-客户端代码" class="headerlink" title="Main.java: 客户端代码"></a><strong>Main.java:</strong> 客户端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.factory.Dialog;</span><br><span class="line"><span class="keyword">import</span> org.example.factory.HtmlDialog;</span><br><span class="line"><span class="keyword">import</span> org.example.factory.WindowsDialog;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main类。一切都聚集在这里。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dialog dialog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        configure();</span><br><span class="line">        runBusinessLogic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 混凝土工厂通常根据配置或</span></span><br><span class="line"><span class="comment">     * 环境选项。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Windows 10&quot;</span>.equals(System.getProperty(<span class="string">&quot;os.name&quot;</span>))) &#123;</span><br><span class="line">            dialog = <span class="keyword">new</span> <span class="title class_">WindowsDialog</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dialog = <span class="keyword">new</span> <span class="title class_">HtmlDialog</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有客户端代码都应通过以下方式与工厂和产品一起使用</span></span><br><span class="line"><span class="comment">     * 抽象接口。这种方式，它并不关心它的工作工厂</span></span><br><span class="line"><span class="comment">     * 以及它返回什么样的产品。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runBusinessLogic</span><span class="params">()</span> &#123;</span><br><span class="line">        dialog.renderWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式适合应用场景"><a href="#工厂方法模式适合应用场景" class="headerlink" title="工厂方法模式适合应用场景"></a>工厂方法模式适合应用场景</h2><p> <strong>当你在编写代码的过程中， 如果无法预知对象确切类别及其依赖关系时， 可使用工厂方法。</strong></p><p> 工厂方法将创建产品的代码与实际使用产品的代码分离， 从而能在不影响其他代码的情况下扩展产品创建部分代码。</p><p>例如， 如果需要向应用中添加一种新产品， 你只需要开发新的创建者子类， 然后重写其工厂方法即可。</p><p><strong>如果你希望用户能扩展你软件库或框架的内部组件， 可使用工厂方法。</strong></p><p>继承可能是扩展软件库或框架默认行为的最简单方法。 但是当你使用子类替代标准组件时， 框架如何辨识出该子类？</p><p>解决方案是将各框架中构造组件的代码集中到单个工厂方法中， 并在继承该组件之外允许任何人对该方法进行重写。</p><p>让我们看看具体是如何实现的。 假设你使用开源 UI 框架编写自己的应用。 你希望在应用中使用圆形按钮， 但是原框架仅支持矩形按钮。 你可以使用 <code>圆形按钮</code>Round­Button子类来继承标准的 <code>按钮</code>Button类。 但是， 你需要告诉 <code>UI框架</code>UIFramework类使用新的子类按钮代替默认按钮。</p><p>为了实现这个功能， 你可以根据基础框架类开发子类 <code>圆形按钮 UI</code>UIWith­Round­Buttons ， 并且重写其 <code>create­Button</code>创建按钮方法。 基类中的该方法返回 <code>按钮</code>对象， 而你开发的子类返回 <code>圆形按钮</code>对象。 现在， 你就可以使用 <code>圆形按钮 UI</code>类代替 <code>UI框架</code>类。 就是这么简单！</p><p><strong>如果你希望复用现有对象来节省系统资源，而不是每次都重新创建对象，可使用工厂方法。</strong></p><p>在处理大型资源密集型对象 （比如数据库连接、 文件系统和网络资源） 时， 你会经常碰到这种资源需求。</p><p>让我们思考复用现有对象的方法：</p><ol><li>首先， 你需要创建存储空间来存放所有已经创建的对象。</li><li>当他人请求一个对象时， 程序将在对象池中搜索可用对象。</li><li>… 然后将其返回给客户端代码。</li><li>如果没有可用对象， 程序则创建一个新对象 （并将其添加到对象池中）。</li></ol><p>这些代码可不少！ 而且它们必须位于同一处， 这样才能确保重复代码不会污染程序。</p><p>可能最显而易见， 也是最方便的方式， 就是将这些代码放置在我们试图重用的对象类的构造函数中。 但是从定义上来讲， 构造函数始终返回的是<strong>新对象</strong>， 其无法返回现有实例。</p><p>因此， 你需要有一个既能够创建新对象， 又可以重用现有对象的普通方法。 这听上去和工厂方法非常相像。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>让所有产品都遵循同一接口。 该接口必须声明对所有产品都有意义的方法。</p></li><li><p>在创建类中添加一个空的工厂方法。 该方法的返回类型必须遵循通用的产品接口。</p></li><li><p>在创建者代码中找到对于产品构造函数的所有引用。 将它们依次替换为对于工厂方法的调用， 同时将创建产品的代码移入工厂方法。</p><p>你可能需要在工厂方法中添加临时参数来控制返回的产品类型。</p><p>工厂方法的代码看上去可能非常糟糕。 其中可能会有复杂的 <code>switch</code>分支运算符， 用于选择各种需要实例化的产品类。 但是不要担心， 我们很快就会修复这个问题。</p></li><li><p>现在， 为工厂方法中的每种产品编写一个创建者子类， 然后在子类中重写工厂方法， 并将基本方法中的相关创建代码移动到工厂方法中。</p></li><li><p>如果应用中的产品类型太多， 那么为每个产品创建子类并无太大必要， 这时你也可以在子类中复用基类中的控制参数。</p><p>例如， 设想你有以下一些层次结构的类。 基类 <code>邮件</code>及其子类 <code>航空邮件</code>和 <code>陆路邮件</code> ；  <code>运输</code>及其子类 <code>飞机</code>, <code>卡车</code>和 <code>火车</code> 。  <code>航空邮件</code>仅使用 <code>飞机</code>对象， 而 <code>陆路邮件</code>则会同时使用 <code>卡车</code>和 <code>火车</code>对象。 你可以编写一个新的子类 （例如 <code>火车邮件</code> ） 来处理这两种情况， 但是还有其他可选的方案。 客户端代码可以给 <code>陆路邮件</code>类传递一个参数， 用于控制其希望获得的产品。</p></li><li><p>如果代码经过上述移动后， 基础工厂方法中已经没有任何代码， 你可以将其转变为抽象类。 如果基础工厂方法中还有其他语句， 你可以将其设置为该方法的默认行为。</p></li></ol><h2 id="工厂方法模式优缺点"><a href="#工厂方法模式优缺点" class="headerlink" title="工厂方法模式优缺点"></a>工厂方法模式优缺点</h2><p>优点：</p><ul><li>你可以避免创建者和具体产品之间的紧密耦合。</li><li><em>单一职责原则</em>。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</li><li><em>开闭原则</em>。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</li></ul><p>缺点：</p><ul><li>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</li></ul><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ul><li>在许多设计工作的初期都会使用工厂方法模式（较为简单， 而且可以更方便地通过子类进行定制）， 随后演化为使用抽象工厂模式、 原型模式或生成器模式（更灵活但更加复杂）。</li><li>抽象工厂模式]通常基于一组工厂方法， 但你也可以使用原型模式来生成这些类的方法。</li><li>你可以同时使用工厂方法和迭代器模式来让子类集合返回不同类型的迭代器， 并使得迭代器与集合相匹配。</li><li>原型并不基于继承， 因此没有继承的缺点。 另一方面， <em>原型</em>需要对被复制对象进行复杂的初始化。工厂方法基于继承， 但是它不需要初始化步骤。</li><li>工厂方法是模板方法模式的一种特殊形式。 同时， <em>工厂方法</em>可以作为一个大型<em>模板方法</em>中的一个步骤。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h1&gt;&lt;h2 id=&quot;意图&quot;&gt;&lt;a href=&quot;#意图&quot; class=&quot;headerlink&quot; title=&quot;意图&quot;&gt;&lt;/a&gt;意图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;工厂方法模式&lt;/strong&gt;是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="https://blog.48626.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://blog.48626.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="工厂方法模式" scheme="https://blog.48626.xyz/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Typora启用代理</title>
    <link href="https://blog.48626.xyz/463cd35b6d1e.html"/>
    <id>https://blog.48626.xyz/463cd35b6d1e.html</id>
    <published>2024-09-12T07:23:25.000Z</published>
    <updated>2024-09-12T07:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>进入偏好设置, 在通用中下拉找到打开高级设置.<img src="/463cd35b6d1e/image-20240912152435894.png" class="" alt="image-20240912152435894"></p><p>在弹出的文件夹中用编辑器打开conf.user.json文件</p><img src="/463cd35b6d1e/image-20240912152512793.png" class="" alt="image-20240912152512793"><p>修改flags中的内容</p><img src="/463cd35b6d1e/image-20240912152603123.png" class="" alt="image-20240912152603123"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;flags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="punctuation">[</span><span class="string">&quot;proxy-server&quot;</span><span class="punctuation">,</span> <span class="string">&quot;socks5://127.0.0.1:10808&quot;</span><span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">]</span> <span class="comment">// default [], append Chrome launch flags, e.g: [[&quot;disable-gpu&quot;], [&quot;host-rules&quot;, &quot;MAP * 127.0.0.1&quot;]]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;进入偏好设置, 在通用中下拉找到打开高级设置.&lt;img src=&quot;/463cd35b6d1e/image-20240912152435894.png&quot; class alt=&quot;image-20240912152435894&quot;&gt;&lt;/p&gt;
&lt;p&gt;在弹出的文件夹中用编辑器打开conf.user.json文件&lt;/p&gt;
&lt;img src=&quot;/463cd35b6d1e/image-20240912152512793.png&quot; class alt=&quot;image-20240912152512793&quot;&gt;</summary>
    
    
    
    <category term="typora" scheme="https://blog.48626.xyz/categories/typora/"/>
    
    
    <category term="typora" scheme="https://blog.48626.xyz/tags/typora/"/>
    
  </entry>
  
</feed>
